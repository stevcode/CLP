<catel:UserControl x:Class="Classroom_Learning_Partner.Views.CLPFuzzyFactorCardView"
                   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                   xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                   xmlns:catel="http://catel.codeplex.com"
                   xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                   xmlns:ac="clr-namespace:AdornedControl"
                   xmlns:oldconv="clr-namespace:Classroom_Learning_Partner.Resources"
                   xmlns:conv="clr-namespace:Classroom_Learning_Partner.Converters">

    <UserControl.Resources>
        <catel:BooleanToOppositeBooleanConverter x:Key="BooleanToOppositeBooleanConverter" />
        <catel:BooleanToHidingVisibilityConverter x:Key="BooleanToHidingVisibilityConverter" />
        <oldconv:LengthConverter x:Key="LengthConverter" />
        <oldconv:NegativeLengthSubtractConverter x:Key="NegativeLengthSubtractConverter" />
        <conv:ZeroToQuestionMarkConverter x:Key="ZeroToQuestionMarkConverter" />
        <conv:DoubleToVisibilityConverter x:Key="DoubleToVisibilityConverter" />
        <conv:AllBoolToVisibilityMultiConverter x:Key="AllBoolToVisibilityMultiConverter" />
        <conv:MultiplyAllIntToTextMultiConverter x:Key="MultiplyAllIntToTextMultiConverter" />
        <conv:BooleanToOppositeVisibilityConverter x:Key="BooleanToOppositeVisibilityConverter" />
        <conv:BoolToAlignmentConverter x:Key="BoolToAlignmentConverter" />
        <conv:DivisionPositionToColorMultiConverter x:Key="DivisionPositionToColorMultiConverter" />
        <conv:IntToVisibilityConverter x:Key="IntToVisibilityConverter" />
        <conv:MarginSingleSideConverter x:Key="MarginSingleSideConverter" />
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <Style x:Key="HorizontalGridLineStyle">
            <Setter Property="Canvas.Left"
                    Value="0" />
            <Setter Property="Canvas.Top"
                    Value="{Binding}" />
        </Style>
        <Style x:Key="VerticalGridLineStyle">
            <Setter Property="Canvas.Left"
                    Value="{Binding}" />
            <Setter Property="Canvas.Top"
                    Value="0" />
        </Style>
        <Style x:Key="HorizontalDivisionStyle">
            <Setter Property="Canvas.Left"
                    Value="0" />
            <Setter Property="Canvas.Top"
                    Value="{Binding Position}" />
        </Style>
        <Style x:Key="VerticalDivisionStyle">
            <Setter Property="Canvas.Left"
                    Value="{Binding Position}" />
            <Setter Property="Canvas.Top"
                    Value="0" />
        </Style>

        <SolidColorBrush x:Key="TopLabelColor" Color="DarkOrange" />
        <SolidColorBrush x:Key="LeftLabelColor" Color="Blue" />
        <SolidColorBrush x:Key="DividerColor" Color="DimGray" />
        <SolidColorBrush x:Key="GridColor" Color="CornflowerBlue" />
        <SolidColorBrush x:Key="ShadingColor" Color="LightGray" />
        <SolidColorBrush x:Key="SumColor" Color="Black" />
    </UserControl.Resources>

    <ac:AdornedControl HorizontalAlignment="Center" VerticalAlignment="Center"
                       HorizontalAdornerPlacement="Outside" VerticalAdornerPlacement="Outside"
                       IsAdornerVisible="{Binding IsAdornerVisible, Mode=TwoWay}"
                       IsMouseOverShowEnabled="{Binding IsMouseOverShowEnabled}"
                       OpenAdornerTimeOut="{Binding OpenAdornerTimeOut}"
                       CloseAdornerTimeOut="{Binding CloseAdornerTimeOut}">
        <!--This is the adorner-->
        <ac:AdornedControl.AdornerContent>
            <Canvas HorizontalAlignment="Center" VerticalAlignment="Center"
                    Width="{Binding Width}" Height="{Binding Height}">

                <Rectangle Stroke="Black" StrokeDashArray="0.5 1.0 0.3" StrokeThickness="2"
                           RadiusX="10" RadiusY="10"
                           Canvas.Top="-5" Canvas.Left="-5"
                           Width="{Binding Width, Converter={StaticResource LengthConverter}, ConverterParameter=14}"
                           Height="{Binding Height, Converter={StaticResource LengthConverter}, ConverterParameter=14}"
                           Visibility="{Binding IsDefaultAdornerVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />

                <!--Close Button-->
                <Button Command="{Binding RemovePageObjectCommand}"
                        Cursor="Hand"
                        Width="40" Height="40"
                        Canvas.Left="-40" Canvas.Top="-40"
                        Visibility="{Binding IsDefaultAdornerVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Ellipse Stroke="Black" StrokeThickness="3" Fill="White"
                                         VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />
                                <Path Data="M0,0 L1,1 M0,1 L1,0"
                                      Stretch="Fill" Margin="5"
                                      Stroke="Red" StrokeThickness="3" />
                            </Grid>
                        </ControlTemplate>
                    </Button.Template>
                </Button>

                <!--Drag Thumb-->
                <Thumb Cursor="ScrollAll"
                       Width="40" Height="40"
                       Canvas.Right="-40" Canvas.Top="-40"
                       Visibility="{Binding IsDefaultAdornerVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="DragDelta">
                            <catel:EventToCommand Command="{Binding DragPageObjectCommand}" PassEventArgsToCommand="True" />
                        </i:EventTrigger>
                        <i:EventTrigger EventName="DragStarted">
                            <catel:EventToCommand Command="{Binding DragStartPageObjectCommand}" PassEventArgsToCommand="True" />
                        </i:EventTrigger>
                        <i:EventTrigger EventName="DragCompleted">
                            <catel:EventToCommand Command="{Binding DragStopPageObjectCommand}" PassEventArgsToCommand="True" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <Thumb.Template>
                        <ControlTemplate>
                            <Grid>
                                <Ellipse Stroke="Black" StrokeThickness="3" Fill="White"
                                         VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />
                                <Path Stroke="Black" StrokeThickness="1" Fill="Black"
                                      Data="M 5,20 L 10,15 L 10,25 L 5,20" />
                                <Path Stroke="Black" StrokeThickness="1" Fill="Black"
                                      Data="M 35,20 L 30,15 L 30,25 L 35,20" />
                                <Path Stroke="Black" StrokeThickness="1" Fill="Black"
                                      Data="M 20,5 L 20,35" />
                                <Path Stroke="Black" StrokeThickness="1" Fill="Black"
                                      Data="M 20,35 L 15,30 L 25,30 L 20,35" />
                                <Path Stroke="Black" StrokeThickness="1" Fill="Black"
                                      Data="M 20,5 L 15,10 L 25,10 L 20,5" />
                                <Path Stroke="Black" StrokeThickness="1" Fill="Black"
                                      Data="M 5,20 L 35,20" />
                            </Grid>
                        </ControlTemplate>
                    </Thumb.Template>
                </Thumb>

                <!--Resize Thumb-->
                <Thumb Cursor="SizeNWSE"
                       Width="40" Height="40"
                       Canvas.Right="-40" Canvas.Bottom="-40"
                       Visibility="{Binding IsDefaultAdornerVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="DragDelta">
                            <catel:EventToCommand Command="{Binding ResizeFuzzyFactorCardCommand}" PassEventArgsToCommand="True" />
                        </i:EventTrigger>
                        <i:EventTrigger EventName="DragStarted">
                            <catel:EventToCommand Command="{Binding ResizeStartPageObjectCommand}" PassEventArgsToCommand="True" />
                        </i:EventTrigger>
                        <i:EventTrigger EventName="DragCompleted">
                            <catel:EventToCommand Command="{Binding ResizeStopPageObjectCommand}" PassEventArgsToCommand="True" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <Thumb.Template>
                        <ControlTemplate>
                            <Grid>
                                <Ellipse Stroke="Black" StrokeThickness="3" Fill="White"
                                         VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />
                                <Path Stroke="Black" StrokeThickness="1"
                                      Data="M 8,23 L 23,23 L 23,8" />
                                <Path Stroke="Black" StrokeThickness="1"
                                      Data="M 12,27 L 27,27 L 27,12" />
                            </Grid>
                        </ControlTemplate>
                    </Thumb.Template>
                </Thumb>

                <!--TO DO Liz : re-enable rotate later on-->
                <!--Rotate Array Button-->
                <!--<Button Command="{Binding RotateArrayCommand}"
                        Width="40" Height="40"
                        Canvas.Right="-50"
                        Canvas.Top="20"
                        Visibility="{Binding IsRotateAdornerVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Ellipse Stroke="Black" StrokeThickness="3" Fill="White"
                                         VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />
                                <Image Source="pack://application:,,,/Resources/Images/AdornerImages/ArrayRotate64.png"
                                       Height="25" Width="25" Margin="6"
                                       HorizontalAlignment="Left" VerticalAlignment="Top" />
                            </Grid>
                        </ControlTemplate>
                    </Button.Template>
                </Button>-->

                <!--Take Away Last Array Button-->
                <Button Command="{Binding RemoveLastArrayCommand}"
                        Cursor="Hand"
                        Width="40" Height="40"
                        Canvas.Left="-40"
                        Canvas.Bottom="-40"
                        Visibility="{Binding IsDefaultAdornerVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Ellipse Stroke="Black" StrokeThickness="3" Fill="White"
                                         VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />
                                <Path Data="M0,0.5 L1,0.5" 
                                      Stretch="Fill" Margin="5"
                                      Stroke="Green" StrokeThickness="3" />
                            </Grid>
                        </ControlTemplate>
                    </Button.Template>
                </Button>

            </Canvas>
        </ac:AdornedControl.AdornerContent>

        <Grid Width="{Binding Width}" Height="{Binding Height}">
            <Grid.RowDefinitions>
                <RowDefinition Height="{Binding PageObject.LabelLength}" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="{Binding PageObject.LabelLength}"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding PageObject.LabelLength}" />
                <ColumnDefinition Width="Auto" />
                <!-- TODO Liz: Make this width depend on IsHorizontallyAligned -->
                <ColumnDefinition Width="{Binding PageObject.LargeLabelLength}" />
            </Grid.ColumnDefinitions>

            <!--Background Shading-->
            <!--<Rectangle Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"
                       Height="{Binding ArrayHeight}" Opacity="0.25">
                <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Color="DimGray" Offset="0.0" />
                        <GradientStop Color="Gray" Offset="0.75" />
                        <GradientStop Color="Transparent" Offset="1.0" />
                    </LinearGradientBrush>
                </Rectangle.Fill>
            </Rectangle>-->
            <!--<Rectangle Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"
                       Height="{Binding ArrayHeight}" Opacity="0.75">
                <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Color="PowderBlue" Offset="0.0" />
                        <GradientStop Color="PowderBlue" Offset="0.75" />
                        <GradientStop Color="Transparent" Offset="1.0" />
                    </LinearGradientBrush>
                </Rectangle.Fill>
            </Rectangle>-->
            <!--<Border Grid.Row="1" Grid.Column="2"
                     Height="{Binding ArrayHeight}" Width="{Binding PageObject.LargeLabelLength}"
                     HorizontalAlignment="Left" VerticalAlignment="Top"
                     BorderThickness="0 3 0 3" Margin="0"
                     SnapsToDevicePixels="True"
                     Visibility="{Binding IsHorizontallyAligned, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Border.BorderBrush>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Color="Black" Offset="0.0" />
                        <GradientStop Color="Black" Offset="0.5" />
                        <GradientStop Color="Transparent" Offset="1.0" />
                    </LinearGradientBrush>
                </Border.BorderBrush>
            </Border>-->
            <!--<Border Grid.Row="1" Grid.Column="2"
                     Height="{Binding ArrayHeight}" Width="{Binding PageObject.LargeLabelLength}"
                     HorizontalAlignment="Left" VerticalAlignment="Top"
                     BorderThickness="0 3 0 3" Margin="0"
                     SnapsToDevicePixels="True"
                     Visibility="{Binding IsHorizontallyAligned, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Border.BorderBrush>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Color="Black" Offset="0.0" />
                        <GradientStop Color="Black" Offset="0.25" />
                        <GradientStop Color="Transparent" Offset="1.0" />
                    </LinearGradientBrush>
                </Border.BorderBrush>
            </Border>
            <Rectangle Grid.Row="1" Grid.Column="2" VerticalAlignment="Center"
                       Height="{Binding ArrayHeight}" Width="100"  Opacity="0.25">
                <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Color="Transparent" Offset="0.0" />
                        <GradientStop Color="Black" Offset="0.5" />
                        <GradientStop Color="Transparent" Offset=".95" />
                    </LinearGradientBrush>
                </Rectangle.Fill>
            </Rectangle>-->

            <!--Left Labels-->
            <TextBlock Grid.Column="0" Grid.Row="1" IsHitTestVisible="False"
                       Text="{Binding Rows}" TextAlignment="Center"
                       FontWeight="Bold" FontSize="22"
                       Foreground="{StaticResource LeftLabelColor}"
                       Height="22"
                       Width="{Binding ArrayHeight}"
                       Visibility="{Binding IsHorizontallyAligned, Converter={StaticResource BooleanToVisibilityConverter}}">
                <TextBlock.LayoutTransform>
                    <TransformGroup>
                        <ScaleTransform />
                        <SkewTransform />
                        <RotateTransform Angle="-90" />
                        <TranslateTransform />
                    </TransformGroup>
                </TextBlock.LayoutTransform>
            </TextBlock>

            <!--Right Fuzzy Edge-->
            <!--<Path Grid.Row="1" Grid.Column="2"
                  Stretch="Fill" Margin="0"
                  Stroke="{Binding FuzzyEdgeColor}" StrokeThickness="3" 
                  HorizontalAlignment="Right"
                  Visibility="{Binding IsHorizontallyAligned, Converter={StaticResource BooleanToVisibilityConverter}}"
                  SnapsToDevicePixels="True"
                  Data="M -1,0 L 1,0 C 1,0 2,1 1,2 C 1,2 0,3 1,4 C 1,4 2,5 1,6 C 1,6 0,7 1,8 C 1,8 2,9 1,10 C 1,10 0,11 1,12 C 1,12 2,13 1,14 C 1,14 0,15 1,16 C 1,16 2,17 1,18 C 1,18 0,19 1,20 C 1,20 2,21 1,22 C 1,22 0,23 1,24 C 1,24 2,25 1,26 M 1,26 L -1,26" />

            <Border Grid.Row="1" Grid.Column="2"
                     Height="{Binding ArrayHeight}" Width="{Binding PageObject.LabelLength}"
                     HorizontalAlignment="Left" VerticalAlignment="Top"
                     BorderBrush="{Binding FuzzyEdgeColor}" BorderThickness="0 3 0 3" Margin="0"
                     SnapsToDevicePixels="True"
                     Visibility="{Binding IsHorizontallyAligned, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <Border Grid.Row="1" Grid.Column="2"
                     Height="{Binding ArrayHeight}" Width="{Binding PageObject.LargeLabelLength}"
                     HorizontalAlignment="Left" VerticalAlignment="Top"
                     BorderThickness="0 3 0 3" Margin="0"
                     SnapsToDevicePixels="True"
                     Visibility="{Binding IsHorizontallyAligned, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Border.BorderBrush>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Color="Black" Offset="0.0" />
                        <GradientStop Color="Black" Offset="0.5" />
                        <GradientStop Color="Transparent" Offset="1.0" />
                    </LinearGradientBrush>
                </Border.BorderBrush>
            </Border>-->
            
            <Border Grid.Row="1" Grid.Column="1"
                     Height="{Binding ArrayHeight}" Width="{Binding ArrayWidth}"
                     HorizontalAlignment="Left" VerticalAlignment="Top"
                     BorderBrush="{Binding FuzzyEdgeColor}"  BorderThickness="0 0 3 0" Margin="0"
                     SnapsToDevicePixels="True"/>

            <!--Bottom Fuzzy Edge-->
            <!-- TODO Liz - make fixes as in right fuzzy edge-->
            <Path Grid.Row="2" Grid.Column="1"
                  Visibility="{Binding IsHorizontallyAligned, Converter={StaticResource BooleanToOppositeVisibilityConverter}}"
                  VerticalAlignment="Bottom"
                  SnapsToDevicePixels="True"
                  Data="M 0,-1 L 0,0 C 0,0 1,1 2,0 C 2,0 3,-1 4,0 M 4,0 C 4,0 5,1 6,0 C 6,0 7,-1 8,0 C 8,0 9,1 10,0 C 10,0 11,-1 12,0 C 12,0 13,1 14,0 C 14,0 15,-1 16,0 C 16,0 17,1 18,0 C 18,0 19,-1 20,0 C 20,0 21,1 22,0 C 22,0 23,-1 24,0 C 24,0 25,1 26,0  M 26,0 L 26,-1"
                  Stretch="Fill" Margin="0"
                  Stroke="{Binding FuzzyEdgeColor}" StrokeThickness="3" />

            <!--Array top and bottom edges-->
            <Border Grid.Row="1" Grid.Column="1"
                     Height="{Binding ArrayHeight}" Width="{Binding ArrayWidth}"
                     HorizontalAlignment="Left" VerticalAlignment="Top"
                     BorderThickness="0 3 0 3" Margin="0"
                     SnapsToDevicePixels="True"
                     Visibility="{Binding IsHorizontallyAligned, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Border.BorderBrush>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Color="{Binding BorderColor}" Offset="0.0" />
                        <GradientStop Color="{Binding BorderColor}" Offset="0.5" />
                        <GradientStop Color="{Binding FuzzyEdgeColor}" Offset="1.0" />
                    </LinearGradientBrush>
                </Border.BorderBrush>
            </Border>
            
            <!--Grid seperated at at last divider-->
            <Grid Grid.Column="1" Grid.Row="1" Grid.ColumnSpan="2" Grid.RowSpan="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding PageObject.LastDivisionPosition}" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="{Binding ArrayHeight}" />
                </Grid.RowDefinitions>
                <!--TODO Liz: Add rows for rotating-->

                <!--Grid Lines-->
                <ItemsControl Grid.Column="0" Grid.Row="0"
                          ItemsSource="{Binding HorizontalGridLines}"
                          ItemContainerStyle="{StaticResource HorizontalGridLineStyle}"
                          Visibility="{Binding IsGridOn, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas Background="Transparent" Height="Auto" Width="Auto" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Rectangle Height="1" Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ItemsControl}}}"
                                   Stroke="{StaticResource GridColor}" StrokeThickness="3" />
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>

                <ItemsControl Grid.Column="0" Grid.Row="0"
                          ItemsSource="{Binding VerticalGridLines}"
                          ItemContainerStyle="{StaticResource VerticalGridLineStyle}"
                          Visibility="{Binding IsGridOn, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas Background="Transparent" Height="Auto" Width="Auto" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Rectangle Width="1" Height="{Binding ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ItemsControl}}}"
                                   Stroke="{StaticResource GridColor}" StrokeThickness="3" />
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>

                <!--Vertical Divisions-->
                <ItemsControl Grid.Column="0" Grid.Row="0"
                          ItemsSource="{Binding VerticalDivisions}"
                          ItemContainerStyle="{StaticResource VerticalDivisionStyle}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas Height="Auto" Width="Auto" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Canvas Width="{Binding Length}"
                                Height="{Binding ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ItemsControl}}}">

                                <!--Array Shading-->
                                <Rectangle 
                                       Width="{Binding Length}" Margin="0 3" 
                                       Height="{Binding ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ItemsControl}}, 
                                                                      Converter={StaticResource LengthConverter}, 
                                                                      ConverterParameter=-6}"
                                       StrokeThickness="0" Opacity=".3">
                                    <Rectangle.Fill>
                                        <MultiBinding Converter="{StaticResource DivisionPositionToColorMultiConverter}">
                                            <Binding Path="Position" />
                                            <Binding Path="DataContext.VerticalDivisions" RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType={x:Type ItemsControl}}" />
                                        </MultiBinding>
                                    </Rectangle.Fill>
                                </Rectangle>

                                <!--The Visible Division Line-->
                                <Rectangle Tag="DivisionHitBox"
                                       Width="3" Margin="0 3"
                                       Height="{Binding ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ItemsControl}}, 
                                                                      Converter={StaticResource LengthConverter}, 
                                                                      ConverterParameter=-6}"
                                       StrokeThickness="0" Fill="{StaticResource DividerColor}" Opacity=".7"
                                       Visibility="{Binding Position, Converter={StaticResource DoubleToVisibilityConverter}}"/>

                                <!--Label Inside Snapped-in Array-->
                                <Grid VerticalAlignment="Center" HorizontalAlignment="Center"
                                  Height="{Binding Length}"
                                  Width="{Binding DataContext.ArrayHeight, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ItemsControl}}}"
                                  Visibility="{Binding Value, Converter={StaticResource IntToVisibilityConverter}}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.LayoutTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <SkewTransform />
                                            <RotateTransform Angle="-90" />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </Grid.LayoutTransform>
                                    <TextBlock Grid.Column="0"  IsHitTestVisible="False"
                                           Text="{Binding DataContext.Rows, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ItemsControl}}}" TextAlignment="Center"
                                           VerticalAlignment="Center" HorizontalAlignment="Right"
                                           FontSize="22" FontWeight="Bold" Foreground="{StaticResource LeftLabelColor}"
                                           Height="22" />
                                    <TextBlock Grid.Column="1"  IsHitTestVisible="False" Margin="3"
                                           Text="x" TextAlignment="Center"
                                           VerticalAlignment="Center" HorizontalAlignment="Center"
                                           FontSize="22" FontWeight="Bold" 
                                           Height="22" />
                                    <TextBlock Grid.Column="2"  IsHitTestVisible="False" 
                                           Text="{Binding Value}" TextAlignment="Center"
                                           VerticalAlignment="Center" HorizontalAlignment="Left"
                                           FontSize="22" FontWeight="Bold" Foreground="{StaticResource TopLabelColor}"
                                           Height="22" />
                                </Grid>
                            </Canvas>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>

                <Border Grid.Column="0" Grid.Row="0"
                    Height="{Binding ArrayHeight}"  Width="{Binding PageObject.LastDivisionPosition}"
                    HorizontalAlignment="Left" VerticalAlignment="Top"
                    BorderBrush="{Binding BorderColor}" BorderThickness="0 3 0 3" SnapsToDevicePixels="True"/>

                <!--Black line for last divider-->
                <Border Grid.Column="1" Grid.Row="0" Background="Transparent" BorderThickness="3 0 0 0" BorderBrush="{Binding BorderColor}"/>

                <!--Value of the remainder so far-->
                <Ellipse Grid.Column="1" Grid.Row="0" Height="34" Width="36"
                     StrokeThickness="3" Stroke ="Black" Opacity="1"
                     VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin ="5 0 23 17"
                     Visibility="{Binding PageObject.GroupsSubtracted, Converter={StaticResource IntToVisibilityConverter}}"/>
                <TextBlock Grid.Column="1" Grid.Row="0" Foreground="Black"  IsHitTestVisible="False"
                           TextAlignment="Center" Margin="5 0 23 22"
                           FontWeight="Bold" FontSize="18"
                           VerticalAlignment="Bottom"
                           HorizontalAlignment="Center"
                           Text="{Binding PageObject.CurrentRemainder}"
                           Visibility="{Binding PageObject.GroupsSubtracted, Converter={StaticResource IntToVisibilityConverter}}"/>
            </Grid>

            <!--Array Left edge-->
            <Border  Grid.Row="1" Grid.Column="1"
                     Height="{Binding ArrayHeight}" Width="{Binding ArrayWidth}"
                     HorizontalAlignment="Left" VerticalAlignment="Top"
                     BorderBrush="{Binding BorderColor}" BorderThickness="3 0 0 0" Margin="0"
                     SnapsToDevicePixels="True"/>

            <!--Bottom edge-->
            <!--<Border  Grid.Row="1" Grid.Column="1"
                     Width="{Binding ArrayWidth}" Height="{Binding ArrayHeight}"
                     HorizontalAlignment="Left" VerticalAlignment="Top"
                     BorderBrush="{Binding BorderColor}" BorderThickness="0 0 0 3" Margin="0"
                     SnapsToDevicePixels="True"
                     Visibility="{Binding IsHorizontallyAligned, Converter={StaticResource BooleanToVisibilityConverter}}"/>-->

            <!--Right edge-->
            <Border Grid.Row="1" Grid.Column="1"
                     Height="{Binding ArrayHeight}" Width="{Binding ArrayWidth}"
                     HorizontalAlignment="Left" VerticalAlignment="Top"
                     BorderBrush="{Binding BorderColor}" BorderThickness="0 0 3 0" Margin="0"
                     SnapsToDevicePixels="True"
                     Visibility="{Binding IsHorizontallyAligned, Converter={StaticResource BooleanToOppositeVisibilityConverter}}"/>

            <!--Dividend-->
            <Ellipse Grid.Column="1" Grid.Row="1" Grid.ColumnSpan="1" Height="63" Width="63"
                     StrokeThickness="3" Stroke="Black"  Fill="Transparent" 
                     VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0 20 0 0"/>

            <TextBlock Grid.Column="1" Grid.Row="1" Grid.ColumnSpan="1"
                       IsHitTestVisible="False"
                           FontWeight="Bold" FontSize="32"
                           Foreground="Black"
                           VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0 33 0 0"
                           Text="{Binding Dividend}"/>

            <!--Array hit box-->
            <Rectangle x:Name="Array" Grid.Row="1" Grid.Column="1"
                       Tag="ArrayBodyHitBox"
                       Width="{Binding ArrayWidth}" Height="{Binding ArrayHeight}"
                       Fill="Transparent" Stroke="Transparent" StrokeThickness="3">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewMouseUp">
                        <catel:EventToCommand Command="{Binding ToggleMainArrayAdornersCommand}" PassEventArgsToCommand="True" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Rectangle>

            <!--<Canvas Grid.Row="2" Grid.Column="1"  ClipToBounds="False" Background="Pink" >
                <Grid>-->
            <StackPanel Grid.Row="2" Grid.Column="1"  Orientation="Horizontal" HorizontalAlignment="Left" 
                        Visibility="{Binding PageObject.GroupsSubtracted, Converter={StaticResource IntToVisibilityConverter}}">
                        <!--Margin="{Binding ActualWidth, ElementName=EmptyDivisions, Converter={StaticResource MarginSingleSideConverter}, ConverterParameter=Right}">-->
                
                        <!--Bottom Label (Equation)-->
                        <TextBlock
                                TextAlignment="Center" Margin="1 7 1 0" 
                                FontWeight="Bold" FontSize="18" Foreground="{StaticResource LeftLabelColor}"
                                Text="{Binding Rows}" />
                        <TextBlock 
                                TextAlignment="Center" Margin="1 7 1 0" 
                                FontWeight="Bold" FontSize="18"
                                Text="x" />
                        <TextBlock
                                TextAlignment="Center" Margin="1 7 1 0"
                                FontWeight="Bold" FontSize="18" Foreground="{StaticResource TopLabelColor}"
                                Text="{Binding PageObject.GroupsSubtracted}" />
                        <TextBlock 
                                TextAlignment="Center" Margin="1 7 1 0" 
                                FontWeight="Bold" FontSize="18"
                                VerticalAlignment="Top"
                                HorizontalAlignment="Center"
                                Text="=" />
                        <Grid>
                            <Ellipse Height="34" Width="37" Margin="1 0 0 0"
                                        StrokeThickness="3" Stroke ="Black" Fill="Transparent"/>
                            <TextBlock
                                    TextAlignment="Center" Margin="2 7 1 0"
                                    FontWeight="Bold" FontSize="18"
                                    Foreground="Black"  IsHitTestVisible="False">
                                <TextBlock.Text>
                                    <MultiBinding Converter="{StaticResource MultiplyAllIntToTextMultiConverter}">
                                        <Binding Path="Rows" />
                                        <Binding Path="PageObject.GroupsSubtracted" />
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </Grid>
                    </StackPanel>
                <!--</Grid>
            </Canvas>-->

        </Grid>

    </ac:AdornedControl>

</catel:UserControl>