using System;
using System.Collections.Generic;
using System.Linq;
using Catel.Data;

namespace CLP.Entities
{
    public enum RepresentationsUsedTypes
    {
        BlankPage,
        InkOnly,
        RepresentationsUsed
    }

    [Serializable]
    public class UsedRepresentation : ASerializableBase
    {
        #region Constructors

        #endregion // Constructors

        #region Properties

        /// <summary>Coded value of the Representation.</summary>
        public string CodedObject
        {
            get => GetValue<string>(CodedObjectProperty);
            set => SetValue(CodedObjectProperty, value);
        }

        public static readonly PropertyData CodedObjectProperty = RegisterProperty("CodedObject", typeof(string), string.Empty);

        /// <summary>Coded ID of the Representation.</summary>
        public string CodedID
        {
            get => GetValue<string>(CodedIDProperty);
            set => SetValue(CodedIDProperty, value);
        }

        public static readonly PropertyData CodedIDProperty = RegisterProperty("CodedID", typeof(string), string.Empty);

        /// <summary>Information considered part of the make-up of the Representation.</summary>
        public string RepresentationInformation
        {
            get => GetValue<string>(RepresentationInformationProperty);
            set => SetValue(RepresentationInformationProperty, value);
        }

        public static readonly PropertyData RepresentationInformationProperty = RegisterProperty("RepresentationInformation", typeof(string), string.Empty);

        /// <summary>Representational Correctness of this particular Representation.</summary>
        public Correctness Correctness
        {
            get => GetValue<Correctness>(CorrectnessProperty);
            set => SetValue(CorrectnessProperty, value);
        }

        public static readonly PropertyData CorrectnessProperty = RegisterProperty("Correctness", typeof(Correctness), Correctness.Unknown);

        /// <summary>If applicable, lists a reason for Correctness set to Partial or Incorrect.</summary>
        public string CorrectnessReason
        {
            get => GetValue<string>(CorrectnessReasonProperty);
            set => SetValue(CorrectnessReasonProperty, value);
        }

        public static readonly PropertyData CorrectnessReasonProperty = RegisterProperty("CorrectnessReason", typeof(string), Codings.PARTIAL_REASON_UNKNOWN);

        /// <summary>The part/side of the page definition the Representation matchec correctness against.</summary>
        public string MatchedRelationSide
        {
            get => GetValue<string>(MatchedRelationSideProperty);
            set => SetValue(MatchedRelationSideProperty, value);
        }

        public static readonly PropertyData MatchedRelationSideProperty = RegisterProperty("MatchedRelationSide", typeof(string), string.Empty);

        /// <summary>Signifies the Representation is still on the page at the time of submission.</summary>
        public bool IsFinalRepresentation
        {
            get => GetValue<bool>(IsFinalRepresentationProperty);
            set => SetValue(IsFinalRepresentationProperty, value);
        }

        public static readonly PropertyData IsFinalRepresentationProperty = RegisterProperty("IsFinalRepresentation", typeof(bool), false);

        /// <summary>Signifies the Representation was used, as determined by the specific Representation type.</summary>
        public bool IsUsed
        {
            get => GetValue<bool>(IsUsedProperty);
            set => SetValue(IsUsedProperty, value);
        }

        public static readonly PropertyData IsUsedProperty = RegisterProperty("IsUsed", typeof(bool), false);

        /// <summary>Signifies the Representation was interacted with, as determined by the specific Representation type.</summary>
        public bool IsInteractedWith
        {
            get => GetValue<bool>(IsInteractedWithProperty);
            set => SetValue(IsInteractedWithProperty, value);
        }

        public static readonly PropertyData IsInteractedWithProperty = RegisterProperty("IsInteractedWith", typeof(bool), false);

        /// <summary>Any extra information relevant to the compiled Representation information.</summary>
        public List<string> AdditionalInformation
        {
            get => GetValue<List<string>>(AdditionalInformationProperty);
            set => SetValue(AdditionalInformationProperty, value);
        }

        public static readonly PropertyData AdditionalInformationProperty = RegisterProperty("AdditionalInformation", typeof(List<string>), () => new List<string>());

        /// <summary>List of any Analysis Codes generated by the Representation.</summary>
        public List<string> AnalysisCodes
        {
            get => GetValue<List<string>>(AnalysisCodesProperty);
            set => SetValue(AnalysisCodesProperty, value);
        }

        public static readonly PropertyData AnalysisCodesProperty = RegisterProperty("AnalysisCodes", typeof(List<string>), () => new List<string>());

        /// <summary>List of all the PageObject IDs used by this singular Representation construct.</summary>
        public List<string> PageObjectIDs
        {
            get => GetValue<List<string>>(PageObjectIDsProperty);
            set => SetValue(PageObjectIDsProperty, value);
        }

        public static readonly PropertyData PageObjectIDsProperty = RegisterProperty("PageObjectIDs", typeof(List<string>), () => new List<string>());

        public string FormattedValue
        {
            get
            {
                // OJBJECT [ID] RepresentationInfo
                //      - Unused/No Interaction
                //      - Correct, LS
                //      - additional info
                //      - additional info
                //      - Codes:

                var header = $"{CodedObject} [{CodedID}] {RepresentationInformation}";
                var sections = new List<string>();

                var usage = IsUsed ? string.Empty : "Unused";
                if (string.IsNullOrWhiteSpace(usage))
                {
                    usage = IsInteractedWith ? string.Empty : "No Interaction";
                }
                if (!string.IsNullOrWhiteSpace(usage))
                {
                    sections.Add(usage);
                }

                if (Correctness != Correctness.Unknown)
                {
                    var correctnessSection = $"{Correctness}, {MatchedRelationSide}";
                    sections.Add(correctnessSection);
                }

                sections.AddRange(AdditionalInformation);

                var formattedAnalysisCodes = string.Join(", ", AnalysisCodes);
                var formattedAnalysisCodeSection = $"Codes: {formattedAnalysisCodes}";
                if (AnalysisCodes.Any())
                {
                    sections.Add(formattedAnalysisCodeSection);
                }

                var formattedSections = sections.Any() ? $"  - {string.Join("\n  - ", sections)}" : string.Empty;
                var formattedValue = $"{header}\n{formattedSections}";

                return formattedValue;
            }
        }

        #endregion // Properties
    }

    [Serializable]
    public class RepresentationsUsedTag : AAnalysisTagBase
    {
        #region Constructors

        public RepresentationsUsedTag() { }

        public RepresentationsUsedTag(CLPPage parentPage, Origin origin)
            : base(parentPage, origin) { }

        #endregion //Constructors

        #region Properties

        /// <summary>Identifies 3 possible usages scenarios: Ink Only, Blank Page, or Representations Used.</summary>
        public RepresentationsUsedTypes RepresentationsUsedType
        {
            get => GetValue<RepresentationsUsedTypes>(RepresentationsUsedTypeProperty);
            set => SetValue(RepresentationsUsedTypeProperty, value);
        }

        public static readonly PropertyData RepresentationsUsedTypeProperty =
            RegisterProperty("RepresentationsUsedType", typeof(RepresentationsUsedTypes), RepresentationsUsedTypes.BlankPage);

        /// <summary>List of all Representations used on the page.</summary>
        /// <remarks>
        ///     The IsUsed property can still be set to false, this is a list of all Representations added to the page,
        ///     the IsUsed property determines if the Representation was also used on the page in a significant fashion.
        /// </remarks>
        public List<UsedRepresentation> RepresentationsUsed
        {
            get => GetValue<List<UsedRepresentation>>(RepresentationsUsedProperty);
            set => SetValue(RepresentationsUsedProperty, value);
        }

        public static readonly PropertyData RepresentationsUsedProperty =
            RegisterProperty("RepresentationsUsed", typeof(List<UsedRepresentation>), () => new List<UsedRepresentation>());

        #region ATagBase Overrides

        public override bool IsSingleValueTag => true;

        public override Category Category => Category.Representation;

        public override string FormattedName => "Representations Used";

        public override string FormattedValue
        {
            get
            {
                switch (RepresentationsUsedType)
                {
                    case RepresentationsUsedTypes.BlankPage:
                        return "Blank Page";
                    case RepresentationsUsedTypes.InkOnly:
                        return "Ink Only";
                }

                var deletedRepresentations = RepresentationsUsed.Where(r => !r.IsFinalRepresentation).ToList();
                var deletedSection = !deletedRepresentations.Any()
                                         ? string.Empty
                                         : $"Deleted Representation(s):\n{string.Join("\n", deletedRepresentations.Select(r => r.FormattedValue).ToList())}";

                var finalRepresentations = RepresentationsUsed.Where(r => r.IsFinalRepresentation).ToList();
                var finalSection = !finalRepresentations.Any()
                                       ? string.Empty
                                       : $"Final Representation(s):\n{string.Join("\n", finalRepresentations.Select(r => r.FormattedValue).ToList())}";

                var finalSectionDelimiter = deletedRepresentations.Any() && finalRepresentations.Any() ? "\n" : string.Empty;

                var codeSection = QueryCodes.Any() ? $"\n\nCodes: {string.Join("\n", QueryCodes.Select(c => c.FormattedValue))}" : string.Empty;
                return $"{deletedSection}{finalSectionDelimiter}{finalSection}{codeSection}";
            }
        }

        #endregion //ATagBase Overrides

        #endregion //Properties

        #region Static Methods

        public static RepresentationsUsedTag AttemptTagGeneration(CLPPage page, List<ISemanticEvent> semanticEvents)
        {
            var tag = new RepresentationsUsedTag(page, Origin.StudentPageGenerated);

            var leftRelation = RepresentationCorrectnessTag.GenerateLeftRelationFromPageAnswerDefinition(page);
            var rightRelation = RepresentationCorrectnessTag.GenerateRightRelationFromPageAnswerDefinition(page);
            var alternativeRelation = RepresentationCorrectnessTag.GenerateAlternativeRelationFromPageAnswerDefinition(page);

            GenerateArraysUsedInformation(page, tag, semanticEvents, leftRelation, rightRelation, alternativeRelation);
            GenerateNumberLinesUsedInformation(page, tag, semanticEvents, leftRelation, rightRelation, alternativeRelation);
            GenerateStampsUsedInformation(page, tag, semanticEvents, leftRelation, rightRelation, alternativeRelation);
            GenerateBinsUsedInformation(page, tag);

            if (!tag.RepresentationsUsed.Any())
            {
                if (page.InkStrokes.All(s => s.GetStrokeOwnerID() == Person.AUTHOR_ID) &&
                    page.History.TrashedInkStrokes.All(s => s.GetStrokeOwnerID() == Person.AUTHOR_ID))
                {
                    tag.RepresentationsUsedType = RepresentationsUsedTypes.BlankPage;
                    AnalysisCode.AddRepresentationUsedBlankPage(tag);
                }
                else
                {
                    tag.RepresentationsUsedType = RepresentationsUsedTypes.InkOnly;
                    AnalysisCode.AddRepresentationUsedInkOnly(tag);
                }
            }
            else
            {
                tag.RepresentationsUsedType = RepresentationsUsedTypes.RepresentationsUsed;
                foreach (var usedRepresentation in tag.RepresentationsUsed)
                {
                    // TODO: Add in order
                    AnalysisCode.AddRepresentationUsed(tag, usedRepresentation);
                }
            }

            var isMR2STEP = IsMR2STEP(tag);
            if (isMR2STEP)
            {
                AnalysisCode.AddMultipleRepresentations2Step(tag);
            }

            var isMR = IsMR(tag);
            if (isMR)
            {
                AnalysisCode.AddMultipleRepresentations1Step(tag);
            }

            page.AddTag(tag);
            return tag;
        }

        public static void GenerateBinsUsedInformation(CLPPage page, RepresentationsUsedTag tag)
        {
            switch (page.PageNumber)
            {
                case 2:
                    if (page.OwnerID == "bs9X5-b9cEuwtaQHlLIKMw") // Ada
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = false,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "6",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.PartiallyCorrect,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);

                        var usedRepresentation2 = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = false,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "6",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.PartiallyCorrect,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation2);
                    }
                    break;
                case 3:
                    if (page.OwnerID == "d7tlNq2ryUqW53USnrea-A") // Eryn
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = true,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "9",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.PartiallyCorrect,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);
                    }
                    break;
                case 6:
                    if (page.OwnerID == "gftqBtWt8kmAfwajPo0b5w") // Alli
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = false,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "7",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.Correct,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);

                        var usedRepresentation2 = new UsedRepresentation
                                                  {
                                                      IsFinalRepresentation = true,
                                                      CodedObject = Codings.OBJECT_BINS,
                                                      CodedID = "7",
                                                      IsInteractedWith = true,
                                                      IsUsed = true,
                                                      Correctness = Correctness.PartiallyCorrect,
                                                      MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                  };
                        tag.RepresentationsUsed.Add(usedRepresentation2);
                    }
                    if (page.OwnerID == "iVMtTQVQ00qXyIVqvXBF2g") // Eva
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = true,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "7",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.Correct,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);
                    }
                    if (page.OwnerID == "CeH7YED0RkqGkmhSI5V2xw") // Nadia
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = true,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "7",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.Correct,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);
                    }
                    if (page.OwnerID == "jR1aFxiiXEi2OhaqLuf4VA") // Salma
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = false,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "7",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.PartiallyCorrect,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);

                        var usedRepresentation2 = new UsedRepresentation
                                                  {
                                                      IsFinalRepresentation = true,
                                                      CodedObject = Codings.OBJECT_BINS,
                                                      CodedID = "7",
                                                      IsInteractedWith = true,
                                                      IsUsed = true,
                                                      Correctness = Correctness.PartiallyCorrect,
                                                      MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                  };
                        tag.RepresentationsUsed.Add(usedRepresentation2);
                    }
                    break;
                case 7:
                    if (page.OwnerID == "L608APK1J0Kw8cVpJEvo6g") // Jane
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = false,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "6",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.PartiallyCorrect,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);
                    }
                    break;
                case 9:
                    if (page.OwnerID == "L608APK1J0Kw8cVpJEvo6g") // Jane
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = false,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "4",
                                                     IsInteractedWith = false,
                                                     IsUsed = false,
                                                     Correctness = Correctness.Unknown,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);
                    }
                    if (page.OwnerID == "CeH7YED0RkqGkmhSI5V2xw") // Nadia
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = false,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "7",
                                                     IsInteractedWith = false,
                                                     IsUsed = false,
                                                     Correctness = Correctness.Unknown,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);

                        var usedRepresentation2 = new UsedRepresentation
                                                  {
                                                      IsFinalRepresentation = true,
                                                      CodedObject = Codings.OBJECT_BINS,
                                                      CodedID = "8",
                                                      IsInteractedWith = true,
                                                      IsUsed = true,
                                                      Correctness = Correctness.Correct,
                                                      MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                  };
                        tag.RepresentationsUsed.Add(usedRepresentation2);
                    }
                    if (page.OwnerID == "iVMtTQVQ00qXyIVqvXBF2g") // Eva
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = false,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "8",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.PartiallyCorrect,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);
                    }
                    break;
                case 11:
                    if (page.OwnerID == "iVMtTQVQ00qXyIVqvXBF2g") // Eva
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = false,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "8",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.Correct,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);
                    }
                    if (page.OwnerID == "CBIJb3ubWUuZQRTie0mAaw") // Madeira
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = false,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "4",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.PartiallyCorrect,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);
                    }
                    if (page.OwnerID == "CeH7YED0RkqGkmhSI5V2xw") // Nadia
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = false,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "8",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.PartiallyCorrect,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);

                        var usedRepresentation2 = new UsedRepresentation
                                                  {
                                                      IsFinalRepresentation = false,
                                                      CodedObject = Codings.OBJECT_BINS,
                                                      CodedID = "8",
                                                      IsInteractedWith = false,
                                                      IsUsed = false,
                                                      Correctness = Correctness.Unknown,
                                                      MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                  };
                        tag.RepresentationsUsed.Add(usedRepresentation2);

                        var usedRepresentation3 = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = false,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "4",
                                                     IsInteractedWith = false,
                                                     IsUsed = false,
                                                     Correctness = Correctness.Unknown,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation3);

                        var usedRepresentation4 = new UsedRepresentation
                                                  {
                                                      IsFinalRepresentation = true,
                                                      CodedObject = Codings.OBJECT_BINS,
                                                      CodedID = "8",
                                                      IsInteractedWith = true,
                                                      IsUsed = true,
                                                      Correctness = Correctness.Correct,
                                                      MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                  };
                        tag.RepresentationsUsed.Add(usedRepresentation4);
                    }
                    if (page.OwnerID == "eO9HFRoY-0aLtcL2iA5-tQ") // Sanjit
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = false,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "5",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.PartiallyCorrect,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);

                        var usedRepresentation2 = new UsedRepresentation
                                                  {
                                                      IsFinalRepresentation = true,
                                                      CodedObject = Codings.OBJECT_BINS,
                                                      CodedID = "4",
                                                      IsInteractedWith = true,
                                                      IsUsed = true,
                                                      Correctness = Correctness.PartiallyCorrect,
                                                      MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                  };
                        tag.RepresentationsUsed.Add(usedRepresentation2);
                    }
                    break;
                case 12:
                    if (page.OwnerID == "nUd1x4-oukipFNwazvDrfQ") // Aaron
                    {
                        var usedRepresentation = new UsedRepresentation
                                                 {
                                                     IsFinalRepresentation = true,
                                                     CodedObject = Codings.OBJECT_BINS,
                                                     CodedID = "5",
                                                     IsInteractedWith = true,
                                                     IsUsed = true,
                                                     Correctness = Correctness.PartiallyCorrect,
                                                     MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                 };
                        tag.RepresentationsUsed.Add(usedRepresentation);

                        var usedRepresentation2 = new UsedRepresentation
                                                  {
                                                      IsFinalRepresentation = true,
                                                      CodedObject = Codings.OBJECT_BINS,
                                                      CodedID = "4",
                                                      IsInteractedWith = true,
                                                      IsUsed = true,
                                                      Correctness = Correctness.PartiallyCorrect,
                                                      MatchedRelationSide = Codings.MATCHED_RELATION_NONE
                                                  };
                        tag.RepresentationsUsed.Add(usedRepresentation2);
                    }
                    break;
            }
        }

        public static void GenerateArraysUsedInformation(CLPPage page,
                                                         RepresentationsUsedTag tag,
                                                         List<ISemanticEvent> semanticEvents,
                                                         SimplifiedRelation leftRelation,
                                                         SimplifiedRelation rightRelation,
                                                         SimplifiedRelation alternativeRelation)
        {
            var patternPoints = new List<PatternPoint>();
            var completedPatternPoints = new List<PatternPoint>();
            var subArrayGroups = new Dictionary<string, List<string>>();

            #region Find Pattern Points

            foreach (var semanticEvent in semanticEvents.Where(e => e.CodedObject == Codings.OBJECT_ARRAY))
            {
                var arrayID = semanticEvent.ReferencePageObjectID;

                if (semanticEvent.EventType == Codings.EVENT_OBJECT_ADD)
                {
                    var historyAction = semanticEvent.FirstHistoryAction;
                    var objectsChanged = historyAction as ObjectsOnPageChangedHistoryAction;
                    if (objectsChanged == null)
                    {
                        continue;
                    }

                    var patternPoint = new PatternPoint
                                       {
                                           PageObjectID = arrayID,
                                           StartHistoryActionIndex = objectsChanged.HistoryActionIndex,
                                           StartSemanticEventIndex = semanticEvent.SemanticEventIndex,
                                           StartEventType = semanticEvent.EventType
                                       };
                    patternPoints.Add(patternPoint);
                }
                else if (semanticEvent.EventType == Codings.EVENT_CUT)
                {
                    var historyAction = semanticEvent.FirstHistoryAction;
                    var pageObjectsCut = historyAction as PageObjectCutHistoryAction;
                    if (pageObjectsCut == null)
                    {
                        continue;
                    }

                    var patternPoint = patternPoints.FirstOrDefault(p => p.PageObjectID == arrayID);
                    if (patternPoint != null)
                    {
                        patternPoint.EndHistoryActionIndex = pageObjectsCut.HistoryActionIndex;
                        patternPoint.EndSemanticEventIndex = semanticEvent.SemanticEventIndex;
                        patternPoint.EndEventType = semanticEvent.EventType;
                        patternPoints.Remove(patternPoint);
                        completedPatternPoints.Add(patternPoint);
                    }

                    foreach (var halvedArrayID in pageObjectsCut.HalvedPageObjectIDs)
                    {
                        var patternPointForArrayHalf = new PatternPoint
                                                       {
                                                           PageObjectID = halvedArrayID,
                                                           StartHistoryActionIndex = pageObjectsCut.HistoryActionIndex,
                                                           StartSemanticEventIndex = semanticEvent.SemanticEventIndex,
                                                           StartEventType = semanticEvent.EventType
                                                       };
                        patternPoints.Add(patternPointForArrayHalf);
                    }
                }
                else if (semanticEvent.EventType == Codings.EVENT_ARRAY_SNAP)
                {
                    var historyAction = semanticEvent.FirstHistoryAction;
                    var arraySnap = historyAction as CLPArraySnapHistoryAction;
                    if (arraySnap == null)
                    {
                        continue;
                    }

                    var persistingArrayID = arraySnap.PersistingArrayID;
                    var patternPointForPersistingArray = patternPoints.FirstOrDefault(p => p.PageObjectID == persistingArrayID);
                    if (patternPointForPersistingArray != null)
                    {
                        patternPointForPersistingArray.EndHistoryActionIndex = arraySnap.HistoryActionIndex;
                        patternPointForPersistingArray.EndSemanticEventIndex = semanticEvent.SemanticEventIndex;
                        patternPointForPersistingArray.EndEventType = semanticEvent.EventType;
                        patternPoints.Remove(patternPointForPersistingArray);
                        completedPatternPoints.Add(patternPointForPersistingArray);
                    }

                    var snappedArrayID = arraySnap.SnappedArrayID;
                    var patternPointForSnappedArray = patternPoints.FirstOrDefault(p => p.PageObjectID == snappedArrayID);
                    if (patternPointForSnappedArray != null)
                    {
                        patternPointForSnappedArray.EndHistoryActionIndex = arraySnap.HistoryActionIndex;
                        patternPointForSnappedArray.EndSemanticEventIndex = semanticEvent.SemanticEventIndex;
                        patternPointForSnappedArray.EndEventType = semanticEvent.EventType;
                        patternPoints.Remove(patternPointForSnappedArray);
                        completedPatternPoints.Add(patternPointForSnappedArray);
                    }

                    var patternPointForNewArray = new PatternPoint
                                                  {
                                                      PageObjectID = persistingArrayID,
                                                      StartHistoryActionIndex = arraySnap.HistoryActionIndex,
                                                      StartSemanticEventIndex = semanticEvent.SemanticEventIndex,
                                                      StartEventType = semanticEvent.EventType
                                                  };
                    patternPoints.Add(patternPointForNewArray);
                }
                else if (semanticEvent.EventType == Codings.EVENT_ARRAY_DIVIDE_INK)
                {
                    var historyAction = semanticEvent.FirstHistoryAction;
                    var objectsChanged = historyAction as ObjectsOnPageChangedHistoryAction;
                    if (objectsChanged == null)
                    {
                        continue;
                    }

                    var eventInfo = semanticEvent.EventInformation;
                    var subArrays = eventInfo.Split(", ", StringSplitOptions.RemoveEmptyEntries).ToList();
                    if (!subArrayGroups.ContainsKey(arrayID))
                    {
                        subArrayGroups.Add(arrayID, subArrays);
                    }
                    else
                    {
                        subArrayGroups[arrayID].AddRange(subArrays);
                    }
                }
                else if (semanticEvent.EventType == Codings.EVENT_ARRAY_DIVIDE_INK_ERASE)
                {
                    var historyAction = semanticEvent.FirstHistoryAction;
                    var objectsChanged = historyAction as ObjectsOnPageChangedHistoryAction;
                    if (objectsChanged == null)
                    {
                        continue;
                    }

                    var eventInfo = semanticEvent.EventInformation;
                    var subArrays = eventInfo.Split(", ", StringSplitOptions.RemoveEmptyEntries).ToList();
                    foreach (var subArray in subArrays)
                    {
                        if (!subArrayGroups.ContainsKey(arrayID))
                        {
                            continue;
                        }

                        if (!subArrayGroups[arrayID].Contains(subArray))
                        {
                            continue;
                        }

                        subArrayGroups[arrayID].Remove(subArray);
                        if (!subArrayGroups[arrayID].Any())
                        {
                            subArrayGroups.Remove(arrayID);
                        }
                    }
                }
                else if (semanticEvent.EventType == Codings.EVENT_OBJECT_DELETE)
                {
                    var historyAction = semanticEvent.FirstHistoryAction;
                    var objectsChanged = historyAction as ObjectsOnPageChangedHistoryAction;
                    if (objectsChanged == null)
                    {
                        continue;
                    }

                    var patternPoint = patternPoints.FirstOrDefault(p => p.PageObjectID == arrayID);
                    if (patternPoint == null)
                    {
                        continue;
                    }

                    patternPoint.EndHistoryActionIndex = objectsChanged.HistoryActionIndex;
                    patternPoint.EndSemanticEventIndex = semanticEvent.SemanticEventIndex;
                    patternPoint.EndEventType = semanticEvent.EventType;
                    patternPoints.Remove(patternPoint);
                    completedPatternPoints.Add(patternPoint);
                }
            }

            #endregion // Find Pattern Points

            foreach (var patternPoint in patternPoints)
            {
                patternPoint.EndHistoryActionIndex = semanticEvents.Last().LastHistoryAction.HistoryActionIndex;
                patternPoint.EndSemanticEventIndex = semanticEvents.Last().SemanticEventIndex;
                completedPatternPoints.Add(patternPoint);
            }

            foreach (var patternPoint in completedPatternPoints)
            {
                var arrayID = patternPoint.PageObjectID;
                var array = page.GetPageObjectByIDOnPageOrInHistory(arrayID) as CLPArray;
                if (array == null)
                {
                    continue;
                }

                var usedRepresentation = new UsedRepresentation();
                usedRepresentation.PageObjectIDs.Add(arrayID);

                #region Basic Representation Info

                if (string.IsNullOrWhiteSpace(patternPoint.EndEventType))
                {
                    usedRepresentation.IsFinalRepresentation = true;
                }

                usedRepresentation.CodedObject = Codings.OBJECT_ARRAY;
                usedRepresentation.CodedID = array.GetCodedIDAtHistoryIndex(patternPoint.EndHistoryActionIndex);
                usedRepresentation.IsInteractedWith = semanticEvents
                    .Where(e => e.ReferencePageObjectID == arrayID)
                    .Any(e => e.EventType == Codings.EVENT_ARRAY_SKIP ||
                              e.EventType == Codings.EVENT_ARRAY_DIVIDE_INK ||
                              e.EventType == Codings.EVENT_ARRAY_EQN ||
                              (e.EventType == Codings.EVENT_INK_ADD && e.EventInformation.Contains(Codings.EVENT_INFO_INK_LOCATION_OVER)));
                usedRepresentation.IsUsed = true;

                if (subArrayGroups.ContainsKey(arrayID))
                {
                    // HACK - 2 existing strokes that create the same ink divide should combine. Ideally, this should be fixed in the DIVIDE INK event.
                    var subArrays = subArrayGroups[arrayID].ToList();
                    var subArraysToIgnore = new List<string>();

                    for (var i = 0; i < subArrays.Count - 1; i++)
                    {
                        var subArray = subArrays[i];
                        var trimmedSubArray = subArray.Replace('a', ' ')
                                                      .Replace('b', ' ')
                                                      .Replace('c', ' ')
                                                      .Replace('d', ' ')
                                                      .Replace('e', ' ')
                                                      .Replace('f', ' ')
                                                      .Replace('g', ' ')
                                                      .Replace('h', ' ')
                                                      .Trim();
                        for (var j = i + 1; j < subArrays.Count; j++)
                        {
                            var nextSubArray = subArrays[j];
                            var nextTrimmedSubArray = nextSubArray
                                .Replace('a', ' ')
                                .Replace('b', ' ')
                                .Replace('c', ' ')
                                .Replace('d', ' ')
                                .Replace('e', ' ')
                                .Replace('f', ' ')
                                .Replace('g', ' ')
                                .Replace('h', ' ')
                                .Trim();

                            if (trimmedSubArray == nextTrimmedSubArray)
                            {
                                subArraysToIgnore.Add(trimmedSubArray);
                            }
                        }
                    }

                    subArraysToIgnore = subArraysToIgnore.Distinct().ToList();
                    foreach (var subArray in subArraysToIgnore)
                    {
                        subArrays.Remove(subArray);
                    }

                    usedRepresentation.RepresentationInformation = string.Join(", ", subArrays);
                }

                var inkDivideAddEventsCount = semanticEvents.Count(e => e.SemanticEventIndex >= patternPoint.StartSemanticEventIndex &&
                                                                        e.SemanticEventIndex <= patternPoint.EndSemanticEventIndex &&
                                                                        e.EventType == Codings.EVENT_ARRAY_DIVIDE_INK &&
                                                                        e.ReferencePageObjectID == arrayID);
                usedRepresentation.AdditionalInformation.Add($"Total Ink Divides : {inkDivideAddEventsCount}");

                if (patternPoint.EndEventType == Codings.EVENT_CUT)
                {
                    usedRepresentation.AdditionalInformation.Add("Deleted by Cut");
                }

                if (patternPoint.EndEventType == Codings.EVENT_ARRAY_SNAP)
                {
                    usedRepresentation.AdditionalInformation.Add("Deleted by Snap");
                }

                if (patternPoint.StartEventType == Codings.EVENT_CUT)
                {
                    usedRepresentation.AdditionalInformation.Add("Created by Cut");
                }

                if (patternPoint.StartEventType == Codings.EVENT_ARRAY_SNAP)
                {
                    usedRepresentation.AdditionalInformation.Add("Created by Snap");
                }

                var skipEvents = semanticEvents.Where(e => e.ReferencePageObjectID == arrayID &&
                                                           e.SemanticEventIndex >= patternPoint.StartSemanticEventIndex &&
                                                           e.SemanticEventIndex <= patternPoint.EndSemanticEventIndex &&
                                                           (e.EventType == Codings.EVENT_ARRAY_SKIP || e.EventType == Codings.EVENT_ARRAY_SKIP_ERASE) &&
                                                           !e.EventInformation.Contains("bottom"));

                var skipEventGroupings = new List<List<ISemanticEvent>>();
                var currentSkipGrouping = new List<ISemanticEvent>();
                foreach (var skipCountingEvent in skipEvents)
                {
                    var formattedSkips = GetFormattedSkips(skipCountingEvent);
                    var skips = GetNumericSkipsFromFormattedSkips(formattedSkips);
                    if (skips.Count == 1 &&
                        skips.All(s => s == -1))
                    {
                        if (currentSkipGrouping.Any())
                        {
                            skipEventGroupings.Add(currentSkipGrouping.ToList());
                            currentSkipGrouping = new List<ISemanticEvent>();
                        }
                        continue;
                    }
                    currentSkipGrouping.Add(skipCountingEvent);
                }

                if (currentSkipGrouping.Any())
                {
                    skipEventGroupings.Add(currentSkipGrouping.ToList());
                }

                var columns = (int)array.GetColumnsAndRowsAtHistoryIndex(patternPoint.EndHistoryActionIndex).X;
                var rows = (int)array.GetColumnsAndRowsAtHistoryIndex(patternPoint.EndHistoryActionIndex).Y;

                foreach (var skipEventGrouping in skipEventGroupings)
                {
                    var counts = new List<dynamic>();
                    foreach (var skipCountingEvent in skipEventGrouping)
                    {
                        var formattedSkips = GetFormattedSkips(skipCountingEvent);
                        if (formattedSkips == null)
                        {
                            continue;
                        }

                        var skips = GetNumericSkipsFromFormattedSkips(formattedSkips);

                        var correctDimensionMatches = 0;
                        var wrongDimensionMatches = 0;
                        var totalNumbers = 0;
                        for (var i = 0; i < skips.Count; i++)
                        {
                            var currentValue = skips[i];
                            if (currentValue == -1)
                            {
                                continue;
                            }

                            var expectedValue = (i + 1) * columns;
                            if (currentValue == expectedValue)
                            {
                                correctDimensionMatches++;
                            }

                            var wrongDimensionExpectedValue = (i + 1) * rows;
                            if (currentValue == wrongDimensionExpectedValue &&
                                rows != columns)
                            {
                                wrongDimensionMatches++;
                            }

                            totalNumbers++;
                        }

                        var count = new
                                    {
                                        CorrectDimensionMatches = correctDimensionMatches,
                                        WrongDimensionMatches = wrongDimensionMatches,
                                        TotalNumbers = totalNumbers,
                                        SemanticEvent = skipCountingEvent
                                    };
                        counts.Add(count);
                    }

                    var bestChoice = counts.Where(c => c.CorrectDimensionMatches != 0).OrderByDescending(c => c.CorrectDimensionMatches).FirstOrDefault() ??
                                     counts.Where(c => c.WrongDimensionMatches != 0).OrderByDescending(c => c.WrongDimensionMatches).FirstOrDefault() ??
                                     counts.OrderByDescending(c => c.TotalNumbers).FirstOrDefault();

                    if (bestChoice == null)
                    {
                        continue;
                    }

                    var bestSideSkipEvent = bestChoice.SemanticEvent as ISemanticEvent;
                    var sideSkipCodedValue = SideSkipCountingCorrectness(array, bestSideSkipEvent);
                    if (!string.IsNullOrWhiteSpace(sideSkipCodedValue))
                    {
                        usedRepresentation.AdditionalInformation.Add(sideSkipCodedValue);
                    }
                }

                var mostRecentBottomSkipEvent = semanticEvents.LastOrDefault(e => e.ReferencePageObjectID == arrayID &&
                                                                                  e.SemanticEventIndex <= patternPoint.EndSemanticEventIndex &&
                                                                                  (e.EventType == Codings.EVENT_ARRAY_SKIP || e.EventType == Codings.EVENT_ARRAY_SKIP_ERASE) &&
                                                                                  e.EventInformation.Contains("bottom"));

                var bottomSkipCodedValue = BottomSkipCountingCorrectness(array, mostRecentBottomSkipEvent);
                if (!string.IsNullOrWhiteSpace(bottomSkipCodedValue))
                {
                    usedRepresentation.AdditionalInformation.Add(bottomSkipCodedValue);
                }

                #endregion // Basic Representation Info

                #region Representation Correctness

                // TODO: One-to-one comparison of each array at pattern points. Could take pattern point created by cut and consider those cut arrays as one?

                var representationRelation = RepresentationCorrectnessTag.GenerateArrayRelation(array, patternPoint.EndHistoryActionIndex);
                SetCorrectnessAndSide(usedRepresentation, representationRelation, leftRelation, rightRelation, alternativeRelation);

                #endregion // Representation Correctness

                tag.RepresentationsUsed.Add(usedRepresentation);
            }
        }

        private static string SideSkipCountingCorrectness(CLPArray array, ISemanticEvent skipCountingEvent)
        {
            if (array == null)
            {
                return null;
            }

            var formattedSkips = GetFormattedSkips(skipCountingEvent);
            if (formattedSkips == null)
            {
                return null;
            }

            var unformattedSkips = formattedSkips.TrimAll().Split("\"\"", StringSplitOptions.None).Select(s => s.Replace("\"", string.Empty)).ToList();
            var isSkipCounting = ArraySemanticEvents.IsSkipCounting(unformattedSkips);
            if (!isSkipCounting)
            {
                return null;
            }

            var columns = (int)array.GetColumnsAndRowsAtHistoryIndex(skipCountingEvent.LastHistoryAction.HistoryActionIndex).X;
            var rows = (int)array.GetColumnsAndRowsAtHistoryIndex(skipCountingEvent.LastHistoryAction.HistoryActionIndex).Y;
            
            var heuristicsResults = ArraySemanticEvents.Heuristics(unformattedSkips, rows, columns);

            var skipCodedValue = $"skip [{formattedSkips}]\n{heuristicsResults}";
            return skipCodedValue;
        }

        private static string BottomSkipCountingCorrectness(CLPArray array, ISemanticEvent skipCountingEvent)
        {
            if (array == null)
            {
                return null;
            }

            var formattedSkips = GetFormattedSkips(skipCountingEvent);
            if (formattedSkips == null)
            {
                return null;
            }

            var historyIndex = skipCountingEvent.LastHistoryAction.HistoryActionIndex;
            var isWrongDimension = !ArraySemanticEvents.IsBottomSkipCountingByCorrectDimension(array, formattedSkips, historyIndex) &&
                                   ArraySemanticEvents.IsBottomSkipCountingByWrongDimension(array, formattedSkips, historyIndex);
            var correctnessText = isWrongDimension ? "wrong dimension" : "correct";

            var skipCodedValue = $"bottom skip [{formattedSkips}], {correctnessText}";
            return skipCodedValue;
        }

        private static string GetFormattedSkips(ISemanticEvent skipCountingEvent)
        {
            var eventInfoParts = skipCountingEvent?.EventInformation.Split(", ");
            if (eventInfoParts?.Length != 2)
            {
                return null;
            }

            var formattedInterpretationParts = eventInfoParts[0].Split("; ");
            if (formattedInterpretationParts.Length != 2)
            {
                return null;
            }

            var formattedSkips = formattedInterpretationParts[1];
            return string.IsNullOrWhiteSpace(formattedSkips) ? null : formattedSkips;
        }

        private static List<int> GetNumericSkipsFromFormattedSkips(string formattedSkips)
        {
            var skipStrings = formattedSkips.Split(' ').ToList().Select(s => s.Replace("\"", string.Empty)).ToList();

            var skips = new List<int>();
            foreach (var skip in skipStrings)
            {
                if (string.IsNullOrEmpty(skip))
                {
                    skips.Add(-1);
                    continue;
                }

                var isNumber = int.TryParse(skip, out var number);
                if (isNumber)
                {
                    skips.Add(Math.Abs(number));
                    continue;
                }

                skips.Add(-1);
            }

            return skips;
        }

        private class NumberLineJumpTotal
        {
            public NumberLineJumpTotal(string numberLineID, int startHistoryActionIndex)
            {
                NumberLineID = numberLineID;
                StartHistoryActionIndex = startHistoryActionIndex;
                IsPatternFinished = false;
                CurrentJumps = new List<NumberLineJumpSize>();
                TotalJumpsAfterLastJumpsAdded = new List<NumberLineJumpSize>();
                JumpEraseCount = 0;
                JumpEraseSinceLastAddCount = 0;
                LastJumpEraseHistoryActionIndex = -1;
                LastJumpEraseSemanticEventIndex = -1;
                IsUsingTotalJumpsAfterLastJumpsAdded = false;
            }

            public string NumberLineID { get; set; }
            public int StartHistoryActionIndex { get; set; }
            public int LastJumpEraseHistoryActionIndex { get; set; }
            public int LastJumpEraseSemanticEventIndex { get; set; }
            public bool IsUsingTotalJumpsAfterLastJumpsAdded { get; set; }
            public bool IsPatternFinished { get; set; }
            public List<NumberLineJumpSize> CurrentJumps { get; set; }
            public List<NumberLineJumpSize> TotalJumpsAfterLastJumpsAdded { get; set; }
            public int JumpEraseCount { get; set; }
            public int JumpEraseSinceLastAddCount { get; set; }
        }

        public static void GenerateNumberLinesUsedInformation(CLPPage page,
                                                              RepresentationsUsedTag tag,
                                                              List<ISemanticEvent> semanticEvents,
                                                              SimplifiedRelation leftRelation,
                                                              SimplifiedRelation rightRelation,
                                                              SimplifiedRelation alternativeRelation)
        {
            var patternPoints = new List<PatternPoint>();
            var numberLineJumpTotals = new List<NumberLineJumpTotal>();

            #region Find Pattern Points

            foreach (var semanticEvent in semanticEvents.Where(e => e.CodedObject == Codings.OBJECT_NUMBER_LINE))
            {
                var numberLineID = semanticEvent.ReferencePageObjectID;

                if (semanticEvent.EventType == Codings.EVENT_OBJECT_ADD)
                {
                    var historyAction = semanticEvent.FirstHistoryAction;
                    var objectsChanged = historyAction as ObjectsOnPageChangedHistoryAction;
                    if (objectsChanged == null)
                    {
                        continue;
                    }

                    var patternPoint = new PatternPoint
                                       {
                                           PageObjectID = numberLineID,
                                           StartHistoryActionIndex = objectsChanged.HistoryActionIndex,
                                           StartSemanticEventIndex = semanticEvent.SemanticEventIndex,
                                           StartEventType = semanticEvent.EventType
                                       };
                    patternPoints.Add(patternPoint);

                    var numberLineJumpTotal = new NumberLineJumpTotal(patternPoint.PageObjectID, patternPoint.StartHistoryActionIndex);
                    numberLineJumpTotals.Add(numberLineJumpTotal);
                }
                else if (semanticEvent.EventType == Codings.EVENT_NUMBER_LINE_JUMP)
                {
                    var jumpSizesChangedHistoryActions = semanticEvent.HistoryActions.OfType<NumberLineJumpSizesChangedHistoryAction>().ToList();
                    if (!jumpSizesChangedHistoryActions.Any())
                    {
                        continue;
                    }

                    var allJumps = new List<NumberLineJumpSize>();
                    foreach (var historyAction in jumpSizesChangedHistoryActions)
                    {
                        allJumps.AddRange(historyAction.JumpsAdded);
                    }

                    var numberLineJumpTotal = numberLineJumpTotals.First(jt => jt.NumberLineID == numberLineID && !jt.IsPatternFinished);

                    if (!numberLineJumpTotal.CurrentJumps.Any() &&
                        numberLineJumpTotal.JumpEraseSinceLastAddCount > 1)
                    {
                        var patternPoint = patternPoints.First(p => p.PageObjectID == numberLineID && p.StartHistoryActionIndex == numberLineJumpTotal.StartHistoryActionIndex);
                        patternPoint.EndHistoryActionIndex = numberLineJumpTotal.LastJumpEraseHistoryActionIndex;
                        patternPoint.EndSemanticEventIndex = numberLineJumpTotal.LastJumpEraseSemanticEventIndex;
                        patternPoint.EndEventType = Codings.EVENT_NUMBER_LINE_JUMP_ERASE;

                        numberLineJumpTotal.IsPatternFinished = true;

                        var newPatternPoint = new PatternPoint
                                              {
                                                  PageObjectID = numberLineID,
                                                  StartHistoryActionIndex = jumpSizesChangedHistoryActions.First().HistoryActionIndex,
                                                  StartSemanticEventIndex = semanticEvent.SemanticEventIndex,
                                                  StartEventType = semanticEvent.EventType
                                              };
                        patternPoints.Add(newPatternPoint);

                        numberLineJumpTotal = new NumberLineJumpTotal(newPatternPoint.PageObjectID, newPatternPoint.StartHistoryActionIndex);
                        numberLineJumpTotals.Add(numberLineJumpTotal);
                    }

                    numberLineJumpTotal.CurrentJumps.AddRange(allJumps);
                    numberLineJumpTotal.TotalJumpsAfterLastJumpsAdded = numberLineJumpTotal.CurrentJumps.ToList();
                    numberLineJumpTotal.JumpEraseSinceLastAddCount = 0;
                }
                else if (semanticEvent.EventType == Codings.EVENT_NUMBER_LINE_JUMP_ERASE)
                {
                    var jumpSizesChangedHistoryActions = semanticEvent.HistoryActions.OfType<NumberLineJumpSizesChangedHistoryAction>().ToList();
                    if (!jumpSizesChangedHistoryActions.Any())
                    {
                        continue;
                    }

                    var allJumps = new List<NumberLineJumpSize>();
                    foreach (var historyAction in jumpSizesChangedHistoryActions)
                    {
                        allJumps.AddRange(historyAction.JumpsRemoved);
                    }

                    var numberLineJumpTotal = numberLineJumpTotals.First(jt => jt.NumberLineID == numberLineID && !jt.IsPatternFinished);
                    var jumpsToRemove = (from jump in allJumps
                                         from currentJump in numberLineJumpTotal.CurrentJumps
                                         where jump.JumpSize == currentJump.JumpSize && jump.StartingTickIndex == currentJump.StartingTickIndex
                                         select currentJump).ToList();

                    numberLineJumpTotal.JumpEraseCount += jumpsToRemove.Count;
                    numberLineJumpTotal.JumpEraseSinceLastAddCount += jumpsToRemove.Count;
                    foreach (var jump in jumpsToRemove)
                    {
                        numberLineJumpTotal.CurrentJumps.Remove(jump);
                    }

                    if (!numberLineJumpTotal.CurrentJumps.Any() &&
                        numberLineJumpTotal.JumpEraseSinceLastAddCount > 1)
                    {
                        numberLineJumpTotal.IsUsingTotalJumpsAfterLastJumpsAdded = true;
                        numberLineJumpTotal.LastJumpEraseHistoryActionIndex = jumpSizesChangedHistoryActions.Last().HistoryActionIndex;
                        numberLineJumpTotal.LastJumpEraseSemanticEventIndex = semanticEvent.SemanticEventIndex;
                    }
                }
                else if (semanticEvent.EventType == Codings.EVENT_OBJECT_DELETE)
                {
                    var historyAction = semanticEvent.FirstHistoryAction;
                    var objectsChanged = historyAction as ObjectsOnPageChangedHistoryAction;
                    if (objectsChanged == null)
                    {
                        continue;
                    }

                    var numberLineJumpTotal = numberLineJumpTotals.First(jt => jt.NumberLineID == numberLineID && !jt.IsPatternFinished);
                    numberLineJumpTotal.IsPatternFinished = true;

                    var patternPoint = patternPoints.First(p => p.PageObjectID == numberLineID && p.StartHistoryActionIndex == numberLineJumpTotal.StartHistoryActionIndex);
                    patternPoint.EndHistoryActionIndex = objectsChanged.HistoryActionIndex;
                    patternPoint.EndSemanticEventIndex = semanticEvent.SemanticEventIndex;
                    patternPoint.EndEventType = semanticEvent.EventType;
                }
            }

            #endregion // Find Pattern Points

            foreach (var patternPoint in patternPoints)
            {
                var numberLineID = patternPoint.PageObjectID;
                var numberLine = page.GetPageObjectByIDOnPageOrInHistory(numberLineID) as NumberLine;
                if (numberLine == null)
                {
                    continue;
                }

                var numberLineJumpTotal = numberLineJumpTotals.First(jt => jt.NumberLineID == numberLineID && jt.StartHistoryActionIndex == patternPoint.StartHistoryActionIndex);
                var jumps = numberLineJumpTotal.IsUsingTotalJumpsAfterLastJumpsAdded ? numberLineJumpTotal.TotalJumpsAfterLastJumpsAdded : numberLineJumpTotal.CurrentJumps;

                var usedRepresentation = new UsedRepresentation();
                usedRepresentation.PageObjectIDs.Add(numberLineID);

                #region Basic Representation Info

                usedRepresentation.IsFinalRepresentation = false;
                if (patternPoint.EndHistoryActionIndex == -1)
                {
                    patternPoint.EndHistoryActionIndex = semanticEvents.Last().LastHistoryAction.HistoryActionIndex;
                    patternPoint.EndSemanticEventIndex = semanticEvents.Last().SemanticEventIndex;
                    usedRepresentation.IsFinalRepresentation = true;
                }

                usedRepresentation.CodedObject = Codings.OBJECT_NUMBER_LINE;
                usedRepresentation.CodedID = numberLine.GetCodedIDAtHistoryIndex(patternPoint.EndHistoryActionIndex);
                usedRepresentation.IsInteractedWith = semanticEvents
                    .Where(e => e.ReferencePageObjectID == numberLineID)
                    .Any(e => e.EventType == Codings.EVENT_NUMBER_LINE_JUMP || e.EventType == Codings.EVENT_NUMBER_LINE_CHANGE);
                usedRepresentation.IsUsed = numberLineJumpTotal.TotalJumpsAfterLastJumpsAdded.Any();
                if (usedRepresentation.IsUsed)
                {
                    usedRepresentation.RepresentationInformation = NumberLine.ConsolidateJumps(jumps.ToList());
                }

                if (!string.IsNullOrEmpty(usedRepresentation.RepresentationInformation))
                {
                    var jumpsInEnglish = new List<string>();
                    foreach (var codedJump in usedRepresentation.RepresentationInformation.Split("; ", StringSplitOptions.RemoveEmptyEntries))
                    {
                        try
                        {
                            var jumpSegments = codedJump.Split(", ", StringSplitOptions.RemoveEmptyEntries);
                            var jumpSize = int.Parse(jumpSegments[0]);
                            var jumpRange = jumpSegments[1].Split('-');
                            var start = int.Parse(jumpRange[0]);
                            var stop = int.Parse(jumpRange[1]);
                            var numberOfJumps = (stop - start) / jumpSize;
                            var jumpString = numberOfJumps == 1 ? "jump" : "jumps";
                            var jumpInEnglish = $"{numberOfJumps} {jumpString} of {jumpSize}";
                            jumpsInEnglish.Add(jumpInEnglish);
                        }
                        catch (Exception)
                        {
                            // ignored
                        }
                    }

                    usedRepresentation.AdditionalInformation.AddRange(jumpsInEnglish);
                }

                var arcs = new List<dynamic>();
                foreach (var jump in jumps)
                {
                    arcs.Add(new
                             {
                                 Start = jump.StartingTickIndex,
                                 End = jump.JumpSize + jump.StartingTickIndex
                             });
                }
                var sortedArcs = arcs.Distinct().OrderBy(x => x.Start).ToList();
                var gaps = 0;
                var overlaps = 0;
                for (var i = 0; i < sortedArcs.Count - 1; i++)
                {
                    if (sortedArcs[i].End < sortedArcs[i + 1].Start)
                    {
                        gaps++;
                    }
                    else if (sortedArcs[i].End > sortedArcs[i + 1].Start)
                    {
                        overlaps++;
                    }
                }

                var hasGaps = gaps > 0;
                var hasOverlaps = overlaps > 0;
                var hasGapsAndOverlaps = hasGaps && hasOverlaps;

                if (hasGaps)
                {
                    usedRepresentation.AdditionalInformation.Add($"Has {gaps} Gap(s).");
                }

                if (hasOverlaps)
                {
                    usedRepresentation.AdditionalInformation.Add($"Has {overlaps} Overlap(s).");
                }

                if (numberLineJumpTotal.JumpEraseCount > 1)
                {
                    usedRepresentation.AnalysisCodes.Add(Codings.NUMBER_LINE_NLJE);
                }

                #endregion // Basic Representation Info

                #region Representation Correctness

                var jumpSizes = jumps;
                var representationRelation = RepresentationCorrectnessTag.GenerateNumberLineRelation(jumpSizes);
                SetCorrectnessAndSide(usedRepresentation, representationRelation, leftRelation, rightRelation, alternativeRelation, hasGapsAndOverlaps);

                if (!usedRepresentation.IsUsed)
                {
                    var codedID = usedRepresentation.CodedID;

                    if (leftRelation?.PageDefinition is DivisionRelationDefinitionTag)
                    {
                        var product = leftRelation.Product;
                        double numberLineEndPoint;
                        if (double.TryParse(codedID, out numberLineEndPoint) &&
                            Math.Abs(product - numberLineEndPoint) < 0.0001)
                        {
                            usedRepresentation.AnalysisCodes.Add(Codings.NUMBER_LINE_BLANK_PARTIAL_MATCH);
                            usedRepresentation.IsUsed = true;
                        }
                    }

                    if (rightRelation?.PageDefinition is DivisionRelationDefinitionTag)
                    {
                        var product = rightRelation.Product;
                        double numberLineEndPoint;
                        if (double.TryParse(codedID, out numberLineEndPoint) &&
                            Math.Abs(product - numberLineEndPoint) < 0.0001)
                        {
                            usedRepresentation.AnalysisCodes.Add(Codings.NUMBER_LINE_BLANK_PARTIAL_MATCH);
                            usedRepresentation.IsUsed = true;
                        }
                    }

                    if (alternativeRelation?.PageDefinition is DivisionRelationDefinitionTag)
                    {
                        var product = alternativeRelation.Product;
                        double numberLineEndPoint;
                        if (double.TryParse(codedID, out numberLineEndPoint) &&
                            Math.Abs(product - numberLineEndPoint) < 0.0001)
                        {
                            usedRepresentation.AnalysisCodes.Add(Codings.NUMBER_LINE_BLANK_PARTIAL_MATCH);
                            usedRepresentation.IsUsed = true;
                        }
                    }
                }

                #endregion // Representation Correctness

                tag.RepresentationsUsed.Add(usedRepresentation);
            }
        }

        public static void GenerateStampsUsedInformation(CLPPage page,
                                                         RepresentationsUsedTag tag,
                                                         List<ISemanticEvent> semanticEvents,
                                                         SimplifiedRelation leftRelation,
                                                         SimplifiedRelation rightRelation,
                                                         SimplifiedRelation alternativeRelation)
        {
            var stampObjectIDsOnPage = new List<string>();
            var stampObjectIDsOnPageSinceLastClear = new List<string>();
            var stampObjectIDsRemovedSinceLastAdd = new List<string>();
            var stampObjectIDsRemovedButPartOfCurrentRepresentation = new List<string>();

            var endPoints = new Dictionary<int, List<string>>();
            var endPointCompanions = new Dictionary<int, List<string>>();
            var endPointCount = 0;

            #region Find Pattern Points

            foreach (var semanticEvent in semanticEvents.Where(e => e.CodedObject == Codings.OBJECT_STAMPED_OBJECT))
            {
                var stampedObjectID = semanticEvent.ReferencePageObjectID;

                if (semanticEvent.EventType == Codings.EVENT_OBJECT_ADD)
                {
                    stampObjectIDsOnPage.Add(stampedObjectID);
                    stampObjectIDsOnPageSinceLastClear.Add(stampedObjectID);
                    foreach (var removedStampObjectID in stampObjectIDsRemovedSinceLastAdd)
                    {
                        stampObjectIDsOnPageSinceLastClear.Remove(removedStampObjectID);
                    }
                    stampObjectIDsRemovedButPartOfCurrentRepresentation.AddRange(stampObjectIDsRemovedSinceLastAdd);
                    stampObjectIDsRemovedSinceLastAdd.Clear();
                }
                else if (semanticEvent.EventType == Codings.EVENT_OBJECT_DELETE)
                {
                    stampObjectIDsOnPage.Remove(stampedObjectID);
                    stampObjectIDsRemovedSinceLastAdd.Add(stampedObjectID);

                    if (stampObjectIDsOnPage.Any())
                    {
                        continue;
                    }

                    endPointCount++;
                    endPoints.Add(endPointCount, stampObjectIDsOnPageSinceLastClear.ToList());
                    endPointCompanions.Add(endPointCount, stampObjectIDsRemovedButPartOfCurrentRepresentation.ToList());
                    stampObjectIDsRemovedButPartOfCurrentRepresentation.Clear();
                    stampObjectIDsOnPageSinceLastClear.Clear();
                    stampObjectIDsRemovedSinceLastAdd.Clear();
                }
            }

            var stampedObjectsRemovedSinceLastAdd = stampObjectIDsRemovedSinceLastAdd
                .Select(page.GetPageObjectByIDOnPageOrInHistory)
                .Where(so => so != null)
                .Cast<StampedObject>()
                .ToList();
            var parentStampIDsOfStampedObjectsRemovedSinceLastAdd = stampedObjectsRemovedSinceLastAdd.Select(so => so.ParentStampID).ToList();

            var stampedObjectsRemovedButPartOfCurrentRepresentation = stampObjectIDsRemovedButPartOfCurrentRepresentation
                .Select(page.GetPageObjectByIDOnPageOrInHistory)
                .Where(so => so != null)
                .Cast<StampedObject>()
                .ToList();
            var stampObjectsRemovedButCompanionToEndPoint = stampedObjectsRemovedButPartOfCurrentRepresentation
                .Where(so => parentStampIDsOfStampedObjectsRemovedSinceLastAdd.Contains(so.ParentStampID))
                .ToList();

            foreach (var stampObject in stampObjectsRemovedButCompanionToEndPoint)
            {
                stampedObjectsRemovedButPartOfCurrentRepresentation.Remove(stampObject);
            }
            var stampObjectsRemovedButCompanionToStampObjectsOnpage = stampedObjectsRemovedButPartOfCurrentRepresentation.ToList();

            if (stampObjectIDsRemovedSinceLastAdd.Any())
            {
                endPointCount++;
                endPoints.Add(endPointCount, stampObjectIDsRemovedSinceLastAdd.ToList());
                endPointCompanions.Add(endPointCount, stampObjectsRemovedButCompanionToEndPoint.Select(so => so.ID).ToList());
            }

            if (stampObjectIDsOnPage.Any())
            {
                endPoints.Add(-1, stampObjectIDsOnPage);
                endPointCompanions.Add(-1, stampObjectsRemovedButCompanionToStampObjectsOnpage.Select(so => so.ID).ToList());
            }

            #endregion // Find Pattern Points

            foreach (var endPoint in endPoints)
            {
                var isFinalRepresentation = endPoint.Key == -1;

                var stampedObjectIDs = endPoint.Value;
                var stampedObjects = stampedObjectIDs.Select(page.GetPageObjectByIDOnPageOrInHistory).Where(so => so != null).Cast<StampedObject>().ToList();
                var groupedStampedObjects = stampedObjects.GroupBy(so => so.ParentStampID);

                var companionStampedObjectIDs = endPointCompanions[endPoint.Key];
                var companionStampedObjects = companionStampedObjectIDs.Select(page.GetPageObjectByIDOnPageOrInHistory).Where(so => so != null).Cast<StampedObject>().ToList();

                if (groupedStampedObjects.Count() == 1)
                {
                    var stampObjectsGroup = groupedStampedObjects.First().ToList();
                    var usedRepresentation = GenerateUsedStampRepresentation(stampObjectsGroup,
                                                                             companionStampedObjectIDs,
                                                                             isFinalRepresentation,
                                                                             leftRelation,
                                                                             rightRelation,
                                                                             alternativeRelation);
                    tag.RepresentationsUsed.Add(usedRepresentation);
                    continue;
                }

                if (groupedStampedObjects.Count() == 2)
                {
                    var firstStampObjectsGroup = groupedStampedObjects.First().ToList();
                    var firstParentStampID = groupedStampedObjects.First().Key;
                    var firstCompanionStampedObjectsGroupIDs = companionStampedObjects.Where(so => so.ParentStampID == firstParentStampID).Select(so => so.ID).ToList();
                    var firstUsedRepresentation = GenerateUsedStampRepresentation(firstStampObjectsGroup,
                                                                                  firstCompanionStampedObjectsGroupIDs,
                                                                                  isFinalRepresentation,
                                                                                  leftRelation,
                                                                                  rightRelation,
                                                                                  alternativeRelation);

                    var secondStampObjectsGroup = groupedStampedObjects.Last().ToList();
                    var secondParentStampID = groupedStampedObjects.Last().Key;
                    var secondCompanionStampedObjectsGroupIDs = companionStampedObjects.Where(so => so.ParentStampID == secondParentStampID).Select(so => so.ID).ToList();
                    var secondUsedRepresentation = GenerateUsedStampRepresentation(secondStampObjectsGroup,
                                                                                   secondCompanionStampedObjectsGroupIDs,
                                                                                   isFinalRepresentation,
                                                                                   leftRelation,
                                                                                   rightRelation,
                                                                                   alternativeRelation);

                    if (firstUsedRepresentation.MatchedRelationSide != Codings.MATCHED_RELATION_NONE ||
                        secondUsedRepresentation.MatchedRelationSide != Codings.MATCHED_RELATION_NONE)
                    {
                        tag.RepresentationsUsed.Add(firstUsedRepresentation);
                        tag.RepresentationsUsed.Add(secondUsedRepresentation);
                        continue;
                    }
                }

                var allStampedObjects = groupedStampedObjects.SelectMany(g => g).ToList();
                var combinedUsedRepresentation = GenerateUsedStampRepresentation(allStampedObjects,
                                                                                 companionStampedObjectIDs,
                                                                                 isFinalRepresentation,
                                                                                 leftRelation,
                                                                                 rightRelation,
                                                                                 alternativeRelation);
                tag.RepresentationsUsed.Add(combinedUsedRepresentation);
            }

            tag.RepresentationsUsed = tag.RepresentationsUsed.Where(r => r != null).ToList();
        }

        private static UsedRepresentation GenerateUsedStampRepresentation(List<StampedObject> stampedObjects,
                                                                          List<string> companionStampedObjectIDs,
                                                                          bool isFinalRepresentation,
                                                                          SimplifiedRelation leftRelation,
                                                                          SimplifiedRelation rightRelation,
                                                                          SimplifiedRelation alternativeRelation)
        {
            if (!stampedObjects.Any())
            {
                return null;
            }

            var parts = stampedObjects.First().Parts;
            var numberOfStampedObjects = stampedObjects.Count;

            var usedRepresentation = new UsedRepresentation();

            #region Basic Representation Info

            usedRepresentation.IsFinalRepresentation = isFinalRepresentation;

            usedRepresentation.CodedObject = Codings.OBJECT_STAMP;
            usedRepresentation.CodedID = parts.ToString();
            usedRepresentation.IsInteractedWith = true;
            usedRepresentation.IsUsed = true;
            usedRepresentation.RepresentationInformation = $"{numberOfStampedObjects} image(s)";

            var groupString = numberOfStampedObjects == 1 ? "group" : "groups";
            var englishValue = $"{numberOfStampedObjects} {groupString} of {parts}";
            usedRepresentation.AdditionalInformation.Add(englishValue);

            var parentStampIDs = stampedObjects.Select(so => so.ParentStampID).Distinct().ToList();

            var numberOfParentStamps = parentStampIDs.Count();
            var parentStampInfo = $"From {numberOfParentStamps} Stamp(s)";
            usedRepresentation.AdditionalInformation.Add(parentStampInfo);

            #endregion // Basic Representation Info

            #region Representation Correctness

            var representationRelation = RepresentationCorrectnessTag.GenerateStampedObjectsRelation(parts, numberOfStampedObjects);
            SetCorrectnessAndSide(usedRepresentation, representationRelation, leftRelation, rightRelation, alternativeRelation);

            #endregion // Representation Correctness

            return usedRepresentation;
        }

        public static bool IsMR2STEP(RepresentationsUsedTag tag)
        {
            var leftSideRepresentations = tag.RepresentationsUsed.Where(r => r.MatchedRelationSide == Codings.MATCHED_RELATION_LEFT).Select(r => r.CodedObject).Distinct().ToList();
            var rightSideRepresentations = tag.RepresentationsUsed.Where(r => r.MatchedRelationSide == Codings.MATCHED_RELATION_RIGHT)
                                              .Select(r => r.CodedObject)
                                              .Distinct()
                                              .ToList();
            var alternativeSideRepresentations = tag.RepresentationsUsed.Where(r => r.MatchedRelationSide == Codings.MATCHED_RELATION_ALTERNATIVE)
                                                    .Select(r => r.CodedObject)
                                                    .Distinct()
                                                    .ToList();

            var unmatchedRepresentations =
                tag.RepresentationsUsed.Where(r => r.MatchedRelationSide == Codings.MATCHED_RELATION_NONE).Select(r => r.CodedObject).Distinct().ToList();

            foreach (var leftSideRepresentation in leftSideRepresentations)
            {
                if (rightSideRepresentations.Any() &&
                    !rightSideRepresentations.Contains(leftSideRepresentation))
                {
                    return true;
                }

                if (alternativeSideRepresentations.Any() &&
                    !alternativeSideRepresentations.Contains(leftSideRepresentation))
                {
                    return true;
                }

                if (unmatchedRepresentations.Any() &&
                    !unmatchedRepresentations.Contains(leftSideRepresentation))
                {
                    return true;
                }
            }

            foreach (var rightSideRepresentation in rightSideRepresentations)
            {
                if (alternativeSideRepresentations.Any() &&
                    !alternativeSideRepresentations.Contains(rightSideRepresentation))
                {
                    return true;
                }

                if (unmatchedRepresentations.Any() &&
                    !unmatchedRepresentations.Contains(rightSideRepresentation))
                {
                    return true;
                }
            }

            foreach (var alternativeSideRepresentation in alternativeSideRepresentations)
            {
                if (unmatchedRepresentations.Any() &&
                    !unmatchedRepresentations.Contains(alternativeSideRepresentation))
                {
                    return true;
                }
            }

            return false;
        }

        public static void SetCorrectnessAndSide(UsedRepresentation usedRepresentation,
                                                 SimplifiedRelation representationRelation,
                                                 SimplifiedRelation leftRelation,
                                                 SimplifiedRelation rightRelation,
                                                 SimplifiedRelation alternativeRelation,
                                                 bool isOverlapsAndGaps = false)
        {
            var matchedRelationSide = Codings.MATCHED_RELATION_NONE;
            var representationCorrectness = Correctness.Unknown;
            if (usedRepresentation.IsUsed)
            {
                if (representationRelation != null)
                {
                    representationRelation.IsSwapped = false;
                }
                if (leftRelation != null)
                {
                    leftRelation.IsSwapped = false;
                }
                if (rightRelation != null)
                {
                    rightRelation.IsSwapped = false;
                }
                if (alternativeRelation != null)
                {
                    alternativeRelation.IsSwapped = false;
                }

                var leftCorrectness = RepresentationCorrectnessTag.CompareSimplifiedRelations(representationRelation, leftRelation);
                var rightCorrectness = RepresentationCorrectnessTag.CompareSimplifiedRelations(representationRelation, rightRelation);
                var alternativeCorrectness = RepresentationCorrectnessTag.CompareSimplifiedRelations(representationRelation, alternativeRelation);

                if (leftCorrectness == Correctness.Correct)
                {
                    matchedRelationSide = Codings.MATCHED_RELATION_LEFT;
                    representationCorrectness = Correctness.Correct;
                }
                else if (rightCorrectness == Correctness.Correct)
                {
                    matchedRelationSide = Codings.MATCHED_RELATION_RIGHT;
                    representationCorrectness = Correctness.Correct;
                }
                else if (alternativeCorrectness == Correctness.Correct)
                {
                    matchedRelationSide = Codings.MATCHED_RELATION_ALTERNATIVE;
                    representationCorrectness = Correctness.Correct;
                }
                else if (leftCorrectness == Correctness.PartiallyCorrect &&
                         leftRelation != null &&
                         leftRelation.IsSwapped)
                {
                    matchedRelationSide = Codings.MATCHED_RELATION_LEFT;
                    representationCorrectness = Correctness.PartiallyCorrect;
                    representationRelation.IsSwapped = true;
                }
                else if (rightCorrectness == Correctness.PartiallyCorrect &&
                         rightRelation != null &&
                         rightRelation.IsSwapped)
                {
                    matchedRelationSide = Codings.MATCHED_RELATION_RIGHT;
                    representationCorrectness = Correctness.PartiallyCorrect;
                    representationRelation.IsSwapped = true;
                }
                else if (alternativeCorrectness == Correctness.PartiallyCorrect &&
                         alternativeRelation != null &&
                         alternativeRelation.IsSwapped)
                {
                    matchedRelationSide = Codings.MATCHED_RELATION_ALTERNATIVE;
                    representationCorrectness = Correctness.PartiallyCorrect;
                    representationRelation.IsSwapped = true;
                }
                else if (leftCorrectness == Correctness.PartiallyCorrect &&
                         rightCorrectness == Correctness.Incorrect &&
                         (alternativeCorrectness == Correctness.Incorrect || alternativeCorrectness == Correctness.Unknown))
                {
                    matchedRelationSide = Codings.MATCHED_RELATION_LEFT;
                    representationCorrectness = Correctness.PartiallyCorrect;
                }
                else if (rightCorrectness == Correctness.PartiallyCorrect &&
                         leftCorrectness == Correctness.Incorrect &&
                         (alternativeCorrectness == Correctness.Incorrect || alternativeCorrectness == Correctness.Unknown))
                {
                    matchedRelationSide = Codings.MATCHED_RELATION_RIGHT;
                    representationCorrectness = Correctness.PartiallyCorrect;
                }
                else if (alternativeCorrectness == Correctness.PartiallyCorrect &&
                         leftCorrectness == Correctness.Incorrect &&
                         rightCorrectness == Correctness.Incorrect)
                {
                    matchedRelationSide = Codings.MATCHED_RELATION_ALTERNATIVE;
                    representationCorrectness = Correctness.PartiallyCorrect;
                }
                else if (leftCorrectness == Correctness.PartiallyCorrect &&
                         rightRelation == null &&
                         alternativeRelation == null)
                {
                    matchedRelationSide = Codings.MATCHED_RELATION_LEFT;
                    representationCorrectness = Correctness.PartiallyCorrect;
                }
                else if (rightCorrectness == Correctness.PartiallyCorrect &&
                         leftRelation == null &&
                         alternativeRelation == null)
                {
                    matchedRelationSide = Codings.MATCHED_RELATION_RIGHT;
                    representationCorrectness = Correctness.PartiallyCorrect;
                }
                else if (alternativeCorrectness == Correctness.PartiallyCorrect &&
                         leftRelation == null &&
                         rightRelation == null)
                {
                    matchedRelationSide = Codings.MATCHED_RELATION_ALTERNATIVE;
                    representationCorrectness = Correctness.PartiallyCorrect;
                }
                else if (alternativeCorrectness == Correctness.PartiallyCorrect ||
                         leftCorrectness == Correctness.PartiallyCorrect ||
                         rightCorrectness == Correctness.PartiallyCorrect)
                {
                    representationCorrectness = Correctness.PartiallyCorrect;
                }
                else if (leftCorrectness == Correctness.Incorrect ||
                         rightCorrectness == Correctness.Incorrect ||
                         alternativeCorrectness == Correctness.Incorrect)
                {
                    representationCorrectness = Correctness.Incorrect;
                }
            }

            // HACK: BUG: This is at the request of Lily for the stats. All other things considered, this is a situation where a student just had a little
            // trouble getting the jumps exactly correct on a Number Line, but they still got the jump size and number of jumps correct and ended at the right
            // spot. It should be COR, but Lily wanted it set to PAR.
            if (isOverlapsAndGaps && representationCorrectness == Correctness.Correct)
            {
                representationCorrectness = Correctness.PartiallyCorrect;
                usedRepresentation.CorrectnessReason = Codings.PARTIAL_REASON_GAPS_AND_OVERLAPS;
            }

            usedRepresentation.Correctness = representationCorrectness;
            usedRepresentation.MatchedRelationSide = matchedRelationSide;
            if (representationRelation != null &&
                representationRelation.IsSwapped &&
                usedRepresentation.CorrectnessReason != Codings.PARTIAL_REASON_GAPS_AND_OVERLAPS)
            {
                usedRepresentation.CorrectnessReason = Codings.PARTIAL_REASON_SWAPPED;
            }
        }

        public static bool IsMR(RepresentationsUsedTag tag)
        {
            var leftSideRepresentations = tag.RepresentationsUsed.Where(r => r.MatchedRelationSide == Codings.MATCHED_RELATION_LEFT).Select(r => r.CodedObject).Distinct().ToList();
            var rightSideRepresentations = tag.RepresentationsUsed.Where(r => r.MatchedRelationSide == Codings.MATCHED_RELATION_RIGHT)
                                              .Select(r => r.CodedObject)
                                              .Distinct()
                                              .ToList();
            var alternativeSideRepresentations = tag.RepresentationsUsed.Where(r => r.MatchedRelationSide == Codings.MATCHED_RELATION_ALTERNATIVE)
                                                    .Select(r => r.CodedObject)
                                                    .Distinct()
                                                    .ToList();
            var unmatchedRepresentations =
                tag.RepresentationsUsed.Where(r => r.MatchedRelationSide == Codings.MATCHED_RELATION_NONE).Select(r => r.CodedObject).Distinct().ToList();

            return leftSideRepresentations.Count > 1 || rightSideRepresentations.Count > 1 || alternativeSideRepresentations.Count > 1 || unmatchedRepresentations.Count > 1;
        }

        #endregion // Static Methods
    }
}