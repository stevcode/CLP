<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Catel.Windows</name>
    </assembly>
    <members>
        <member name="T:Catel.Collections.ObjectModel.ObservableCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:Catel.Collections.ObjectModel.ObservableCollectionExtensions.AddRange``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add an range of items to the specified <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T">Type of items within the observable collection.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
            <param name="range">An range of items.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="range"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Collections.ObjectModel.ObservableCollectionExtensions.ReplaceRange``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Replaces the whole range of the specified <paramref name="collection"/>. This is done by internally
            calling <see cref="M:System.Collections.ObjectModel.Collection`1.Clear"/> and finally <see cref="M:Catel.Collections.ObjectModel.ObservableCollectionExtensions.AddRange``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
            <typeparam name="T">Type of items within the observable collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="range">The range of items to add to the observable collection.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="range"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Environment">
            <summary>
            Class containing environment information.
            </summary>
        </member>
        <member name="F:Catel.Environment.DefaultMultiLingualDependencyPropertyValue">
            <summary>
            The default value for dependency properties that use a Properties.Resources value. Such values should be set in the constructor
            of the control instead of the dependency property to allow runtime switching of languages.
            </summary>
        </member>
        <member name="F:Catel.Environment.DefaultBindingFlags">
            <summary>
            The default binding flags to use for reflection within Catel.
            </summary>
        </member>
        <member name="P:Catel.Environment.IsInDesignMode">
            <summary>
            Gets or sets a value indicating whether the environment is currently in design mode.
            </summary>
            <value>
            	<c>true</c> if the environment is in design mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.MVVM.CommandExtensions">
            <summary>
            Extension methods for the <see cref="T:Catel.MVVM.Command"/> class.
            </summary>
        </member>
        <member name="F:Catel.MVVM.CommandExtensions.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="T:Catel.MVVM.CommandHelper">
            <summary>
            Helper class for the <see cref="T:Catel.MVVM.Command"/> class.
            </summary>
        </member>
        <member name="F:Catel.MVVM.CommandHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandHelper.CreateCommand(System.Action,System.Linq.Expressions.Expression{System.Func{Catel.Data.IValidationSummary}})">
            <summary>
            Creates a new <see cref="T:Catel.MVVM.Command"/> that automatically determines whether it can be executed. It does this
            by checking the right validation summary, which should be in a property..
            </summary>
            <param name="execute">The action to execute when the command is being invoked.</param>
            <param name="validationSummaryPropertyExpression">The validation summary property expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="execute"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validationSummaryPropertyExpression"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandHelper.CreateCommand``1(System.Action{``0},System.Linq.Expressions.Expression{System.Func{Catel.Data.IValidationSummary}})">
            <summary>
            Creates a new <see cref="T:Catel.MVVM.Command`1"/> that automatically determines whether it can be executed. It does this
            by checking the right validation summary, which should be in a property..
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
            <param name="execute">The action to execute when the command is being invoked.</param>
            <param name="validationSummaryPropertyExpression">The validation summary property expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="execute"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validationSummaryPropertyExpression"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.Services.NavigationService">
            <summary>
            Service to navigate inside applications.
            <para/>
            This implementation of the <see cref="T:Catel.MVVM.Services.INavigationService"/> automatically adds all instances of the
            <see cref="T:Catel.Windows.DataWindow`1"/> (WPF), <see cref="T:Catel.Windows.Controls.UserControl`1"/> (SL) and 
            <see cref="!:Catel.Phone.Controls.PhoneApplicationPage&lt;TViewModel&gt;"/> (WP7) class that are found in the current 
            application domain.
            <para/>
            All other pages will have to be registered manually.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.ViewModelServiceBase">
            <summary>
            Base class for all view model services.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Services.ViewModelServiceBase.Name">
            <summary>
            Gets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:Catel.MVVM.Services.ViewModelServiceBase.Dispatcher">
            <summary>
            Gets the current dispatcher.
            </summary>
            <value>The current dispatcher.</value>
        </member>
        <member name="F:Catel.MVVM.Services.NavigationService.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.MVVM.Services.NavigationService"/> class.
            </summary>
            <remarks>
            To improve performance, the assembly is only initialized once.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.NavigationService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.NavigationService"/> class.
            </summary>
            <param name="autoRegisterPages">if set to <c>true</c>, pages are tried to be registered automatically.</param>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.GoBack">
            <summary>
            Navigates back to the previous page.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.GoForward">
            <summary>
            Navigates forward to the next page.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Navigate(System.String)">
            <summary>
            Navigates to a specific location.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Navigate(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates to a specific location.
            </summary>
            <param name="uri">The URI.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Navigate(System.Uri)">
            <summary>
            Navigates to a specific location.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Navigate``1">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <typeparam name="TViewModelType">The view model type.</typeparam>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Navigate``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <typeparam name="TViewModelType">The view model type.</typeparam>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Navigate(System.Type)">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <param name="viewModelType">The view model type.</param>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Navigate(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <param name="viewModelType">The view model type.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model and the page type. This way, Catel knowns what
            page to show when a specific view model page is requested.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="pageType">Type of the page.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Register(System.Type,System.Uri)">
            <summary>
            Registers the specified view model and the uri. Use this method to override the uri
            detection mechanism in Catel.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="uri">The URI to register.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Register(System.String,System.Type)">
            <summary>
            Registers the specified view model and the page type. This way, Catel knowns what
            page to show when a specific view model page is requested.
            </summary>
            <param name="name">Name of the registered page.</param>
            <param name="pageType">Type of the page.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="pageType"/> is not of the right type.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="name"/> is already registered.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Register(System.String,System.Uri)">
            <summary>
            Registers the specified view model and the uri. Use this method to override the uri
            detection mechanism in Catel.
            </summary>
            <param name="name">The name of the registered page.</param>
            <param name="uri">The URI to register.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="name"/> is already registered.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.RegisterAutoType(System.String,System.Type)">
            <summary>
            Registers the specified view model and the page type. This way, Catel knowns what
            page to show when a specific view model page is requested.
            </summary>
            <param name="name">Name of the registered page.</param>
            <param name="pageType">Type of the page.</param>
            <remarks>
            This method is used to statically register all the auto-detected pages.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="pageType"/> is not of the right type.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered page.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.ToQueryString(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Converts a dictionary to query string parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>String containing the paramets as query string. <c>null</c> values will be removed.</returns>
            <remarks>
            This method uses the <see cref="M:System.Object.ToString"/> method to convert values to a parameter value. Make sure
            that the objects passed correctly support this.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.RegisterTypesAutomatically">
            <summary>
            Registers the types automatically.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.GetApplicationRootFrame">
            <summary>
            Gets the application root frame.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.EnsurePageTypeIsCorrect(System.Type)">
            <summary>
            Ensures that the page type is correct for the target framework.
            </summary>
            <param name="pageType">Type of the page.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="pageType"/> is not of the right type.</exception>
        </member>
        <member name="P:Catel.MVVM.Services.NavigationService.CanGoBack">
            <summary>
            Gets a value indicating whether it is possible to navigate back.
            </summary>
            <value>
            	<c>true</c> if it is possible to navigate back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Services.NavigationService.CanGoForward">
            <summary>
            Gets a value indicating whether it is possible to navigate forward.
            </summary>
            <value>
            	<c>true</c> if it is possible to navigate backforward otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Services.NavigationService.RootFrame">
            <summary>
            Gets the root frame.
            </summary>
            <value>The root frame.</value>
        </member>
        <member name="T:Catel.MVVM.Services.ProcessService">
            <summary>
            Process service to run files or start processes from a view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ProcessService.StartProcess(System.String)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.ProcessService.StartProcess(System.String,System.String)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.ProcessService.StartProcess(System.String,System.String,Catel.MVVM.Services.ProcessCompletedDelegate)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <param name="processCompletedCallback">The process completed callback, invoked only when the process is started successfully and completed.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="T:Catel.MVVM.Services.Test.MessageService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IMessageService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.MessageService service = (Test.MessageService)GetService<IMessageService>();
            
            // Queue the next expected result
            service.ExpectedResults.Add(MessageResult.Yes);
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.MessageService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowError(System.Exception)">
            <summary>
            Shows an error message to the user.
            </summary>
            <param name="exception">The exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowError(System.Exception,System.Action)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="exception">The exception.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowError(System.String)">
            <summary>
            Shows an error message to the user.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowError(System.String,System.Action)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowError(System.String,System.String)">
            <summary>
            Shows an error message to the user.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowError(System.String,System.String,System.Action)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowWarning(System.String)">
            <summary>
            Shows a warning message to the user.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowWarning(System.String,System.Action)">
            <summary>
            Shows a warning message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowWarning(System.String,System.String)">
            <summary>
            Shows a warning message to the user.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowWarning(System.String,System.String,System.Action)">
            <summary>
            Shows a warning message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowInformation(System.String)">
            <summary>
            Shows an information message to the user.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowInformation(System.String,System.Action)">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowInformation(System.String,System.String)">
            <summary>
            Shows an information message to the user.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowInformation(System.String,System.String,System.Action)">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.Show(System.String)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.Show(System.String,System.Action{Catel.MVVM.Services.MessageResult})">
            <summary>
            Shows the specified message and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="completedCallback">The callback to invoke when the message is completed which contains the result. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.Show(System.String,System.String)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.Show(System.String,System.String,System.Action{Catel.MVVM.Services.MessageResult})">
            <summary>
            Shows the specified message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton,System.Action{Catel.MVVM.Services.MessageResult})">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton,Catel.MVVM.Services.MessageImage)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton,Catel.MVVM.Services.MessageImage,System.Action{Catel.MVVM.Services.MessageResult})">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="P:Catel.MVVM.Services.Test.MessageService.ExpectedResults">
            <summary>
            Gets the queue of expected results.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.OpenFileService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IOpenFileService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.OpenFileService service = (Test.OpenFileService)GetService<IOpenFileService>();
            
            // Queue the next expected result
            service.ExpectedResults.Add(() =>
                         {
                           service.FileName = @"c:\test.txt";
                           return true;
                         });
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.OpenFileService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.OpenFileService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.OpenFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns>
            	<c>true</c> if a file is selected; otherwise <c>false</c>.
            </returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.Test.OpenFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.Test.OpenFileService.ExpectedResults">
            <summary>
            Gets the queue of expected results.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.OpenFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.OpenFileService.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.OpenFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.PleaseWaitService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IPleaseWaitService"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Show">
            <summary>
            Shows the please wait window with the default status text.
            </summary>
            <remarks>
            When this method is used, the <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status.</param>
            <remarks>
            When this method is used, the <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.UpdateStatus(System.String)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.UpdateStatus(System.Int32,System.Int32)">
            <summary>
            Updates the status and shows a progress bar with the default status text. The percentage will be automatically calculated.
            <para/>
            The busy indicator will automatically hide when the <paramref name="totalItems"/> is larger than <paramref name="currentItem"/>.
            </summary>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="currentItem"/> is smaller than zero.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.UpdateStatus(System.Int32,System.Int32,System.String)">
            <summary>
            Updates the status and shows a progress bar with the specified status text. The percentage will be automatically calculated.
            <para/>
            The busy indicator will automatically hide when the <paramref name="totalItems"/> is larger than <paramref name="currentItem"/>.
            <para/>
            When providing the <paramref name="statusFormat"/>, it is possible to use <c>{0}</c> (represents current item) and
            <c>{1}</c> (represents total items).
            </summary>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
            <param name="statusFormat">The status format. Can be empty, but not <c>null</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="currentItem"/> is smaller than zero.</exception>
              
            <exception cref="T:System.ArgumentNullException">The <paramref name="statusFormat"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Hide">
            <summary>
            Hides this please wait window.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Push">
            <summary>
            Increases the number of clients that show the please wait window. The implementing class
            is responsible for holding a counter internally which a call to this method will increase.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            decrease the counter, make a call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Show"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Push(System.String)">
            <summary>
            Increases the number of clients that show the please wait window. The implementing class
            is responsible for holding a counter internally which a call to this method will increase.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            decrease the counter, make a call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Show"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
            <param name="status">The status to change the text to.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Pop">
            <summary>
            Decreases the number of clients that show the please wait window. The implementing class
            is responsible for holding a counter internally which a call to this method will decrease.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            increase the counter, make a call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Show"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.Test.ProcessServiceTestResult">
            <summary>
            Class representing the process result.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.ProcessServiceTestResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.ProcessServiceTestResult"/> class, with <c>0</c> as default process result code.
            </summary>
            <param name="result">if set to <c>true</c>, the process will succeed during the test.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.ProcessServiceTestResult.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.ProcessServiceTestResult"/> class.
            </summary>
            <param name="result">if set to <c>true</c>, the process will succeed during the test.</param>
            <param name="processResultCode">The process result code to return in case of a callback.</param>
        </member>
        <member name="P:Catel.MVVM.Services.Test.ProcessServiceTestResult.Result">
            <summary>
            Gets or sets a value indicating whether the process should be returned as successfull when running the process.
            </summary>
            <value><c>true</c> if the process should be returned as successfull; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.ProcessServiceTestResult.ProcessResultCode">
            <summary>
            Gets or sets the process result code.
            </summary>
            <value>The process result code.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.ProcessService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IProcessService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.ProcessService service = (Test.ProcessService)GetService<IProcessService>();
            
            // Queue the next expected result (next StartProcess will succeed to run app, 5 will be returned as exit code)
            service.ExpectedResults.Add(new ProcessServiceTestResult(true, 5));
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.ProcessService.StartProcess(System.String)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.ProcessService.StartProcess(System.String,System.String)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.ProcessService.StartProcess(System.String,System.String,Catel.MVVM.Services.ProcessCompletedDelegate)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <param name="processCompletedCallback">The process completed callback, invoked only when the process is started successfully and completed.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="P:Catel.MVVM.Services.Test.ProcessService.ExpectedResults">
            <summary>
            Gets the queue of expected results for the <see cref="M:Catel.MVVM.Services.Test.ProcessService.StartProcess(System.String,System.String,Catel.MVVM.Services.ProcessCompletedDelegate)"/> method.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.SaveFileService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.ISaveFileService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.SaveFileService service = (Test.SaveFileService)GetService<ISaveFileService>();
            
            // Queue the next expected result
            service.ExpectedResults.Add(() =>
                         {
                           service.FileName = @"c:\test.txt";
                           return true;
                         });
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.SaveFileService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.OpenFileService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.SaveFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns>
            	<c>true</c> if a file is selected; otherwise <c>false</c>.
            </returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.Test.SaveFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.Test.SaveFileService.ExpectedResults">
            <summary>
            Gets the queue of expected results.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.SaveFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.SaveFileService.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.SaveFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.UIVisualizerService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IUIVisualizerService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.UIVisualizerService service = (Test.UIVisualizerService)GetService<IUIVisualizerService>();
            
            // Queue the next expected result
            service.ExpectedShowResults.Add(() =>
                         {
                           // If required, handle custom data manipulation here
                           return true;
                         });
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.UIVisualizerService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="windowType"/> is not of type <see cref="T:System.Windows.Window"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="name">Name of the registered window.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="windowType"/> is not of type <see cref="T:System.Windows.Window"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered window.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Show(Catel.MVVM.IViewModel)">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Show(System.String,System.Object)">
            <summary>
            Shows a window that is registered with the specified name in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Show(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.ShowDialog(Catel.MVVM.IViewModel)">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.ShowDialog(System.String,System.Object)">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.ShowDialog(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="P:Catel.MVVM.Services.Test.UIVisualizerService.NamingConvention">
            <summary>
            Gets or sets the naming convention to use to search for views.
            <para/>
            By customizing this property, the service can use custom resolving of views.
            </summary>
            <value>The naming convention.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.UIVisualizerService.NamingConventions">
            <summary>
            Gets or sets the naming conventions to use to search for views.
            <para/>
            By adding or removing conventions to this property, the service can use custom resolving of views.
            <para/>
            By default, the following conventions are added:<para/>
            * <c>/Views/[VM]View.xaml</c><para/>
            * <c>/Views/[VM]Control.xaml</c><para/>
            * <c>/Views/[VM]Page.xaml</c><para/>
            * <c>/Views/[VM]Window.xaml</c><para/>
            * <c>/Controls/[VM]Control.xaml</c><para/>
            * <c>/Pages/[VM]Page.xaml</c><para/>
            * <c>/Windows/[VM]Window.xaml</c><para/>
            * <c>/UI/Views/[VM]View.xaml</c><para/>
            * <c>/UI/Views/[VM]Control.xaml</c><para/>
            * <c>/UI/Views/[VM]Page.xaml</c><para/>
            * <c>/UI/Views/[VM]Window.xaml</c><para/>
            * <c>/UI/Controls/[VM]Control.xaml</c><para/>
            * <c>/UI/Pages/[VM]Page.xaml</c><para/>
            * <c>/UI/Windows/[VM]Window.xaml</c><para/>
            </summary>
            <value>The naming convention.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.UIVisualizerService.ExpectedShowResults">
            <summary>
            Gets the queue of expected results for the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})"/>
            method.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.UIVisualizerService.ExpectedShowDialogResults">
            <summary>
            Gets the queue of expected results for the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})"/>
            method.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="T:Catel.MVVM.Services.UIVisualizerService">
            <summary>
            Service to show modal or non-modal popup windows.
            <para/>
            This implementation of the <see cref="T:Catel.MVVM.Services.IUIVisualizerService"/> automatically adds all instances of the
            <see cref="T:Catel.Windows.DataWindow`1"/> class that are found in the current application domain.
            <para/>
            All other windows will have to be registered manually or must follow the naming convention.
            <para/>
            There are lots of default naming conventions (see <see cref="P:Catel.MVVM.Services.UIVisualizerService.NamingConventions"/> for all default values).
            </summary>
            <remarks>
            This implementation is based on the implementation that can be found in Cinch
            (see http://www.codeproject.com/KB/WPF/CinchIII.aspx#PopServ).
            </remarks>
        </member>
        <member name="F:Catel.MVVM.Services.UIVisualizerService.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.UIVisualizerService._registeredWindows">
            <summary>
            Dictionary of registered windows.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.UIVisualizerService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="windowType"/> is not of type <see cref="T:System.Windows.Window"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="name">Name of the registered window.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="windowType"/> is not of type <see cref="T:System.Windows.Window"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered window.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Show(Catel.MVVM.IViewModel)">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.ViewModelNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.Type,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Show(System.String,System.Object)">
            <summary>
            Shows a window that is registered with the specified name in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Show(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.ViewModelNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.Type,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.ShowDialog(Catel.MVVM.IViewModel)">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.ShowDialog(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.ShowDialog(System.String,System.Object)">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.CreateWindow(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs},System.Boolean)">
            <summary>
            This creates the window from a key.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data that will be set as data context.</param>
            <param name="completedProc">Callback</param>
            <param name="isModal">True if this is a ShowDialog request</param>
            <returns>The created window.</returns>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.CreateWindow(System.Type,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs},System.Boolean)">
            <summary>
            This creates the window of the specified type.
            </summary>
            <param name="windowType">The type of the window.</param>
            <param name="data">The data that will be set as data context.</param>
            <param name="completedProc">Callback</param>
            <param name="isModal">True if this is a ShowDialog request</param>
            <returns>The created window.</returns>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.RegisterTypesAutomatically(System.Type)">
            <summary>
            Registers the types automatically.
            </summary>
            <param name="baseTypeToRegister">The base type to register, for example <c>DataWindow{}</c>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="baseTypeToRegister"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="baseTypeToRegister"/> is not generic.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.ResolveViewByNamingConvention(System.Type,System.String)">
            <summary>
            Resolves the view by naming convention based on the view model type.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="namingConvention">The naming convention to use when resolving.</param>
            <returns><c>true</c> if the type is resolved by naming convention; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Catel.MVVM.Services.UIVisualizerService.NamingConvention">
            <summary>
            Gets or sets the naming convention to use to search for views.
            <para />
            By customizing this property, the service can use custom resolving of views.
            <para />
            The default value is <c>/UI/Views/[VM]View.xaml</c>.
            </summary>
            <value>The naming convention.</value>
        </member>
        <member name="P:Catel.MVVM.Services.UIVisualizerService.NamingConventions">
            <summary>
            Gets or sets the naming conventions to use to search for views.
            <para />
            By adding or removing conventions to this property, the service can use custom resolving of views.
            <para />
            By default, the following conventions are added:<para />
            * <c>/Views/[VM]View.xaml</c><para />
            * <c>/Views/[VM]Control.xaml</c><para />
            * <c>/Views/[VM]Page.xaml</c><para />
            * <c>/Views/[VM]Window.xaml</c><para />
            * <c>/Controls/[VM]Control.xaml</c><para />
            * <c>/Pages/[VM]Page.xaml</c><para />
            * <c>/Windows/[VM]Window.xaml</c><para />
            * <c>/UI/Views/[VM]View.xaml</c><para />
            * <c>/UI/Views/[VM]Control.xaml</c><para />
            * <c>/UI/Views/[VM]Page.xaml</c><para />
            * <c>/UI/Views/[VM]Window.xaml</c><para />
            * <c>/UI/Controls/[VM]Control.xaml</c><para />
            * <c>/UI/Pages/[VM]Page.xaml</c><para />
            * <c>/UI/Windows/[VM]Window.xaml</c><para />
            </summary>
            <value>The naming convention.</value>
        </member>
        <member name="T:Catel.MVVM.UI.ViewToViewModelMappingContainer">
            <summary>
            Container class for <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> elements.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingContainer.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingContainer._viewToViewModelMappings">
            <summary>
            Dictionary containing all the view to view model mappings.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingContainer._viewModelToViewMappings">
            <summary>
            Dictionary containing all the view model to view mappings.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingContainer.#ctor(System.Windows.DependencyObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ViewToViewModelMappingContainer"/> class.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dependencyObject"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingContainer.GetAllViewToViewModelMappings">
            <summary>
            Gets all the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> that are registered.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingContainer.ContainsViewToViewModelMapping(System.String)">
            <summary>
            Determines whether the manager contains a view to view model property mapping for the specified view property name.
            </summary>
            <param name="viewPropertyName">Name of the view property.</param>
            <returns>
            	<c>true</c> if the manager contains a view to view model property mapping for the specified view property name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingContainer.GetViewToViewModelMapping(System.String)">
            <summary>
            Gets the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> that is mapped to the specified view property name.
            </summary>
            <param name="viewPropertyName">Name of the view property.</param>
            <returns><see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingContainer.ContainsViewModelToViewMapping(System.String)">
            <summary>
            Determines whether the manager contains a view model to view property mapping for the specified view model property name.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <returns>
            	<c>true</c> if the manager contains a view model to view property mapping for the specified view model property name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingContainer.GetViewModelToViewMapping(System.String)">
            <summary>
            Gets the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> that is mapped to the specified view model property name.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <returns><see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/>.</returns>
        </member>
        <member name="T:Catel.MVVM.ViewModelBase">
            <summary>
            View model base for MVVM implementations. This class is based on the <see cref="T:Catel.Data.DataObjectBase"/>, and supports all
            common interfaces.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class with support for <see cref="T:System.ComponentModel.IEditableObject"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            </summary>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            </summary>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            </summary>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <param name="skipViewModelAttributesInitialization">
            if set to <c>true</c>, the initialization will be skipped and must be done manually via 
            <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.InitializeViewModelAttributes"/>.
            </param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(Catel.IoC.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            <para/>
            This constructor allows the injection of a custom <see cref="T:Catel.IoC.IServiceLocator"/>.
            </summary>
            <param name="serviceLocator">The service locator to inject. If <c>null</c>, the <see cref="P:Catel.IoC.ServiceLocator.Instance"/> will be used.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(Catel.IoC.IServiceLocator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            <para/>
            This constructor allows the injection of a custom <see cref="T:Catel.IoC.IServiceLocator"/>.
            </summary>
            <param name="serviceLocator">The service locator to inject. If <c>null</c>, the <see cref="P:Catel.IoC.ServiceLocator.Instance"/> will be used.</param>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(Catel.IoC.IServiceLocator,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            <para/>
            This constructor allows the injection of a custom <see cref="T:Catel.IoC.IServiceLocator"/>.
            </summary>
            <param name="serviceLocator">The service locator to inject. If <c>null</c>, the <see cref="P:Catel.IoC.ServiceLocator.Instance"/> will be used.</param>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(Catel.IoC.IServiceLocator,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            <para/>
            This constructor allows the injection of a custom <see cref="T:Catel.IoC.IServiceLocator"/>.
            </summary>
            <param name="serviceLocator">The service locator to inject. If <c>null</c>, the <see cref="P:Catel.IoC.ServiceLocator.Instance"/> will be used.</param>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <param name="skipViewModelAttributesInitialization">
            if set to <c>true</c>, the initialization will be skipped and must be done manually via 
            <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.InitializeViewModelAttributes"/>.
            </param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.RegisterViewModelServices(Catel.IoC.IServiceLocator)">
            <summary>
            Registers the known view model services.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.UpdateNavigationContext(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates the navigation context. The navigation context provided by this class is different
            from the <see cref="P:Catel.MVVM.ViewModelBase.NavigationContext"/>. Therefore, this method updates the navigation context
            to match it to the values of the <paramref name="navigationContext"/>.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnNavigationCompleted">
            <summary>
            Called when the navigation has completed.
            </summary>
            <remarks>
            This should of course be a cleaner solution, but there is no other way to let a view-model
            know that navigation has completed. Another option is injection, but this would require every
            view-model for Windows Phone 7 to accept only the navigation context, which has actually nothing
            to do with the logic.
            <para/>
            It is also possible to use the <see cref="E:Catel.MVVM.ViewModelBase.NavigationCompleted"/> event.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.NavigationContext">
            <summary>
            Gets the navigation context.
            </summary>
            <value>The navigation context.</value>
            <remarks>
            Note that the navigation contexts is first available in the <see cref="M:Catel.MVVM.ViewModelBase.OnNavigationCompleted"/> method, 
            not in the constructor.
            </remarks>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.NavigationCompleted">
            <summary>
            Occurs when the navigation is completed.
            </summary>
            <remarks>
            This should of course be a cleaner solution, but there is no other way to let a view-model
            know that navigation has completed. Another option is injection, but this would require every
            view-model for Windows Phone 7 to accept only the navigation context, which has actually nothing
            to do with the logic.
            <para/>
            It is also possible to use the <see cref="M:Catel.MVVM.ViewModelBase.OnNavigationCompleted"/> event.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Properties.Exceptions">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ArgumentCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Argument cannot be null or empty.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ArgumentMustBeOfTypeWindow">
            <summary>
              Looks up a localized string similar to Argument must be of type Window.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ArgumentMustImplementIViewModelInterface">
            <summary>
              Looks up a localized string similar to The argument must implement IViewModel interface.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ControlTemplateMustContainPart">
            <summary>
              Looks up a localized string similar to Control template must contain part &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.DataWindowButtonCanOnlyBeAddedWhenWindowIsNotLoaded">
            <summary>
              Looks up a localized string similar to DataWindowButtons can only be added when the window is not yet loaded.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.DependencyPropertyCanOnlyBeAttachedToScrollViewer">
            <summary>
              Looks up a localized string similar to The dependency property can only be attached to a ScrollViewer.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.FailedToConfigureIoCContainer">
            <summary>
              Looks up a localized string similar to Failed to configure IoC container.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.MethodToValueConverterOnlySupportsOneWayBinding">
            <summary>
              Looks up a localized string similar to MethodToValueConverter can only be used for one way conversion..
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.NoExpectedResultsInQueueForUnitTest">
            <summary>
              Looks up a localized string similar to No expected results in the queue, set up expected result first.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ServiceDoesNotSupportOperation">
            <summary>
              Looks up a localized string similar to The service does not support this operation.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ViewModelAlreadyRegistered">
            <summary>
              Looks up a localized string similar to View model already registered.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ViewModelContainerMustBeOfTypeDependencyObject">
            <summary>
              Looks up a localized string similar to viewModelContainer must be of type DependencyObject.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.VisibilityIsNotAllowedForConverter">
            <summary>
              Looks up a localized string similar to Visibility.Visible is not possible as not-visible option.
            </summary>
        </member>
        <member name="T:Catel.Windows.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.Apply">
            <summary>
              Looks up a localized string similar to Apply.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.Close">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.ErrorTitle">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.Failed">
            <summary>
              Looks up a localized string similar to Failed.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.InfoBarMessageControlErrorTitle">
            <summary>
              Looks up a localized string similar to The following warnings and/or errors were found (hover to view):.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.InfoTitle">
            <summary>
              Looks up a localized string similar to Information.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.OK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.PleaseWait">
            <summary>
              Looks up a localized string similar to Please wait.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.WarningTitle">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="T:Catel.MVVM.UI.ViewToViewModelMappingType">
            <summary>
            Mapping types for the <see cref="T:Catel.MVVM.UI.ViewToViewModelAttribute"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingType.TwoWayDoNothing">
            <summary>
            Two way, which means that either the view or the view model will update
            the values of the other party as soon as they are updated.
            <para />
            When this value is used, nothing happens when the view model of the view
            changes. This way, it might be possible that the values of the view and the
            view model are different. The first one to update next will update the other.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingType.TwoWayViewWins">
            <summary>
            Two way, which means that either the view or the view model will update
            the values of the other party as soon as they are updated.
            <para />
            When this value is used, the value of the view is used when the view model 
            of the view is changed, and is directly transferred to the view model value.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingType.TwoWayViewModelWins">
            <summary>
            Two way, which means that either the view or the view model will update
            the values of the other party as soon as they are updated.
            <para />
            When this value is used, the value of the view model is used when the view model 
            of the view is changed, and is directly transferred to the view value.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingType.ViewToViewModel">
            <summary>
            The mapping is from the view to the view model only.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingType.ViewModelToView">
            <summary>
            The mapping is from the view model to the view only.
            </summary>
        </member>
        <member name="T:Catel.MVVM.UI.ViewToViewModelAttribute">
            <summary>
            A mapper attribute to map a <see cref="T:System.Windows.FrameworkElement"/> (such as the <see cref="T:Catel.Windows.Controls.UserControl`1"/>
            or the <see cref="T:Catel.Windows.DataWindow`1"/> property to a <see cref="T:Catel.MVVM.ViewModelBase"/> property.
            <para/>
            This class is very useful when creating custom user controls that need more parameterized settings than just the
            <c>DataContext</c> property.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ViewToViewModelAttribute"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ViewToViewModelAttribute"/> class.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelAttribute.ViewModelPropertyName">
            <summary>
            Gets or sets the view model property name.
            </summary>
            <value>The view model property name.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelAttribute.MappingType">
            <summary>
            Gets or sets the type of the mapping.
            </summary>
            <value>The type of the mapping.</value>
        </member>
        <member name="T:Catel.MVVM.UI.ViewToViewModelMapping">
            <summary>
            Holds the information for a view to viewmodel mapping. The information is based on the <see cref="T:Catel.MVVM.UI.ViewToViewModelAttribute"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMapping.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMapping.#ctor(System.String,System.String,Catel.MVVM.UI.ViewToViewModelMappingType)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> class.
            </summary>
            <param name="viewPropertyName">Name of the view property.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <param name="mapping">The mapping type.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewPropertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelPropertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMapping.ViewPropertyName">
            <summary>
            Gets the name of the view property.
            </summary>
            <value>The name of the view property.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMapping.ViewModelPropertyName">
            <summary>
            Gets the name of the view model property.
            </summary>
            <value>The name of the view model property.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMapping.MappingType">
            <summary>
            Gets or sets the mapping type.
            </summary>
            <value>The mapping type.</value>
        </member>
        <member name="T:Catel.Windows.Controls.RichTextBoxExtensions">
            <summary>
            Extension methods for <see cref="T:System.Windows.Controls.RichTextBox"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichTextBoxExtensions.SetText(System.Windows.Controls.RichTextBox,System.String)">
            <summary>
            Sets the text of a <see cref="T:System.Windows.Controls.RichTextBox"/>. This method will replace
            any existing content.
            </summary>
            <param name="rtb"><see cref="T:System.Windows.Controls.RichTextBox"/> that should contain the text.</param>
            <param name="text">Text to set.</param>
        </member>
        <member name="M:Catel.Windows.Controls.RichTextBoxExtensions.GetText(System.Windows.Controls.RichTextBox)">
            <summary>
            Returns the text that a <see cref="T:System.Windows.Controls.RichTextBox"/> contains.
            </summary>
            <param name="rtb"><see cref="T:System.Windows.Controls.RichTextBox"/> that contains the text.</param>
            <returns>String containing the text of the <see cref="T:System.Windows.Controls.RichTextBox"/> control.</returns>
        </member>
        <member name="T:Catel.Windows.Controls.InfoBarMessageControlVisibilityConverter">
            <summary>
            Converter for the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> to determine whether the control
            should be visible for the current mode and
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControlVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is not of type <see cref="T:Catel.Windows.Controls.InfoBarMessageControlMode"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControlVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Controls.IPage">
            <summary>
            Interface defining functionality for the <see cref="T:Catel.Windows.Controls.Page`1"/> control.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.IUIElement">
            <summary>
            Interface defining shared members for UI elements.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.IUIElement.DataContext">
            <summary>
            Gets or sets the data context.
            </summary>
            <value>
            The data context.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.IUIElement.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="T:Catel.Windows.Controls.IUserControl">
            <summary>
            Interface defining functionality for the <see cref="T:Catel.Windows.Controls.UserControl`1"/> control.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.IUserControl.CloseViewModelOnUnloaded">
            <summary>
            Gets or sets a value indicating whether the user control should close any existing
            view model when the control is unloaded from the visual tree.
            <para />
            Set this property to <c>false</c> if a view model should be kept alive and re-used
            for unloading/loading instead of creating a new one.
            <para />
            By default, this value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the view model should be closed when the control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.IUserControl.SupportParentViewModelContainers">
            <summary>
            Gets or sets a value indicating whether parent view model containers are supported. If supported,
            the user control will search for a <see cref="T:System.Windows.DependencyObject"/> that implements the <see cref="T:Catel.MVVM.IViewModelContainer"/>
            interface. During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any parent control implementing the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>false</c>.
            <para/>
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if parent view model containers are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.IUserControl.SkipSearchingForInfoBarMessageControl">
            <summary>
            Gets or sets a value indicating whether to skip the search for an info bar message control. If not skipped,
            the user control will search for a the first <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> that can be found. 
            During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>true</c>.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if the search for an info bar message control should be skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.IUserControl.DisableWhenNoViewModel">
            <summary>
            Gets or sets a value indicating whether the user control should automatically be disabled when there is no
            active view model.
            </summary>
            <value>
            	<c>true</c> if the user control should automatically be disabled when there is no active view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1">
            <summary>
            Base class for pages or controls containing navigation logic.
            </summary>
            <typeparam name="T">Type of the control or page.</typeparam>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase">
            <summary>
            Base implementation of the behaviors, which defines all the different possible situations
            a behavior must implement / support to be a valid MVVM provider behavior.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase._viewModel">
            <summary>
            The view model instances currently held by this provider. This value should only be used
            inside the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property. For accessing the view model, use the 
            <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase._isFirstValidationAfterLoaded">
            <summary>
            Boolean representing whether this is the first validation after the control has been loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.#ctor(System.Windows.FrameworkElement,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase"/> class.
            </summary>
            <param name="targetControl">The target control.</param>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.#ctor(System.Windows.FrameworkElement,System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase"/> class.
            </summary>
            <param name="targetControl">The target control.</param>
            <param name="viewModelType">Type of the view model.</param>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.CreateViewModelByUsingDataContextOrConstructor">
            <summary>
            Creates a view model by using data context or, if that is not possible, the constructor of the view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelChanging">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property is about to change.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property has just been changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelPropertyChanged(Catel.MVVM.IViewModel,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the view model has changed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlLoadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            This method will call the <see cref="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlLoaded(System.Object,System.EventArgs)"/> which can be overriden for custom 
            behavior. This method is required to protect from duplicate loaded events.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been loaded.
            <para/>
            The base implementation will try to create a view model based on the current DataContext and
            set it as the DataContext of the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/>. To create custom logic for
            view model creation, override this method and do not call the base.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlUnloadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            This method will call the <see cref="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlUnloaded(System.Object,System.EventArgs)"/> which can be overriden for custom 
            behavior. This method is required to protect from duplicate unloaded events.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <c>DataContext</c> property of the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlPropertyChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelCanceled(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has been saved.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelSaved(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has been saved.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelClosed(System.Object,Catel.MVVM.ViewModelClosedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has been closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.ViewModelClosedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ValidateViewModel">
            <summary>
            Validates the view model.
            </summary>
            <returns><c>true</c> if the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> is valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.CancelViewModel">
            <summary>
            Cancels the view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.CancelAndCloseViewModel">
            <summary>
            Cancels and closes the view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.SaveViewModel">
            <summary>
            Saves the view model.
            </summary>
            <returns><c>true</c> if the view model is successfully saved; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.SaveAndCloseViewModel">
            <summary>
            Saves and closes the view model. If the saving fails, the view model is not closed.
            </summary>
            <returns><c>true</c> if the view model is successfully saved; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.CloseViewModel(System.Nullable{System.Boolean})">
            <summary>
            Closes the view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ConstructViewModelUsingArgumentOrDefaultConstructor(System.Object)">
            <summary>
            Tries to construct the view model using the argument. If that fails, it will try to use
            the default constructor of the view model. If that is not available, <c>null</c> is returned.
            </summary>
            <param name="injectionObject">The object that is injected into the view model constructor.</param>
            <returns>
            Constructed view model or <c>null</c> if the view model could not be constructed.
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel">
            <summary>
            Gets or sets the view model.
            </summary>
            <value>The view model.</value>
            <remarks>
            When a new value is set, the old view model will be disposed.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl">
            <summary>
            Gets the target control of this MVVM provider.
            </summary>
            <value>The target control.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.IsTargetControlLoaded">
            <summary>
            Gets a value indicating whether the target control is loaded or not.
            </summary>
            <value>
            	<c>true</c> if the target control is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModelPropertyChanged">
            <summary>
            Occurs when a property on the current <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModelCanceled">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has been canceled.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModelSaved">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has been saved.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModelClosed">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has been closed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.#ctor(`0,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.NavigationPageLogic"/> class.
            </summary>
            <param name="targetPage">The page this provider should take care of.</param>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetPage"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.OnTargetControlLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.OnTargetControlUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.OnNavigating(System.Object,System.Windows.Navigation.NavigatingCancelEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Application.Navigating"/> event is invoked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Navigation.NavigatingCancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.OnNavigated(System.Object,System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Application.Navigated"/> event is invoked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Navigation.NavigationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.InitializeNavigationService">
            <summary>
            Initializes the navigation service. If the navigation service is already initialized, it won't be initialized 
            again. However, sometimes the RootFrame of a windows phone 7 application is not yet available at startup. Therefore,
            this method must be called in both the constructor and the <see cref="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.OnTargetControlLoaded(System.Object,System.EventArgs)"/> methods.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.EnsureViewModel">
            <summary>
            Ensures that there is a valid view model. This is a separate method because the view model can be constructed
            in the constructor, but also in the OnLoaded event because of the tombstoning capabilities of Windows Phone 7.
            <para/>
            If there already is a view model, this method will do nothing.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.CompleteNavigation(System.Object)">
            <summary>
            Completes the navigation.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.TargetPage">
            <summary>
            Gets the target page.
            </summary>
            <value>The target page.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.NavigatingAwaySavesViewModel">
            <summary>
            Gets or sets a value indicating whether navigating away from the page should save the view model.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if navigating away should save the view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.Logic.NavigationPageLogic">
            <summary>
            MVVM Provider behavior implementation for a navigation page.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationPageLogic.#ctor(System.Windows.Controls.Page,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.NavigationPageLogic"/> class.
            </summary>
            <param name="targetPage">The page this provider should take care of.</param>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetPage"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic">
            <summary>
            MVVM Provider behavior implementation for a user control.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic._dataContextDependencyPropertyDescriptor">
            <summary>
            This is the <c>DependencyPropertyDescriptor</c>. In Silverlight, this class is not available so 
            the field is declared as <c>object</c>.
            <para />
            In WPF, this value is an instance of <c>DependencyPropertyDescriptor</c>, in Silverlight it
            has a dummy value to show that there is a binding.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.#ctor(System.Windows.Controls.UserControl,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.NavigationPageLogic"/> class.
            </summary>
            <param name="targetControl">The user control this provider should take care of.</param>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.#ctor(System.Windows.Controls.UserControl,System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic"/> class.
            </summary>
            <param name="targetControl">The target control.</param>
            <param name="viewModelType">Type of the view model.</param>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnTargetControlLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.TargetControl"/> has just been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnTargetControlUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.TargetControl"/> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnTargetControlPropertyChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.TargetControl"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnViewModelChanging">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property is about to change.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnViewModelChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property has just been changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnTargetControlDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <c>DataContext</c> property of the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.TargetControl"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.DetermineRealDataContext">
            <summary>
            Determines the real data context. If there already is a real data context, no new data context will
            be determined.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.SubscribeToRealDataContext(System.Windows.UIElement,System.Windows.Data.BindingExpression)">
            <summary>
            Subscribes to the real DataContext so changes can be reflected.
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.UnsubscribeFromRealDataContext">
            <summary>
            Unsubscribes from the real DataContext.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.SubscribeToParentViewModelContainer">
            <summary>
            Subscribes to the parent view model container.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.UnsubscribeFromParentViewModelContainer">
            <summary>
            Unsubscribes from the parent view model container.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.SubscribeToParentViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Subscribes to a parent view model.
            </summary>
            <param name="parentViewModel">The parent view model.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.UnsubscribeFromParentViewModel">
            <summary>
            Unsubscribes from a parent view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.RegisterViewModelAsChild">
            <summary>
            Registers the view model as child on the parent view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.UnregisterViewModelAsChild">
            <summary>
            Unregisters the view model as child on the parent view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.UpdateDataContextToUseViewModel(System.Object)">
            <summary>
            Updates the data context to use view model.
            </summary>
            <param name="newDataContext">The new data context.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.InitializeNewViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Initializes the new view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.InitializeNewViewModel(Catel.MVVM.IViewModel,System.Action)">
            <summary>
            Initializes the new view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="dataContextSetCallback">
            The callback to execute when the <see cref="!:TargetControl.DataContext"/> is actually set. If <c>null</c>, 
            the callback will not be invoked.
            <para/>
            This callback will only be invoked when the <see cref="!:TargetControl.DataContext"/> is set to a view model,
            not when it is reset to <c>null</c>.
            </param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.CloseAndDiposeViewModel(System.Nullable{System.Boolean})">
            <summary>
            Closes and diposes the current view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnParentElementDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <c>DataContext</c> property of the parent element has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnRealDataContextPropertyChangedViaDependencyProperty(System.Object,System.EventArgs)">
            <summary>
            Handles the PropertyChanged event of the real DataContext via dependency properties.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnRealDataContextPropertyChangedViaINotifyPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of the real DataContext via INotifyPropertyChanged.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.UpdateToNewDataContextAfterRealDataContextChange(System.Object)">
            <summary>
            Called when the real data context property has changed (so we must update).
            </summary>
            <param name="sender">The sender which is the real data context.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sender"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnParentViewModelContainerViewModelChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the ViewModelChanged event of the parent ViewModel container.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnParentViewModelCanceling(System.Object,System.EventArgs)">
            <summary>
            Handles the Canceling event of the parent ViewModel.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnParentViewModelSaving(System.Object,System.EventArgs)">
            <summary>
            Handles the Saving event of the parent ViewModel.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.UpdateParentSubscriptions">
            <summary>
            Updates the parent subscriptions so this control is notified on parent datacontext changes.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.ClearWarningsAndErrorsForObject(System.Object)">
            <summary>
            Clears the warnings and errors for the specified object.
            </summary>
            <param name="obj">The object.</param>
            <remarks>
            Since there is a "bug" in the .NET Framework (DataContext issue), this method clears the current
            warnings and errors in the InfoBarMessageControl if available.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.GetRealDataContext">
            <summary>
            Gets the real data context. This means that the value will first check whether there is a real data context. If so,
            that data context will be used. If there is no real data context, the actual data context will be returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.GetDependencyPropertyDescription(System.Windows.DependencyObject,System.String)">
            <summary>
            Gets the dependency property description for the specified property.
            </summary>
            <param name="dependencyObject">The dependency object that owns the property.</param>
            <param name="propertyName">Name of the property.</param>
            <returns><see cref="T:System.ComponentModel.DependencyPropertyDescriptor"/> or <c>null</c> if the property is not found.</returns>
            <remarks>
            This method needs a special naming convention to succeed. If a property is called "Name", then the registered
            dependency property needs to be registered as "NameProperty".
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dependencyObject"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.GetParent(System.Windows.FrameworkElement)">
            <summary>
            Gets the parent of the specified element, both for Silverlight and WPF.
            </summary>
            <param name="element">The element.</param>
            <returns>The parent <see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if there is no parent.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.FindParentByPredicate(System.Windows.Controls.UserControl,System.Predicate{System.Object})">
            <summary>
            Finds a parent by predicate. It first tries to find the parent via the <c>UserControl.Parent</c> property, and if that
            doesn't satisfy, it uses the <c>UserControl.TemplatedParent</c> property.
            </summary>
            <param name="control">The control.</param>
            <param name="predicate">The predicate.</param>
            <returns>
            	<see cref="T:System.Windows.DependencyObject"/> or <c>null</c> if no parent is found that matches the predicate.
            </returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.FindParentByPredicate(System.Windows.Controls.UserControl,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds a parent by predicate. It first tries to find the parent via the <c>UserControl.Parent</c> property, and if that
            doesn't satisfy, it uses the <c>UserControl.TemplatedParent</c> property.
            </summary>
            <param name="control">The control.</param>
            <param name="predicate">The predicate.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>
            	<see cref="T:System.Windows.DependencyObject"/> or <c>null</c> if no parent is found that matches the predicate.
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.TargetControl">
            <summary>
            Gets the target control.
            </summary>
            <value>The target control.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.CloseViewModelOnUnloaded">
            <summary>
            Gets or sets a value indicating whether the user control should close any existing
            view model when the control is unloaded from the visual tree.
            <para />
            Set this property to <c>false</c> if a view model should be kept alive and re-used
            for unloading/loading instead of creating a new one.
            <para />
            By default, this value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the view model should be closed when the control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.SupportParentViewModelContainers">
            <summary>
            Gets or sets a value indicating whether parent view model containers are supported. If supported,
            the user control will search for a <see cref="T:System.Windows.DependencyObject"/> that implements the <see cref="T:Catel.MVVM.IViewModelContainer"/>
            interface. During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any parent control implementing the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>false</c>.
            <para/>
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if parent view model containers are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.SkipSearchingForInfoBarMessageControl">
            <summary>
            Gets or sets a value indicating whether to skip the search for an info bar message control. If not skipped,
            the user control will search for a the first <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> that can be found. 
            During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>true</c>.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if the search for an info bar message control should be skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.DisableWhenNoViewModel">
            <summary>
            Gets or sets a value indicating whether the user control should automatically be disabled when there is no
            active view model.
            </summary>
            <value>
            	<c>true</c> if the user control should automatically be disabled when there is no active view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.HasRealDataContext">
            <summary>
            Gets a value indicating whether there is a real DataContext this control is watching.
            </summary>
            <value>
            	<c>true</c> if there is a real DataContext this control is watching; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.HasParentViewModelContainer">
            <summary>
            Gets a value indicating whether there is a parent view model container available.
            </summary>
            <value>
            	<c>true</c> if there is a parent view model container available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.ParentViewModelContainer">
            <summary>
            Gets the parent view model container.
            </summary>
            <value>The parent view model container.</value>
            <remarks>
            For internal usage only.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.IsSubscribedToParentViewModel">
            <summary>
            Gets a value indicating whether this instance is subscribed to a parent view model.
            </summary>
            <value>
            	<c>true</c> if this instance is subscribed to a parent view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic">
            <summary>
            MVVM Provider behavior implementation for a window.
            </summary>
            <remarks>
            Some parts in this class (with the instances and increments), but this is required to dynamically subscribe to
            an even that we do not know the handler of on forehand. Normally, you would do this via an anynomous delegate, 
            but that doesn't work so the event delegate is created via ILGenerator at runtime.
            <para />
            http://stackoverflow.com/questions/8122085/calling-an-instance-method-when-event-occurs/8122242#8122242.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.#ctor(System.Windows.Window,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic"/> class.
            </summary>
            <param name="targetWindow">The window this provider should take care of.</param>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetWindow"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.#ctor(System.Windows.Window,System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic"/> class.
            </summary>
            <param name="targetWindow">The window this provider should take care of.</param>
            <param name="viewModelType">Type of the view model.</param>
            <param name="viewModel">The view model to inject.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetWindow"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.OnTargetControlUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.OnViewModelClosed(System.Object,Catel.MVVM.ViewModelClosedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> is closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.ViewModelClosedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.OnTargetWindowClosed">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.TargetWindow"/> has been closed.
            </summary>
            <remarks>
            Public to allow the generated ILGenerator to access this method.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.TargetWindow">
            <summary>
            Gets the target control as window object.
            </summary>
            <value>The target window.</value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2">
            <summary>
            A <see cref="T:System.Windows.Interactivity.Behavior"/> base implementation that takes care of generic MVVM behavior logic.
            </summary>
            <typeparam name="TAttachedType">The type of the attached type.</typeparam>
            <typeparam name="TLogicType">The type of the logic type.</typeparam>
        </member>
        <member name="T:Catel.Windows.Interactivity.BehaviorBase`1">
            <summary>
            Behavior base class that handles a safe unsubscribe and clean up because the default
            behavior class does not always call <see cref="M:System.Windows.Interactivity.Behavior.OnDetaching"/>.
            <para/>
            This class also adds some specific features such as <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.ValidateRequiredProperties"/>
            which is automatically called when the behavior is attached.
            </summary>
            <typeparam name="T">The <see cref="T:System.Windows.FrameworkElement"/> this behavior should attach to.</typeparam>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>Override this to unhook functionality from the AssociatedObject.</remarks>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.ValidateRequiredProperties">
            <summary>
            Validates the required properties. This method is called when the object is attached, but before
            the <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.Initialize"/> is invoked.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.Initialize">
            <summary>
            Initializes the behavior. This method is called instead of the <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAttached"/> which is sealed
            to protect the additional behavior.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.Uninitialize">
            <summary>
            Uninitializes the behavior. This method is called when <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.OnDetaching"/> is called, or when the
            <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            <para/>
            If dependency properties are used, it is very important to use 
            <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)"/> to clear the value
            of the dependency properties in this method.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAssociatedObjectLoadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded. This method is introduced to prevent
            double initialization when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is already loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAssociatedObjectUnloadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded. This method is introduced to prevent
            double uninitialization when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is already unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.CleanUp">
            <summary>
            Actually cleans up the behavior because <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.OnDetaching"/> is not always called.
            </summary>
            <remarks>
            This is based on the blog post: http://dotnetbyexample.blogspot.com/2011/04/safe-event-detachment-pattern-for.html.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.BehaviorBase`1.IsAssociatedObjectLoaded">
            <summary>
            Gets a value indicating whether the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <value>
            	<c>true</c> if the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.#ctor(Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModelTypeProperty">
            <summary>
            DependencyProperty definition as the backing store for ViewModelType.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.CreateLogic">
            <summary>
            Creates the logic required for MVVM.
            </summary>
            <returns>The <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase"/> implementation uses by this behavior.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ValidateRequiredProperties">
            <summary>
            Validates the required properties. This implementation checks for the <see cref="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModelType"/>,
            which is mandatory.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModelType"/> is not set.</exception>
            <remarks>
            When this method is overriden, don't forget to call the base.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <remarks>
            When this method is overriden, don't forget to call the base.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.Uninitialize">
            <summary>
            Uninitializes this instance.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.OnLogicViewModelChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.OnLogicViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.Logic">
            <summary>
            Gets the logic.
            </summary>
            <value>The logic.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModelType">
            <summary>
            Gets or sets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModel">
            <summary>
            Gets the view model attached to this behavior.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModelChanged">
            <summary>
            Raised when the <see cref="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModel"/> is changed by the <see cref="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.Logic"/>.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModelPropertyChanged">
            <summary>
            Raised when a property on the <see cref="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.IsAssociatedObjectLoaded">
            <summary>
            Gets a value indicating whether the target control is loaded.
            </summary>
            <value><c>true</c> if this instance is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.NavigationPageBehavior">
            <summary>
            A <see cref="T:System.Windows.Interactivity.Behavior"/> implementation for a <see cref="T:System.Windows.Controls.Page"/>. 
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.NavigationPageBehavior.CreateLogic">
            <summary>
            Creates the logic required for MVVM.
            </summary>
            <returns>The <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase"/> implementation uses by this behavior.</returns>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.NavigationPageBehavior.NavigatingAwaySavesViewModel">
            <summary>
            Gets or sets a value indicating whether navigating away from the page should save the view model.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if navigating away should save the view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.UserControlBehavior">
            <summary>
            A <see cref="T:System.Windows.Interactivity.Behavior"/> implementation for a user control. 
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.UserControlBehavior.CreateLogic">
            <summary>
            Creates the logic required for MVVM.
            </summary>
            <returns>The <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase"/> implementation uses by this behavior.</returns>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.UserControlBehavior.CloseViewModelOnUnloaded">
            <summary>
            Gets or sets a value indicating whether the user control should close any existing
            view model when the control is unloaded from the visual tree.
            <para />
            Set this property to <c>false</c> if a view model should be kept alive and re-used
            for unloading/loading instead of creating a new one.
            <para />
            By default, this value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the view model should be closed when the control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.UserControlBehavior.SupportParentViewModelContainers">
            <summary>
            Gets or sets a value indicating whether parent view model containers are supported. If supported,
            the user control will search for a <see cref="T:System.Windows.DependencyObject"/> that implements the <see cref="T:Catel.MVVM.IViewModelContainer"/>
            interface. During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any parent control implementing the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>false</c>.
            <para/>
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if parent view model containers are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.UserControlBehavior.SkipSearchingForInfoBarMessageControl">
            <summary>
            Gets or sets a value indicating whether to skip the search for an info bar message control. If not skipped,
            the user control will search for a the first <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> that can be found. 
            During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>true</c>.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if the search for an info bar message control should be skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.UserControlBehavior.DisableWhenNoViewModel">
            <summary>
            Gets or sets a value indicating whether the user control should automatically be disabled when there is no
            active view model.
            </summary>
            <value>
            	<c>true</c> if the user control should automatically be disabled when there is no active view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.WindowBehavior">
            <summary>
            A <see cref="T:System.Windows.Interactivity.Behavior`1"/> implementation for a window. 
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.WindowBehavior"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.#ctor(Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.WindowBehavior"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.CreateLogic">
            <summary>
            Creates the logic required for MVVM.
            </summary>
            <returns>The <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase"/> implementation uses by this behavior.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            The behavior is initialized when the associated object is loaded because the <see cref="T:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget"/>
            class requires loaded associated objects.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.Uninitialize">
            <summary>
            Uninitializes this instance.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.OnSaved(System.Object,System.EventArgs)">
            <summary>
            Called when the save event is invoked by a subscribed control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.OnSavedAndClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the save and close event is invoked by a subscribed control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.OnCanceled(System.Object,System.EventArgs)">
            <summary>
            Called when the cancel event is invoked by a subscribed control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.OnCanceledAndClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the cancel and close event is invoked by a subscribed control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.OnClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the close event is invoked by a subscribed control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.Save">
            <summary>
            Gets or sets the save action.
            <para />
            The format is [controlname].[event]. By default, the <c>Click</c> event is used, thus for
            a button [controlname] is sufficient.
            <para />
            This property is not required, but if it is used, it must be valid otherwise an exception will be thrown.
            </summary>
            <value>The save action.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.SaveAndClose">
            <summary>
            Gets or sets the save and close action.
            <para />
            The format is [controlname].[event]. By default, the <c>Click</c> event is used, thus for
            a button [controlname] is sufficient.
            <para />
            This property is not required, but if it is used, it must be valid otherwise an exception will be thrown.
            </summary>
            <value>The save action.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.Cancel">
            <summary>
            Gets or sets the cancel action.
            <para />
            The format is [controlname].[event]. By default, the <c>Click</c> event is used, thus for
            a button [controlname] is sufficient.
            <para />
            This property is not required, but if it is used, it must be valid otherwise an exception will be thrown.
            </summary>
            <value>The cancel action.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.CancelAndClose">
            <summary>
            Gets or sets the cancel and close action.
            <para />
            The format is [controlname].[event]. By default, the <c>Click</c> event is used, thus for
            a button [controlname] is sufficient.
            <para />
            This property is not required, but if it is used, it must be valid otherwise an exception will be thrown.
            </summary>
            <value>The cancel action.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.Close">
            <summary>
            Gets or sets the close action.
            <para />
            The format is [controlname].[event]. By default, the <c>Click</c> event is used, thus for
            a button [controlname] is sufficient.
            <para />
            This property is not required, but if it is used, it must be valid otherwise an exception will be thrown.
            </summary>
            <value>The cancel action.</value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget">
            <summary>
            Class that parses an event target in the form of [controlname].[event].
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.#ctor(System.Windows.Window,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget"/> class.
            </summary>
            <param name="associatedObject">The associated object.</param>
            <param name="eventTarget">The event target as string representation.</param>
            <remarks>
            If the parsing fails, no exception will be thrown but the <see cref="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.ControlName"/>
            and <see cref="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.EventName"/> will remain empty.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="associatedObject"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="eventTarget"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="associatedObject"/> is not yet loaded.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.OnEvent``1(System.Object,``0)">
            <summary>
            Called when the event on the target occurs.
            </summary>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.CleanUp">
            <summary>
            Cleans up.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.ControlName">
            <summary>
            Gets or sets the name of the control.
            </summary>
            <value>The name of the control.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.EventName">
            <summary>
            Gets or sets the event name.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.Event">
            <summary>
            Occurs when the specified event occurs.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.Page`1">
            <summary>
            Generic implementation of the <see cref="T:System.Windows.Controls.Page"/> class that supports MVVM with Catel.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
        </member>
        <member name="M:Catel.Windows.Controls.Page`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.Page`1"/> class.
            </summary>
            <remarks>
            It is not possible to inject view models.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.Page`1.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Catel.Windows.Controls.Page`1.OnViewModelPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the current <see cref="P:Catel.Windows.Controls.Page`1.ViewModel"/> has changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.Page`1.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.Page`1.DiscardChanges">
            <summary>
            Discards all changes made by this window.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.Page`1.ApplyChanges">
            <summary>
            Applies all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="P:Catel.Windows.Controls.Page`1.Catel#MVVM#IViewModelContainer#ViewModel">
            <summary>
            Gets the view model that is contained by the container.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:Catel.Windows.Controls.Page`1.ViewModel">
            <summary>
            Gets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="E:Catel.Windows.Controls.Page`1.PropertyChanged">
            <summary>
            Occurs when a property on the container has changed.
            </summary>
            <remarks>
            This event makes it possible to externally subscribe to property changes of a <see cref="T:System.Windows.DependencyObject"/>
            (mostly the container of a view model) because the .NET Framework does not allows us to.
            </remarks>
        </member>
        <member name="E:Catel.Windows.Controls.Page`1.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.Page`1.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.Page`1.ViewModelPropertyChanged">
            <summary>
            Occurs when a property on the <see cref="P:Catel.Windows.Controls.Page`1.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.EmptyColumn">
            <summary>
            Control to fill up a column in the <see cref="T:Catel.Windows.Controls.StackGrid"/> control. This control is just a placeholder for a grid cell.
            </summary>
            <example>
            <code>
            <![CDATA[
            <StackGrid>
              <StackGrid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </StackGrid.RowDefinitions>
            
              <StackGrid.ColumnDefinitions>
            	<ColumnDefinition Width="Auto" />
            	<ColumnDefinition Width="*" />
              </StackGrid.ColumnDefinitions>
            
              <!-- Name, will be set to row 0, column 1 and 2 -->
              <Label Content="Name" />
              <TextBox Text="{Bindng Name}" />
            
              <!-- Empty row, will in this case use 2 columns -->
              <EmptyRow />
            
              <!-- Wrappanel, will span 2 columns -->
              <WrapPanel StackGrid.ColumnSpan="2">
                <Button Command="{Binding OK}" />
              </WrapPanel>
            </StackGrid>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.Windows.Controls.EmptyColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.EmptyColumn"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.EmptyRow">
            <summary>
            Control to fill up a row in the <see cref="T:Catel.Windows.Controls.StackGrid"/> control. This control will use an entire row to fill up.
            </summary>
            <example>
            <code>
            <![CDATA[
            <StackGrid>
              <StackGrid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </StackGrid.RowDefinitions>
            
              <StackGrid.ColumnDefinitions>
            	<ColumnDefinition Width="Auto" />
            	<ColumnDefinition Width="*" />
              </StackGrid.ColumnDefinitions>
            
              <!-- Name, will be set to row 0, column 1 and 2 -->
              <Label Content="Name" />
              <TextBox Text="{Bindng Name}" />
            
              <!-- Empty row, will in this case use 2 columns -->
              <EmptyRow />
            
              <!-- Wrappanel, will span 2 columns -->
              <WrapPanel StackGrid.ColumnSpan="2">
                <Button Command="{Binding OK}" />
              </WrapPanel>
            </StackGrid>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.Windows.Controls.EmptyRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.EmptyRow"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.StackGrid">
            <summary>
            A grid-like control that allows a developer to specify the rows and columns, but gives the freedom
            not to define the actual grid and row numbers of the controls inside the <see cref="T:Catel.Windows.Controls.StackGrid"/>.
            <para/>
            The <see cref="T:Catel.Windows.Controls.StackGrid"/> automatically builds up the internal grid.
            </summary>
            <example>
            <code>
            <![CDATA[
            <StackGrid>
              <StackGrid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </StackGrid.RowDefinitions>
            
              <StackGrid.ColumnDefinitions>
            	<ColumnDefinition Width="Auto" />
            	<ColumnDefinition Width="*" />
              </StackGrid.ColumnDefinitions>
            
              <!-- Name, will be set to row 0, column 1 and 2 -->
              <Label Content="Name" />
              <TextBox Text="{Bindng Name}" />
            
              <!-- Empty row -->
              <EmptyRow />
            
              <!-- Wrappanel, will span 2 columns -->
              <WrapPanel StackGrid.ColumnSpan="2">
                <Button Command="{Binding OK}" />
              </WrapPanel>
            </StackGrid>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.StackGrid"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.GetRowSpan(System.Windows.DependencyObject)">
            <summary>
            Gets the row span.
            </summary>
            <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject"/> to get the row span for.</param>
            <returns>The row span value.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.SetRowSpan(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the row span.
            </summary>
            <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject"/> to set the row span for.</param>
            <param name="value">The new row span value.</param>
        </member>
        <member name="F:Catel.Windows.Controls.StackGrid.RowSpanProperty">
            <summary>
            RowSpanProperty
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.OnRowSpanChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Catel.Windows.Controls.StackGrid.RowSpanProperty"/> has changed.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.GetColumnSpan(System.Windows.DependencyObject)">
            <summary>
            Gets the column span.
            </summary>
            <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject"/> to get the column span for.</param>
            <returns>The column span value.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.SetColumnSpan(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the column span.
            </summary>
            <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject"/> to set the column span for.</param>
            <param name="value">The new column span value.</param>
        </member>
        <member name="F:Catel.Windows.Controls.StackGrid.ColumnSpanProperty">
            <summary>
            ColumnSpanProperty
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.OnColumnSpanChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Catel.Windows.Controls.StackGrid.ColumnSpanProperty"/> has changed.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Catel.Windows.Controls.StackGrid.RowDefinitionsProperty">
            <summary>
            RowDefinitions Property
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.StackGrid.ColumnDefinitionsProperty">
            <summary>
            ColumnDefinitions property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.StackGrid.ShowGridLinesProperty">
            <summary>
            ShowGridLines property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.OnShowGridLinesChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the OnShowGridLinesChanged.
            </summary>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.OnDefinitionsCollectionChanged``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs,``0)">
            <summary>
            Raises the DefinitionsCollectionChanged event.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.FinalInitialize">
            <summary>
            Final initialize so the <see cref="T:Catel.Windows.Controls.StackGrid"/> is actually created.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.MoveChildrenToGridChildren">
            <summary>
            Moves the children to grid children.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.SetColumnsAndRows">
            <summary>
            Sets the columns and rows.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"/>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Catel.Windows.Controls.StackGrid.RowDefinitions">
            <summary>
            Gets or sets the row definitions.
            </summary>
            <value>The row definitions.</value>
        </member>
        <member name="P:Catel.Windows.Controls.StackGrid.ColumnDefinitions">
            <summary>
            Gets or sets the column definitions.
            </summary>
            <value>The column definitions.</value>
        </member>
        <member name="P:Catel.Windows.Controls.StackGrid.ShowGridLines">
            <summary>
            Gets or sets a value indicating whether to show grid lines or not.
            </summary>
            <value><c>true</c> if grid lines should be visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.Windows.Controls.UserControl`1">
            <summary>
            <see cref="T:System.Windows.Controls.UserControl"/> that supports MVVM by using a <see cref="T:Catel.MVVM.IViewModel"/> typed parameter.
            If the user control is not constructed with the right view model by the developer, it will try to create
            the view model itself. It does this by keeping an eye on the <c>DataContext</c> property. If
            the property changes, the control will check the type of the DataContext and try to create the view model by using
            the DataContext value as the constructor. If the view model can be constructed, the DataContext of the UserControl will
            be replaced by the view model.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <remarks>
            This control suffers a lot from the bugs, or features "by design" as Microsoft likes to call it, of WPF. Below are the most 
            common issues that this control suffers from:
            <para/>
            1) WPF sometimes invokes the Loaded multiple times, without invoking Unloaded.
            <para/>
            2) The data context cannot be changed before the <c>UserControl.IsLoaded</c> property is true. This means that you will get a lot of binding errors,
               but they are invalid. We think the reason you cannot change the DataContext before the IsLoaded property is true because of performance reasons.
            <para/>
            3) The designer of WPF doesn't allow abstract generic baseclasses. In an ideal situation, this control would be abstract,
               but since there is no danger in making in non-abstract, the addition of designer support wins.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.UserControl`1"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.UserControl`1"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.DiscardChanges">
            <summary>
            Discards all changes made by this window.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.ApplyChanges">
            <summary>
            Applies all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnViewModelChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.UserControl`1.ViewModel"/> has changed.
            </summary>
            <remarks>
            This method does not implement any logic and saves a developer from subscribing/unsubscribing
            to the <see cref="E:Catel.Windows.Controls.UserControl`1.ViewModelChanged"/> event inside the same user control.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnViewModelPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the current <see cref="P:Catel.Windows.Controls.UserControl`1.ViewModel"/> has changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnViewModelClosed(System.Object,Catel.MVVM.ViewModelClosedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.UserControl`1.ViewModel"/> has been closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.Catel#MVVM#IViewModelContainer#ViewModel">
            <summary>
            Gets the view model that is contained by the container.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.ViewModel">
            <summary>
            Gets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.CloseViewModelOnUnloaded">
            <summary>
            Gets or sets a value indicating whether the user control should close any existing
            view model when the control is unloaded from the visual tree.
            <para />
            Set this property to <c>false</c> if a view model should be kept alive and re-used
            for unloading/loading instead of creating a new one.
            <para />
            By default, this value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the view model should be closed when the control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.SupportParentViewModelContainers">
            <summary>
            Gets or sets a value indicating whether parent view model containers are supported. If supported,
            the user control will search for a <see cref="T:System.Windows.DependencyObject"/> that implements the <see cref="T:Catel.MVVM.IViewModelContainer"/>
            interface. During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any parent control implementing the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>false</c>.
            <para/>
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if parent view model containers are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.SkipSearchingForInfoBarMessageControl">
            <summary>
            Gets or sets a value indicating whether to skip the search for an info bar message control. If not skipped,
            the user control will search for a the first <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> that can be found. 
            During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>true</c>.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if the search for an info bar message control should be skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.DisableWhenNoViewModel">
            <summary>
            Gets or sets a value indicating whether the user control should automatically be disabled when there is no
            active view model.
            </summary>
            <value>
            	<c>true</c> if the user control should automatically be disabled when there is no active view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl`1.PropertyChanged">
            <summary>
            Occurs when a property on the container has changed.
            </summary>
            <remarks>
            This event makes it possible to externally subscribe to property changes of a <see cref="T:System.Windows.DependencyObject"/>
            (mostly the container of a view model) because the .NET Framework does not allows us to.
            </remarks>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl`1.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.UserControl`1.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl`1.ViewModelPropertyChanged">
            <summary>
            Occurs when a property on the <see cref="P:Catel.Windows.Controls.UserControl`1.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Command`2">
            <summary>
            Class to implement commands in the <see cref="T:Catel.MVVM.ViewModelBase"/>.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
            <typeparam name="TCanExecuteParameter">The type of the can execute parameter.</typeparam>
        </member>
        <member name="F:Catel.MVVM.Command`2._subscribedEventHandlers">
            <summary>
            List of subscribed event handlers so the commands can be unsubscribed upon disposing.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action{`0},System.Func{`1,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action{`0},System.Func{`1,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action{`0},System.Action,System.Func{`1,System.Boolean},System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="executeWithParameter">The action to execute with parameter.</param>
            <param name="executeWithoutParameter">The action to execute without parameter.</param>
            <param name="canExecuteWithParameter">The function to call to determine wether the command can be executed with parameter.</param>
            <param name="canExecuteWithoutParameter">The function to call to determine wether the command can be executed without parameter.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Catel.MVVM.Command`2"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.CanExecute">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <returns>
            	<c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Command`2.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            <c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Command`2.CanExecute(`1)">
            <summary>
            Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
            	<c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Command`2.Execute">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.Execute(`0)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:Catel.MVVM.Command`2.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.RaiseExecuted(System.Object)">
            <summary>
            Raises the <see cref="E:Catel.MVVM.Command`2.Executed"/> event.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="E:Catel.MVVM.Command`2.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Command`2.Executed">
            <summary>
            Occurs when the command has just been executed successfully.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Command`2.Tag">
            <summary>
            Gets the tag for this command. A tag is a way to link any object to a command so you can use your own
            methods to recognize the commands, for example by ID or string.
            <para/>
            By default, the value is <c>null</c>.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Catel.MVVM.Command`1">
            <summary>
            Implements the <see cref="T:Catel.MVVM.Command`2"/> class with only the <typeparamref name="TExecuteParameter"/> as generic type.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.Command">
            <summary>
            Implements the <see cref="T:Catel.MVVM.Command`2"/> class with <see cref="T:System.Object"/> as generic types.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
        </member>
        <member name="M:Catel.MVVM.Command.#ctor(System.Action,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
        </member>
        <member name="M:Catel.MVVM.Command.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.Services.MessageService">
            <summary>
            Message service that implements the <see cref="T:Catel.MVVM.Services.IMessageService"/> by using the <see cref="T:System.Windows.MessageBox"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.TranslateMessageBoxResult(System.Windows.MessageBoxResult)">
            <summary>
            Translates the message box result.
            </summary>
            <param name="result">The result.</param>
            <returns>
            Corresponding <see cref="T:Catel.MVVM.Services.MessageResult"/>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.TranslateMessageImage(Catel.MVVM.Services.MessageImage)">
            <summary>
            Translates the message image.
            </summary>
            <param name="image">The image.</param>
            <returns>
            Corresponding <see cref="T:System.Windows.MessageBoxImage"/>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.TranslateMessageButton(Catel.MVVM.Services.MessageButton)">
            <summary>
            Translates the message button.
            </summary>
            <param name="button">The button.</param>
            <returns>
            Corresponding <see cref="T:System.Windows.MessageBoxButton"/>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowError(System.Exception)">
            <summary>
            Shows an error message to the user.
            </summary>
            <param name="exception">The exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowError(System.Exception,System.Action)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="exception">The exception.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowError(System.String)">
            <summary>
            Shows an error message to the user.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowError(System.String,System.Action)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowError(System.String,System.String)">
            <summary>
            Shows an error message to the user.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowError(System.String,System.String,System.Action)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowWarning(System.String)">
            <summary>
            Shows a warning message to the user.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowWarning(System.String,System.Action)">
            <summary>
            Shows a warning message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowWarning(System.String,System.String)">
            <summary>
            Shows a warning message to the user.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowWarning(System.String,System.String,System.Action)">
            <summary>
            Shows a warning message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowInformation(System.String)">
            <summary>
            Shows an information message to the user.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowInformation(System.String,System.Action)">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowInformation(System.String,System.String)">
            <summary>
            Shows an information message to the user.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowInformation(System.String,System.String,System.Action)">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.Show(System.String)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.Show(System.String,System.Action{Catel.MVVM.Services.MessageResult})">
            <summary>
            Shows the specified message and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="completedCallback">The callback to invoke when the message is completed which contains the result. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.Show(System.String,System.String)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.Show(System.String,System.String,System.Action{Catel.MVVM.Services.MessageResult})">
            <summary>
            Shows the specified message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton,System.Action{Catel.MVVM.Services.MessageResult})">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton,Catel.MVVM.Services.MessageImage)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton,Catel.MVVM.Services.MessageImage,System.Action{Catel.MVVM.Services.MessageResult})">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Catel.MVVM.Services.OpenFileService">
            <summary>
            Service to open files.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.OpenFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns><c>true</c> if a file is selected; otherwise <c>false</c>.</returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.OpenFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.OpenFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.OpenFileService.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Catel.MVVM.Services.OpenFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Catel.MVVM.Services.PleaseWaitService">
            <summary>
            Please wait service to show a please wait window during background activities. This service uses the <see cref="T:Catel.Windows.PleaseWaitWindow"/>
            for the actual displaying of the please wait status to the user.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Show">
            <summary>
            Shows the please wait window with the default status text.
            </summary>
            <remarks>
            When this method is used, the <see cref="M:Catel.MVVM.Services.PleaseWaitService.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status.</param>
            <remarks>
            When this method is used, the <see cref="M:Catel.MVVM.Services.PleaseWaitService.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work 
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.UpdateStatus(System.String)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.UpdateStatus(System.Int32,System.Int32)">
            <summary>
            Updates the status and shows a progress bar with the default status text. The percentage will be automatically calculated.
            <para/>
            The busy indicator will automatically hide when the <paramref name="totalItems"/> is larger than <paramref name="currentItem"/>.
            </summary>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="currentItem"/> is smaller than zero.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.UpdateStatus(System.Int32,System.Int32,System.String)">
            <summary>
            Updates the status and shows a progress bar with the specified status text. The percentage will be automatically calculated.
            <para/>
            The busy indicator will automatically hide when the <paramref name="totalItems"/> is larger than <paramref name="currentItem"/>.
            <para/>
            When providing the <paramref name="statusFormat"/>, it is possible to use <c>{0}</c> (represents current item) and
            <c>{1}</c> (represents total items).
            </summary>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
            <param name="statusFormat">The status format. Can be empty, but not <c>null</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="currentItem"/> is smaller than zero.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="statusFormat"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Hide">
            <summary>
            Hides this please wait window.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Push">
            <summary>
            Increases the number of clients that show the please wait window. The implementing class 
            is responsible for holding a counter internally which a call to this method will increase.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            decrease the counter, make a call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Show"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Push(System.String)">
            <summary>
            Increases the number of clients that show the please wait window. The implementing class 
            is responsible for holding a counter internally which a call to this method will increase.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            decrease the counter, make a call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Show"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Pop">
            <summary>
            Decreases the number of clients that show the please wait window. The implementing class 
            is responsible for holding a counter internally which a call to this method will decrease.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            increase the counter, make a call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Show"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.SaveFileService">
            <summary>
            Service to save files.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.SaveFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns><c>true</c> if a file is selected; otherwise <c>false</c>.</returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.SaveFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.SaveFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.SaveFileService.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Catel.MVVM.Services.SaveFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Catel.Windows.Controls.InfoBarMessageControlMode">
            <summary>
            The display mode for the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControlMode.Inline">
            <summary>
            Displays the control inline, which means all controls below are moved down a bit when the
            control becomes visible.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControlMode.Overlay">
            <summary>
            Displays the control as an overlay, which might lead to overlapping of existing controls.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.InfoBarMessageControl">
            <summary>
            Control for displaying messages to the user.
            </summary>
            <remarks>
            A long, long, long time ago, the messages were hold in a dependency property (DP). However, even though DP values are
            not static, several instances that were open at the same time were still clearing eachother values (thus it seemed the
            DP behaves like it's a static member). Therefore, the messages are now hold in a field, and all problems are now gone.
            <para />
            And the control lived happily ever after.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.ElementMessageBar">
            <summary>
            The bar that will show the initial message bar.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.ModeProperty">
            <summary>
            DependencyProperty definition as the backing store for Mode.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.TextProperty">
            <summary>
            DependencyProperty definition as the backing store for Text.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.InfoMessageProperty">
            <summary>
            DependencyProperty definition as the backing store for InfoMessage.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.MessageCountProperty">
            <summary>
            Definition of the dependency property is private.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnModeChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.InfoBarMessageControl.Mode"/> property has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.SubscribeToEvents">
            <summary>
            Subscribes to events.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.UnsubscribeFromEvents">
            <summary>
            Unsubscribes from events.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.ClearObjectMessages(System.Object)">
            <summary>
            Clears the object messages for the specified binding object.
            </summary>
            <param name="bindingObject">The binding object.</param>
            <remarks>
            This method is implemented because of the DataContext issue (DataContext cannot be changed before a
            user control is loaded, and therefore might be binding to the wrong object).
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.IgnoreObject(System.Object)">
            <summary>
            Adds an object to the ignore list so this control does not show messages for the specified object any longer.
            </summary>
            <param name="bindingObject">The binding object.</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnInfoBarMessageErrorValidation(System.Object,System.Windows.Controls.ValidationErrorEventArgs)">
            <summary>
            Handling data errors.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnInfoBarMessageValidation(System.Object,Catel.Windows.Controls.ValidationEventArgs)">
            <summary>
            Handling business data errors.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.GetBindingObject(System.Object)">
            <summary>
            Gets the binding object.
            </summary>
            <param name="bindingObject">The binding object.</param>
            <returns>object from the binding.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.ProcessValidationMessage(System.Object,System.String,Catel.Windows.Controls.ValidationEventAction,Catel.Windows.Controls.ValidationType)">
            <summary>
            Process an validation message.
            </summary>
            <param name="bindingObject">The binding object which will be used as key in dictionary with error messages. Allowed to be <c>null</c> if <see cref="F:Catel.Windows.Controls.ValidationEventAction.ClearAll"/>.</param>
            <param name="message">The actual warning or error message.</param>
            <param name="action">An error event action. See <see cref="T:System.Windows.Controls.ValidationErrorEventAction"/>.</param>
            <param name="type">The validation type.</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.UpdateMessages">
            <summary>
            Update the content of the control with the found warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.UpdatesMessageCollection(System.Collections.ObjectModel.ObservableCollection{System.String},System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
            <summary>
            Updates a message collection by adding new messages and removing old ones that no longer exist.
            </summary>
            <param name="messageCollection">The message collection.</param>
            <param name="messageSource">The message source.</param>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.Mode">
            <summary>
            Gets or sets the mode in which the control is displayed.
            </summary>
            <value>The mode in which the control is displayed.</value>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.Text">
            <summary>
            Gets or sets the text to display when there are warnings and/or messages.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.InfoMessage">
            <summary>
            Info message for the info bar.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.MessageCount">
            <summary>
            Gets or sets MessageCount.
            </summary>
            <remarks>
            Wrapper for the MessageCount dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.WarningMessageCollection">
            <summary>
            Gets the warning message collection.
            </summary>
            <value>The warning message collection.</value>
            <remarks>
            This property is not defined as dependency property, since it seems to cause some issues when several windows/controls with
            this control are open at the same time (dependency properties seem to behave static, but they shouldn't).
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.ErrorMessageCollection">
            <summary>
            Gets the error message collection.
            </summary>
            <value>The error message collection.</value>
            <remarks>
            This property is not defined as dependency property, since it seems to cause some issues when several windows/controls with
            this control are open at the same time (dependency properties seem to behave static, but they shouldn't).
            </remarks>
        </member>
        <member name="T:Catel.Windows.Controls.RichToolTip">
            <summary>
            A kind-of Tooltip implementation that stays open once element is hovered and the content inside is responsive
            <para />
            It corresponds to most of the TooltipService attached properties so use them as you wish
            <para />
            Usage: (Like Tooltip)
            <![CDATA[
            <Control ToolTipService.Placement="Right">
                <xmlns-pfx:RichToolTip.PopupContent>
                    <TextBlock Text="This will be displayed in the popup" />
                </xmlns-pfx:RichToolTip.PopupContent>
            </Control>
            
            <Control ToolTipService.Placement="Right">
                <xmlns-pfx:RichToolTip.PopupContent>
                    <RichToolTip Placement="..." PlacementTarget="..." HorizontalOffset=".." and so on>
                        <TextBlock Text="This will be displayed in the popup" />
                    </RichToolTip>
                </xmlns-pfx:RichToolTip.PopupContent>
            </Control>
            ]]>
            <para />
            Known Issues:
            1 - I didn't have the time nor the strength to care about repositioning. I simply hide the popup whenever it would need repositioning. (Window movement, etc..) But it's ok since it's the default behavior of popup overall.
            2 - XBap mode sets transparency through a hack! supported only in full trust.
            3 - In XBap mode, moving the mouse slowly towards the popup will cause it to hide
            4 - In XBap mode, moving the mouse over the element shows the tooltip even when the browser isn't the active window
            </summary>
            <remarks>
            Originally found at http://blogs.microsoft.co.il/blogs/zuker/archive/2009/01/18/wpf-popups-and-tooltip-behavior-solution.aspx
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.Windows.Controls.RichToolTip"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.RichToolTip"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.RichToolTip"/> class.
            </summary>
            <param name="relatedObject">The related object.</param>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.Load(System.Windows.UIElement)">
            <summary>
            Loads the specified related object.
            </summary>
            <param name="relatedObject">The related object.</param>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.CloseCommand">
            <summary>
            Close command.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.PlacementProperty">
            <summary>
            Placement property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.PlacementTargetProperty">
            <summary>
            Placement target property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.PlacementRectangleProperty">
            <summary>
            Placement rectangle property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.HorizontalOffsetProperty">
            <summary>
            Horizontal offset property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.VerticalOffsetProperty">
            <summary>
            Vertical offset property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.IsOpenProperty">
            <summary>
            IsOpen property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.GetHideOnClick(System.Windows.DependencyObject)">
            <summary>
            Gets the hide on click.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.SetHideOnClick(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the hide on click.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.HideOnClickProperty">
            <summary>
            Hide on click property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.GetPopupContent(System.Windows.DependencyObject)">
            <summary>
            Gets the content of the popup.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.SetPopupContent(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the content of the popup.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.PopupContentProperty">
            <summary>
            Popup content property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.Show(System.Boolean)">
            <summary>
            Shows the specified animate.
            </summary>
            <param name="animate">if set to <c>true</c> [animate].</param>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.Hide(System.Boolean)">
            <summary>
            Hides the specified animate.
            </summary>
            <param name="animate">if set to <c>true</c> [animate].</param>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.RelatedObject">
            <summary>
            Gets the related object.
            </summary>
            <value>The related object.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.EnableAnimation">
            <summary>
            Gets or sets a value indicating whether to enable animation or not
            </summary>
            <value><c>true</c> if animation should be enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.Placement">
            <summary>
            Gets or sets the placement.
            </summary>
            <value>The placement.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.PlacementTarget">
            <summary>
            Gets or sets the placement target.
            </summary>
            <value>The placement target.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.PlacementRectangle">
            <summary>
            Gets or sets the placement rectangle.
            </summary>
            <value>The placement rectangle.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset.
            </summary>
            <value>The horizontal offset.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.VerticalOffset">
            <summary>
            Gets or sets the vertical offset.
            </summary>
            <value>The vertical offset.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.IsOpen">
            <summary>
            Gets or sets a value indicating whether this instance is open.
            </summary>
            <value><c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.Windows.Controls.ScrollViewerProperties">
            <summary>
            Container class for custom Attached properties for ScrollViewer.
            </summary>
            <remarks>
            Source : http://serialseb.blogspot.com/2007/09/wpf-tips-6-preventing-scrollviewer-from.html
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.ScrollViewerProperties.GetFixScrolling(System.Windows.DependencyObject)">
            <summary>
            Gets the fix scrolling.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Controls.ScrollViewerProperties.SetFixScrolling(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the fix scrolling.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="F:Catel.Windows.Controls.ScrollViewerProperties.FixScrollingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ScrollViewerProperties.OnFixScrollingPropertyChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [fix scrolling property changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.ScrollViewerProperties.HandlePreviewMouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles the preview mouse wheel.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationType">
            <summary>
            Business validation type.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationType.Warning">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationType.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationEventAction">
            <summary>
            Validation event action.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.Added">
            <summary>
            Added.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.Removed">
            <summary>
            Removed.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.Refresh">
            <summary>
            Refresh the validation, don't add or remove.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.ClearAll">
            <summary>
            All validation info of the specified object should be cleared.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.WarningAndErrorValidator">
            <summary>
            Control for adding business rule validation to the form. Assign a value or binding to source for the business object or 
            collection of bussiness objects to validate.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.WarningAndErrorValidator._objectValidation">
            <summary>
            List of objects that are currently being validated. 
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.WarningAndErrorValidator"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.WarningAndErrorValidator.SourceProperty">
            <summary>
            DependencyProperty definition as the backing store for Source.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.OnLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the control is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.OnUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the control is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.Initialize">
            <summary>
            Initializes this instance. Loads all the errors and warnings that were added when the control was not yet loaded.s
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CleanUp">
            <summary>
            Cleans up.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.UpdateSource(System.Object,System.Object)">
            <summary>
            Updates the source.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.AddObjectsToWatchList(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Adds an <see cref="T:System.Collections.IEnumerable"/> of objects to the watch list.
            </summary>
            <param name="values">The values to add to the watch list.</param>
            <param name="parentEnumerable">The parent enumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="values"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.AddObjectToWatchList(System.Object)">
            <summary>
            Adds the object to the watch list.
            </summary>
            <param name="value">The object to add to the watch list.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.AddObjectToWatchList(System.Object,System.Collections.IEnumerable)">
            <summary>
            Adds the object to the watch list.
            </summary>
            <param name="value">The object to add to the watch list.</param>
            <param name="parentEnumerable">The parent enumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RemoveObjectsFromWatchList(System.Collections.IEnumerable)">
            <summary>
            Removes an <see cref="T:System.Collections.IEnumerable"/> of objects from the watch list.
            </summary>
            <param name="values">The values to remove from the watch list.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RemoveObjectFromWatchList(System.Object)">
            <summary>
            Removes the object from watch list.
            </summary>
            <param name="value">The object to remove from the watch list.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CheckObjectValidation(System.Object,System.String,System.Collections.IEnumerable)">
            <summary>
            Checks a entity that either implements the <see cref="T:System.ComponentModel.IDataWarningInfo"/> or <see cref="T:System.ComponentModel.IDataErrorInfo"/> on warnings and errors.
            </summary>
            <param name="value">The object to check.</param>
            <param name="propertyChanged">The propery that has been changed. <c>null</c> if no specific property has changed.</param>
            <param name="parentEnumerable">The parent enumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
            <remarks>
            Internally calls the generic method with the same name.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CheckObjectValidationForFields(System.Object,System.String,System.Collections.ObjectModel.ObservableCollection{Catel.Windows.Controls.FieldWarningOrErrorInfo},Catel.Windows.Controls.ValidationType)">
            <summary>
            Checks the object validation for fields warnings or errors.
            </summary>
            <param name="value">The value.</param>
            <param name="propertyChanged">The property changed.</param>
            <param name="infoList">The info list containing the warning or error info.</param>
            <param name="validationType">Type of the validation.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CheckFieldWarningsOrErrors(System.Object,System.String,Catel.Windows.Controls.ValidationType)">
            <summary>
            Checks the field warnings or errors.
            </summary>
            <param name="value">The value.</param>
            <param name="propertyChanged">The property changed.</param>
            <param name="validationType">Type of the validation.</param>
            <returns>
            List of warnings or errors returned by the object.
            </returns>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.GetWarningOrError(System.Object,Catel.Windows.Controls.ValidationType)">
            <summary>
            Gets the warning or error message for the object.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>
            Warning or error message formatted for the object.
            </returns>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForAllErrorsAndWarnings">
            <summary>
            Raises the events for all errors and warnings.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForDifferences(System.Object,Catel.Windows.Controls.ValidationData,Catel.Windows.Controls.ValidationData)">
            <summary>
            Raises the events for differences.
            </summary>
            <param name="value">The value.</param>
            <param name="oldValidationData">The old validation data.</param>
            <param name="newValidationData">The new validation data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForDifferencesInFields(System.Object,System.Collections.Generic.ICollection{Catel.Windows.Controls.FieldWarningOrErrorInfo},System.Collections.Generic.ICollection{Catel.Windows.Controls.FieldWarningOrErrorInfo},Catel.Windows.Controls.ValidationType)">
            <summary>
            Raises the events for differences in fields.
            </summary>
            <param name="value">The value.</param>
            <param name="oldFieldData">The old field data.</param>
            <param name="newFieldData">The new field data.</param>
            <param name="validationType">Type of the validation.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForDifferencesInBusiness(System.Object,System.Collections.Generic.ICollection{Catel.Windows.Controls.BusinessWarningOrErrorInfo},System.Collections.Generic.ICollection{Catel.Windows.Controls.BusinessWarningOrErrorInfo},Catel.Windows.Controls.ValidationType)">
            <summary>
            Raises the events for differences in business.
            </summary>
            <param name="value">The value.</param>
            <param name="oldBusinessData">The old business data.</param>
            <param name="newBusinessData">The new business data.</param>
            <param name="validationType">Type of the validation.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseBusinessValidationWarningOrError(System.Object,System.String,Catel.Windows.Controls.ValidationEventAction,Catel.Windows.Controls.ValidationType)">
            <summary>
            Raises an validation warning or error event.
            </summary>
            <param name="value">The value.</param>
            <param name="message">A message.</param>
            <param name="action">A action for handling the error event.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.iNotifyPropertyChanged_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handling changes of properties within entity.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.iNotifyCollectionChanged_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handling change of collection updating connections and error messages.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="P:Catel.Windows.Controls.WarningAndErrorValidator.Source">
            <summary>
            Source for validation. This can be an business object which implements <see cref="T:System.ComponentModel.IDataErrorInfo"/> 
            and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> or an <see cref="T:System.Collections.IEnumerable"/> containing bussiness objects.
            In case of a <see cref="T:System.Collections.IEnumerable"/> then the content should be static or the interface <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <remarks>
            Wrapper for the Source dependency property.
            </remarks>
        </member>
        <member name="E:Catel.Windows.Controls.WarningAndErrorValidator.Validation">
            <summary>
            Occurs when validation is triggered.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationData">
            <summary>
            Class containing all validation info (thus warnings and errors) about a specific object.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationData.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.ValidationData"/> class.
            </summary>
            <param name="parentEnumerable">The parent ParentEnumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationData.ClearWarningsAndErrors">
            <summary>
            Clears the warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationData.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.ParentEnumerable">
            <summary>
            Gets or sets the parent enumerable.
            </summary>
            <value>The parent enumerable.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.FieldWarnings">
            <summary>
            Gets the field warnings.
            </summary>
            <value>The field warnings.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.BusinessWarnings">
            <summary>
            Gets the business warnings.
            </summary>
            <value>The business warnings.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.FieldErrors">
            <summary>
            Gets the field errors.
            </summary>
            <value>The field errors.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.BusinessErrors">
            <summary>
            Gets the business errors.
            </summary>
            <value>The business errors.</value>
        </member>
        <member name="T:Catel.Windows.Controls.BusinessWarningOrErrorInfo">
            <summary>
            Information class about business warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessWarningOrErrorInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.BusinessWarningOrErrorInfo"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessWarningOrErrorInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessWarningOrErrorInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.BusinessWarningOrErrorInfo.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Catel.Windows.Controls.FieldWarningOrErrorInfo">
            <summary>
            Information class about field warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.FieldWarningOrErrorInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.FieldWarningOrErrorInfo"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.Windows.Controls.FieldWarningOrErrorInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Catel.Windows.Controls.FieldWarningOrErrorInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.FieldWarningOrErrorInfo.Field">
            <summary>
            Gets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:Catel.Windows.Controls.FieldWarningOrErrorInfo.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationEventArgs">
            <summary>
            Event arguments for event <see cref="T:Catel.Windows.Controls.WarningAndErrorValidator"/> Validation.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationEventArgs.#ctor(System.Object,System.String,Catel.Windows.Controls.ValidationEventAction,Catel.Windows.Controls.ValidationType)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.ValidationEventArgs"/> class.
            </summary>
            <param name="value">The value that contains the warning or error.</param>
            <param name="message">The actual warning or error message.</param>
            <param name="action">The action of the validation event.</param>
            <param name="type">The type of validation.</param>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Value">
            <summary>
            Gets the value that contains the warning or error.
            </summary>
            <value>The value that contains the warning or error.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Message">
            <summary>
            Gets the actual warning or error message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Action">
            <summary>
            A action for handling event.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Type">
            <summary>
            Gets the type of the validation.
            </summary>
            <value>The type of the validation.</value>
        </member>
        <member name="T:Catel.Windows.Data.BindingEvaluator">
            <summary>
            Class to help evaluate bindings at runtime.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.BindingEvaluator.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.BindingEvaluator"/> class.
            </summary>
            <param name="dataContext">The data context.</param>
        </member>
        <member name="M:Catel.Windows.Data.BindingEvaluator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.BindingEvaluator"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Data.BindingEvaluator.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Catel.Windows.Data.Converters.AreEqualMultiValueConverter">
            <summary>
            Converts a comparison of 2 bindings to a boolean whether the 
            objects are equal or not.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.AreEqualMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the comparison of 2 values to a boolean.
            </summary>
            <param name="values">Values to convert. Only 2 values are supported.</param>
            <param name="targetType">Not supported.</param>
            <param name="parameter">Not supported.</param>
            <param name="culture">Not supported.</param>
            <returns>True if the values are equal, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.AreEqualMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not supported.
            </summary>
            <param name="value">Not supported.</param>
            <param name="targetTypes">Not supported.</param>
            <param name="parameter">Not supported.</param>
            <param name="culture">Not supported.</param>
            <returns>Not supported.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToGrayscaleConverter">
            <summary>
            Converts a boolean to a grayscale saturation value. If the input is <c>false</c>, this converter will
            return <c>0</c>, otherwise <c>1</c>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToGrayscaleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToGrayscaleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToOppositeBooleanConverter">
            <summary>
            Convert a value to it's inverted value.
            </summary>
            <remarks>Currently only values of type bool are accepted.</remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToOppositeBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts value to the inverted value.
            </summary>
            <param name="value">A value, currently only bool supported.</param>
            <param name="targetType">Currently only bool supported.</param>
            <param name="parameter">Not in use.</param>
            <param name="culture">Not in use.</param>
            <returns>The inverted value.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToOppositeBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts value back, simply inverts again.
            </summary>
            <param name="value">A value, currently only bool supported.</param>
            <param name="targetType">Currently only bool supported.</param>
            <param name="parameter">Not in use.</param>
            <param name="culture">Not in use.</param>
            <returns>The inverted value.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode">
            <summary>
            Available modes for the <see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverter"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.BooleanToTextConverterMode.YesNo">
            <summary>
            True becomes <c>Yes</c>, false becomes <c>No</c>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.BooleanToTextConverterMode.X">
            <summary>
            True becomes <c>x</c>, false becomes <c></c> (thus empty).
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToTextConverter">
            <summary>
            BooleanToTextConverter.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.BooleanToTextConverter.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a boolean value to text.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter"><see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode"/>.</param>
            <param name="culture">Not used.</param>
            <returns>Text presentation of the boolean value.</returns>
            <remarks>
            If the parameter is invalid, or the method fails to parse the parameter, <see cref="F:Catel.Windows.Data.Converters.BooleanToTextConverterMode.YesNo"/>
            will be used to convert the value.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToTextConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not supported.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToTextConverter.ParseMode(System.String)">
            <summary>
            Parses the parameter and returns a <see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode"/> that represents the parameter. 
            </summary>
            <param name="parameter"><see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode"/> as text.</param>
            <returns><see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode"/> as it was passed as a string.</returns>
            <remarks>
            If the parameter is invalid, or the method fails to parse the parameter, <see cref="F:Catel.Windows.Data.Converters.BooleanToTextConverterMode.YesNo"/>
            will be returned as a default value.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter">
            <summary>
            Convert from bool to <see cref="T:System.Windows.Visibility" /> and back.
            The bool value true will be converted to Visibility.Visible.
            The bool value false will be converted to Visibility.Collapsed.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.VisibilityConverterBase">
            <summary>
            A base class that makes it easier to create values to visibility converters.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.VisibilityConverterBase.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.VisibilityConverterBase"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.VisibilityConverterBase.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.VisibilityConverterBase.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.VisibilityConverterBase.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <remarks>
            By default, this method does nothing.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Data.Converters.VisibilityConverterBase.NotVisibleVisibility">
            <summary>
            Gets the <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.
            </summary>
            <value>The not visible visibility.</value>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert Visibility back to bool.
            </summary>
            <param name="value">A value. Only value of type <see cref="T:System.Windows.Visibility" /> is supported,</param>
            <param name="targetType">A targettype, currently not used.</param>
            <param name="parameter">A parameter value, currently not used.</param>
            <param name="culture">A culture, currently not used.</param>
            <returns>
            When value is Visibility.Visible then true else false.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToHidingVisibilityConverter">
            <summary>
            Convert from bool to <see cref="T:System.Windows.Visibility" /> and back.
            The bool value true will be converted to Visibility.Visible.
            The bool value false will be converted to Visibility.Hidden.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToHidingVisibilityConverter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ColorToBrushConverter">
            <summary>
            ColorToBrushConverter
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ContainsItemsConverter">
            <summary>
            Converter that converts whether a collection contains items or not.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ContainsItemsConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the count of a collection to true or false, depending on whether the collection contains items.
            </summary>
            <param name="value">Values to check for. Both collections and arrays are supported.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
            <returns>True when at least 1 item is inside the collection or array, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ContainsItemsConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <remarks>
            This method is not supported.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.CountCollapsedConverter">
            <summary>
            Convert for auto collapsing of control depending on given count.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CountCollapsedConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.CountCollapsedConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CountCollapsedConverter.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.CountCollapsedConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CountCollapsedConverter.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.CountHiddenConverter">
            <summary>
            Convert for auto hiding of control depending on given count.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CountHiddenConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.CountHiddenConverter"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter">
            <summary>
            Convert from string to <see cref="T:System.Windows.Visibility"/>. 
            If the string is not null or empty, Visibility.Visible will be returned. 
            If the string is null or empty, Visibility.Collapsed will be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.EmptyStringToHidingVisibilityConverter">
            <summary>
            Convert from string to <see cref="T:System.Windows.Visibility"/>. 
            If the string is not null or empty, Visibility.Visible will be returned. 
            If the string is null or empty, Visibility.Hidden will be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.EmptyStringToHidingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.EmptyStringToHidingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.FormattingConverter">
            <summary>
            Converter for formatting short date values.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.FormattingConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.FormattingConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.FormattingConverter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.FormattingConverter"/> class.
            </summary>
            <param name="defaultFormatString">A default format string.</param>
        </member>
        <member name="M:Catel.Windows.Data.Converters.FormattingConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert to formatted string.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Format string.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.FormattingConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Parameter.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
            <remarks>We don't intend this to ever be called.</remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.GetFirstValidationErrorConverter">
            <summary>
            Converts a collection containing <see cref="T:System.Windows.Controls.ValidationError"/> objects to return the first error
            or an empty string in case there are no errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.GetFirstValidationErrorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a collection containing <see cref="T:System.Windows.Controls.ValidationError"/> objects to return the first error
            or an empty string in case there are no errors.
            </summary>
            <param name="value">Values to check for. Both collections and arrays are supported.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
            <returns>String containing the first error or <see cref="F:System.String.Empty"/> in case there are not errors.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.GetFirstValidationErrorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method isn't supported.
            </summary>
            <param name="value">Not used.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
            <returns>Always null.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ConverterHelper">
            <summary>
            Converter helper class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.ConverterHelper.DoNothingBindingValue">
            <summary>
            The generic <c>DoNothing</c> value, compatible with WPF and Silverlight.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.IsSelectedConverter">
            <summary>
            Converts a selected value to either true of false.
            </summary>
            <remarks>
            This converter is very usefull when a mutual exclusive selection must be made
            Original code found at http://geekswithblogs.net/claraoscura/archive/2008/10/17/125901.aspx
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IsSelectedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IsSelectedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.IsSelectedValueConverter">
            <summary>
            Converts a selected value to either true of false.
            </summary>
            <remarks>
            This converter is very usefull when a mutual exclusive selection must be made
            Original code found at http://geekswithblogs.net/claraoscura/archive/2008/10/17/125901.aspx
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IsSelectedValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IsSelectedValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.MethodToValueConverter">
            <summary>
            Converter to convert the result of a method to a value. This makes it possible to bind to a method.
            </summary>
            <example>
            {Binding MyObject, Converter={StaticResource MethodToValueConverter}, ConverterParameter='MyMethod'}
            </example>
            <remarks>
            Code originally comes from http://stackoverflow.com/questions/502250/bind-to-a-method-in-wpf.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.MethodToValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.MethodToValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.MultiplyConverter">
            <summary>
            Calculate the product of given value and factor in parameter.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.MultiplyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Calulate the product of given value and factor in parameter.
            </summary>
            <param name="value">Base value.</param>
            <param name="targetType">Not used, supports now int and double.</param>
            <param name="parameter">Factor used for multiply (always double).</param>
            <param name="culture">Not used.</param>
            <returns>Product of specified values.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.MultiplyConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Calculate value back.
            </summary>
            <param name="value">Base value.</param>
            <param name="targetType">Not used, supports now int and double.</param>
            <param name="parameter">Factor used for multiply (always double).</param>
            <param name="culture">Not used.</param>
            <returns>Original value.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.NullableValueConverter">
            <summary>
            Converts a value to a representive value for nullable.
            </summary>
            <remarks>Resolves problem with databinding with nullables. When textbox hasn't a value then null is expected as return value.</remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.NullableValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert to targettype.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type (only types with standard conversion are supported, System.Convert.ChangeType is used for conversion).</param>
            <param name="parameter">Parameter.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.NullableValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back to nullable object.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type (only types with standard conversion are supported, System.Convert.ChangeType is used for conversion).</param>
            <param name="parameter">Parameter.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ReferenceToBooleanConverter">
            <summary>
            Implementation of class ReferenceToBooleanConverter
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert an object reference to a boolean value.
            </summary>
            <param name="value">The object reference to evaluate.</param>
            <param name="targetType">A targettype, currently not used.</param>
            <param name="parameter">A additional parameter</param>
            <param name="culture">A culture, currently not used.</param>
            <returns>
            When <paramref name="value"/> is not null the method returns true else false.
            Unless the passed <paramref name="parameter"/> parameter is true, then the
            output is inverted; meaning when <paramref name="value"/> is null the method
            returns true else false.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert nothing!
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">A targettype, currently not used.</param>
            <param name="parameter">A parameter value, currently not used.</param>
            <param name="culture">A culture, currently not used.</param>
            <returns>Nothing, only throws an exception.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter">
            <summary>
            Convert from reference to <see cref="T:System.Windows.Visibility"/>. 
            If the reference contains a value, Visibility.Visible will be returned. 
            If the reference is null, Visibility.Collapsed will be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ReferenceToHidingVisibilityConverter">
            <summary>
            Convert from reference to <see cref="T:System.Windows.Visibility"/>. 
            If the reference contains a value, Visibility.Visible will be returned. 
            If the reference is null, Visibility.Hidden will be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToHidingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ReferenceToHidingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.RoutedUICommandToContentConverter">
            <summary>
            Converts the inputgestures of the routedUICommand to the Content text.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.RoutedUICommandToContentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Takes the text representation of the Command
            </summary>
            <param name="value">The routedUICommand</param>
            <param name="targetType">The type of the binding target (string)</param>
            <param name="parameter">Any string content that can be displayed before the shortcut</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            The command text. If there are no inputgestures, it returns an empty string
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.RoutedUICommandToContentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <remarks>
            This method is currently not supported.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.RoutedUICommandToToolTipConverter">
            <summary>
            Converts the inputgestures of the routedUICommand to a tooltip text, when they're available.
            This increases the discoverability of the keyboard-shortcuts for the users.
            for instance: 
            with parameter: "Gereed (Ctrl + Return)"
            without parameter: "(Ctrl + Return)"
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.RoutedUICommandToToolTipConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the inputGestures into a string representation
            </summary>
            <param name="value">The routedUICommand</param>
            <param name="targetType">The type of the binding target (string)</param>
            <param name="parameter">Any string content that can be displayed before the shortcut</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            The tooltip text. If there are no inputgestures, it returns an empty string
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.RoutedUICommandToToolTipConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <remarks>
            This method is currently not supported.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ShortDateFormattingConverter">
            <summary>
            ShortDateFormattingConverter
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ShortDateFormattingConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ShortDateFormattingConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ShortDateFormattingConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Parameter.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
            <remarks>We don't intend this to ever be called.</remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.StringToIntConverter">
            <summary>
            Convert string value to int.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.StringToIntConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a string to int value. 
            </summary>
            <param name="value">string are supported.</param>
            <param name="targetType">Only int? is supported.</param>
            <param name="parameter">Not supported.</param>
            <param name="culture">Not supported.</param>
            <returns>When value is not an int the targetValue will be null on construction.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.StringToIntConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method isn't supported.
            </summary>
            <param name="value">Not used.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
            <returns>Always null.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ValueConverterGroup">
            <summary>
            A value converter which contains a list of IValueConverters and invokes their Convert or ConvertBack methods
            in the order that they exist in the list.  The output of one converter is piped into the next converter
            allowing for modular value converters to be chained together.  If the ConvertBack method is invoked, the
            value converters are executed in reverse order (highest to lowest index).  Do not leave an element in the
            Converters property collection null, every element must reference a valid IValueConverter instance. If a
            value converter's type is not decorated with the ValueConversionAttribute, an InvalidOperationException will be
            thrown when the converter is added to the Converters collection.
            
            Known limitations: the supplied parameter is used for ALL! converters.
            </summary>
            <remarks>
            Original source: http://www.codeproject.com/KB/WPF/PipingValueConverters_WPF.aspx
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ValueConverterGroup"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.System#Windows#Data#IValueConverter#Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.System#Windows#Data#IValueConverter#ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.GetTargetType(System.Int32,System.Type,System.Boolean)">
            <summary>
            Returns the target type for a conversion operation.
            </summary>
            <param name="converterIndex">The index of the current converter about to be executed.</param>
            <param name="finalTargetType">The 'targetType' argument passed into the conversion method.</param>
            <param name="convert">Pass true if calling from the Convert method, or false if calling from ConvertBack.</param>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.OnConvertersCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when [converters collection changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Data.Converters.ValueConverterGroup.Converters">
            <summary>
            Returns the list of IValueConverters contained in this converter.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.CollapsingVisibilityConverterBase">
            <summary>
            A base class that makes it easier to create values to visibility converters.
            <para/>
            This converter returns <see cref="F:System.Windows.Visibility.Collapsed"/> when a non-visible state should be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CollapsingVisibilityConverterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.CollapsingVisibilityConverterBase"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.HidingVisibilityConverterBase">
            <summary>
            A base class that makes it easier to create values to visibility converters.
            <para/>
            This converter returns <see cref="F:System.Windows.Visibility.Hidden"/> when a non-visible state should be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.HidingVisibilityConverterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.HidingVisibilityConverterBase"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.DataResource">
            <summary>
            Class that represents a bound property value for a non-bindable property.
            </summary>
            <remarks>
            This code originally comes from: http://www.wpfmentor.com/2009/01/how-to-add-binding-to-commandparameter.html.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Data.DataResource.BindingTargetProperty">
            <summary>
            Identifies the <see cref="P:Catel.Windows.Data.DataResource.BindingTarget"/> dependency property.
            </summary>
            <value>
            The identifier for the <see cref="P:Catel.Windows.Data.DataResource.BindingTarget"/> dependency property.
            </value>
        </member>
        <member name="M:Catel.Windows.Data.DataResource.CreateInstanceCore">
            <summary>
            Creates an instance of the specified type using that type's default constructor. 
            </summary>
            <returns>
            A reference to the newly created object.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.DataResource.CloneCore(System.Windows.Freezable)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:System.Windows.Freezable"/>
            using base (non-animated) property values. 
            </summary>
            <param name="sourceFreezable">
            The object to clone.
            </param>
        </member>
        <member name="P:Catel.Windows.Data.DataResource.BindingTarget">
            <summary>
            Gets or sets the binding target.
            </summary>
            <value>The binding target.</value>
        </member>
        <member name="T:Catel.Windows.Data.DataResourceBindingExtension">
            <summary>
            Data resource binding extension class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.DataResourceBindingExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.DataResourceBindingExtension.OnDataResourceChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the data resource has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Data.DataResourceBindingExtension.Convert(System.Object,System.Type)">
            <summary>
            Converts the specified object.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="toType">The type to convert the object to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="P:Catel.Windows.Data.DataResourceBindingExtension.DataResource">
            <summary>
            Gets or sets the data resource.
            </summary>
            <value>The data resource.</value>
        </member>
        <member name="T:Catel.Windows.Data.DependencyPropertyChangedListener">
            <summary>
            This class implements a listener to receive notifications for dependency property changes.
            </summary>
            <remarks>
            This class originally comes from http://blog.thekieners.com/2010/08/27/listening-to-dependencyproperty-changes-in-silverlight/.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.DependencyPropertyChangedListener"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedListener.Create(System.Windows.DependencyObject,System.String)">
            <summary>
            Creates the specified source element.
            </summary>
            <param name="sourceElement">The source element.</param>
            <param name="propertyPath">The property path.</param>
            <returns>The listener.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyPath"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedListener.Detach">
            <summary>
            Detaches this instance.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedListener.OnValueChanged(System.Object,System.Object)">
            <summary>
            Called when the value has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyChangedListener.RelayInstance">
            <summary>
            Gets or sets the relay instance, which holds a reference to the relay object in order that the GC does
            not collect it.
            </summary>
            <value>The relay instance.</value>
        </member>
        <member name="E:Catel.Windows.Data.DependencyPropertyChangedListener.ValueChanged">
            <summary>
            Raised when the dependency property changes.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.DependencyPropertyChangedListener.RelayObject">
            <summary>
            Helper element to make it possible to use the binding engine to get notified when the source element property changes.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs">
            <summary>
            Provides data for a DependencyPropertyChangedListener ValueChanged implementation.
            </summary>
            <remarks>
            This class originally comes from http://blog.thekieners.com/2010/08/27/listening-to-dependencyproperty-changes-in-silverlight/.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs"/> class.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.OldValue">
            <summary>
             Gets the value of the property before the change.
            </summary>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.NewValue">
            <summary>
            Gets the value of the property after the change.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.BindingHelper">
            <summary>
            Binding helper class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.BindingHelper.GetBindingValue(System.Windows.FrameworkElement,System.Windows.Data.BindingBase)">
            <summary>
            Gets the binding value.
            </summary>
            <param name="frameworkElement">The dependency object.</param>
            <param name="binding">The binding.</param>
            <returns>The actual binding value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.BindingHelper.ClearBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Clears a binding. This method implements the ClearBinding for both WPF and Silverlight.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="dependencyProperty">The dependency property.</param>
        </member>
        <member name="T:Catel.Windows.Documents.DataFormats">
            <summary>
            DataFormats helper class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Documents.DataFormats.GetDataFormat(System.String)">
            <summary>
            Returns the DataFormat string of the text.
            </summary>
            <param name="text">Text to check.</param>
            <returns>Value from the <see cref="T:Catel.Windows.Documents.DataFormats"/> enumeration.</returns>
        </member>
        <member name="T:Catel.Windows.Documents.FlowDocumentExtensions">
            <summary>
            Extension methods for <see cref="T:System.Windows.Documents.FlowDocument"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Documents.FlowDocumentExtensions.CloneFlowDocument(System.Windows.Documents.FlowDocument)">
            <summary>
            Clones a <see cref="T:System.Windows.Documents.FlowDocument"/> object.
            </summary>
            <param name="flowDocument">FlowDocument to copy.</param>
            <returns>A copy of the FlowDocument.</returns>
        </member>
        <member name="M:Catel.Windows.Documents.FlowDocumentExtensions.SaveFlowDocument(System.Windows.Documents.FlowDocument)">
            <summary>
            Saves a <see cref="T:System.Windows.Documents.FlowDocument"/> to a file.
            </summary>
            <param name="flowDocument"><see cref="T:System.Windows.Documents.FlowDocument"/> to save.</param>
        </member>
        <member name="T:Catel.Windows.Documents.TextRangeExtensions">
            <summary>
            Extension methods for <see cref="T:System.Windows.Documents.TextRange"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Documents.TextRangeExtensions.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Documents.TextRangeExtensions.IsEmpty(System.Windows.Documents.TextRange)">
            <summary>
            Checks whether a <see cref="T:System.Windows.Documents.TextRange"/> is empty or not.
            </summary>
            <param name="textRange">TextRange to check.</param>
            <returns>True if TextRange is empty, otherwhise false.</returns>
        </member>
        <member name="M:Catel.Windows.Documents.TextRangeExtensions.SetText(System.Windows.Documents.TextRange,System.String)">
            <summary>
            Sets text into a text range.
            </summary>
            <param name="range"><see cref="T:System.Windows.Documents.TextRange"/> to set the text into.</param>
            <param name="text">Text to set into the text range.</param>
        </member>
        <member name="M:Catel.Windows.Documents.TextRangeExtensions.GetText(System.Windows.Documents.TextRange)">
            <summary>
            Gets the text from a text range.
            </summary>
            <param name="range"><see cref="T:System.Windows.Documents.TextRange"/> to extract the text from.</param>
            <returns>Text in the text range.</returns>
        </member>
        <member name="M:Catel.Windows.Documents.TextRangeExtensions.ClearTextMargins(System.Windows.Documents.TextRange)">
            <summary>
            Clears the margins of a <see cref="T:System.Windows.Documents.TextRange"/>.
            </summary>
            <param name="range"><see cref="T:System.Windows.Documents.TextRange"/> to clear the margins of.</param>
        </member>
        <member name="M:Catel.Windows.Documents.TextRangeExtensions.ClearFormatting(System.Windows.Documents.TextRange)">
            <summary>
            Clears the formatting of a <see cref="T:System.Windows.Documents.TextRange"/>.
            </summary>
            <param name="range"><see cref="T:System.Windows.Documents.TextRange"/> to clear the formatting of.</param>
        </member>
        <member name="T:Catel.Windows.Documents.Rtf">
            <summary>
            Class defining all the Rtf constants and methods.
            </summary>
        </member>
        <member name="F:Catel.Windows.Documents.Rtf.RtfFontStyleMarker">
            <summary>
            Rtf marker for font style.
            </summary>
        </member>
        <member name="F:Catel.Windows.Documents.Rtf.RtfFontSizeMarker">
            <summary>
            Rtf marker for font size.
            </summary>
        </member>
        <member name="M:Catel.Windows.Documents.Rtf.ConvertPlainTextToRtf(System.String,System.Double,System.Windows.Media.FontFamily)">
            <summary>
            Converts plain text to Rtf with the newline bug fix.
            </summary>
            <param name="text">Text to convert.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontFamily">The font family.</param>
            <returns>Rtf version of the text.</returns>
        </member>
        <member name="M:Catel.Windows.Documents.Rtf.ConvertRtfToPlainText(System.String)">
            <summary>
            Converts the RTF to plain text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="T:Catel.Windows.Documents.Sizes">
            <summary>
            Extension methods to calculate sizes.
            </summary>
        </member>
        <member name="M:Catel.Windows.Documents.Sizes.PointsToPixels(System.Double)">
            <summary>
            Convert number of points to number of pixels.
            </summary>
            <param name="value">Number of points.</param>
            <returns>Number of pixels.</returns>
        </member>
        <member name="M:Catel.Windows.Documents.Sizes.PixelsToPoints(System.Double)">
            <summary>
            Convert number of pixels to number of points.
            </summary>
            <param name="value">Number of pixels.</param>
            <returns>Number of points.</returns>
        </member>
        <member name="T:Catel.Windows.ApplicationExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Windows.Application"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.ApplicationExtensions.GetActiveWindow(System.Windows.Application)">
            <summary>
            Gets the currently active window of the application.
            </summary>
            <param name="application">The application.</param>
            <returns>
            The active window of the application or null in case of none window is opened.
            </returns>
        </member>
        <member name="T:Catel.Windows.DependencyObjectExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Windows.DependencyObject"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetAncestorObject``1(System.Windows.DependencyObject)">
            <summary>
            Returns the ancestory object of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <typeparam name="T">Ancestor object.</typeparam>
            <param name="visualObject">Visual object to get the ancestor object for.</param>
            <returns><see cref="T:System.Windows.DependencyObject"/> or null if no ancestor object is found.</returns>
            <remarks>
            	If visualObject was of type T it was returned as ancestor, this is changed.
            	GetAncestorObject wil not return supplied parameter anymore.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalOrVisualAncestor(System.Windows.DependencyObject,System.Predicate{System.Object})">
            <summary>
            Finds the logical or visual ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalOrVisualAncestor(System.Windows.DependencyObject,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds the logical or visual ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalAncestor(System.Windows.DependencyObject,System.Predicate{System.Object})">
            <summary>
            Finds the logical ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalAncestor(System.Windows.DependencyObject,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds the logical ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalAncestorByType``1(System.Windows.DependencyObject)">
            <summary>
            Finds the logical ancestor by type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalRoot(System.Windows.DependencyObject)">
            <summary>
            Finds the logical root.
            </summary>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualAncestor(System.Windows.DependencyObject,System.Predicate{System.Object})">
            <summary>
            Finds the visual ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualAncestor(System.Windows.DependencyObject,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds the visual ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualAncestorByType``1(System.Windows.DependencyObject)">
            <summary>
            Finds the visual ancestor by type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualDescendant(System.Windows.DependencyObject,System.Predicate{System.Object})">
            <summary>
            Finds the visual descendant.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualDescendantByType``1(System.Windows.DependencyObject)">
            <summary>
            Finds the visual descendant by type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualRoot(System.Windows.DependencyObject)">
            <summary>
            Finds the visual root.
            </summary>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Gets the visual children.
            </summary>
            <param name="parent">The parent.</param>
            <returns>
            	<see cref="T:System.Collections.Generic.IEnumerable`1"/> of all children.
            </returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.UpdateAllBindings(System.Windows.DependencyObject)">
            <summary>
            Updates all the bindings of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.UpdateAllBindings(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Updates all the bindings of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
            <param name="recursive">if set to <c>true</c>, the bindings will be updated recursively using the <see cref="T:System.Windows.Media.VisualTreeHelper"/>.</param>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetBindingExpressions(System.Windows.DependencyObject)">
            <summary>
            Gets all the binding expressions of the specified <paramref name="element"/> in a non-recursive way.
            </summary>
            <param name="element">The element.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all bindings.</returns>
            <remarks>
            This code is originally found at http://stackoverflow.com/questions/3586870/retrieve-all-data-bindings-from-wpf-window.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetBindingExpressions(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Gets all the binding expressions of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
            <param name="recursive">if set to <c>true</c>, the bindings will be searched recursively using the <see cref="T:System.Windows.Media.VisualTreeHelper"/>.</param>
            <returns>
            	<see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all bindings.
            </returns>
            <remarks>
            This code is originally found at http://stackoverflow.com/questions/3586870/retrieve-all-data-bindings-from-wpf-window.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetDependencyProperties(System.Windows.DependencyObject)">
            <summary>
            Gets the dependency properties of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all dependency properties.</returns>
            <remarks>
            This code is originally found at http://stackoverflow.com/questions/3586870/retrieve-all-data-bindings-from-wpf-window.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetAttachedProperties(System.Windows.DependencyObject)">
            <summary>
            Gets the attached properties of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all attached properties.</returns>
            <remarks>
            This code is originally found at http://stackoverflow.com/questions/3586870/retrieve-all-data-bindings-from-wpf-window.
            </remarks>
        </member>
        <member name="T:Catel.Windows.FrameworkElementExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.GetForegroundWindow">
            <summary>
            The GetForegroundWindow function returns a handle to the foreground window.
            </summary>
        </member>
        <member name="F:Catel.Windows.FrameworkElementExtensions.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.BringWindowToTop(System.Windows.FrameworkElement)">
            <summary>
            Activates the window this framework element contains to.
            </summary>
            <param name="frameworkElement">Reference to the current <see cref="T:System.Windows.FrameworkElement"/>.</param>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.SetForegroundWindowEx(System.IntPtr)">
            <summary>
            Sets the foreground window (some "dirty" win32 stuff).
            </summary>
            <param name="hWnd">Handle of the window to set to the front.</param>
            <remarks>
            This method takes over the input thread for the window. This means that you are unable
            to debug the code between "Attach" and "Detach" since the input thread of Visual Studio
            will be attached to the thread of the application.
            </remarks>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.GetParentBindingGroup(System.Windows.FrameworkElement)">
            <summary>
            Get first parent binding group from specified element.
            </summary>
            <param name="frameworkElement">Reference to the current <see cref="T:System.Windows.FrameworkElement"/>.</param>
            <returns>The first parent BindingGroup or null when not exists.</returns>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.GetParent(System.Windows.FrameworkElement)">
            <summary>
            Gets the parent. This method first tries to use the <see cref="P:System.Windows.FrameworkElement.Parent"/> property. If that is <c>null</c>,
            it will use the <see cref="P:System.Windows.FrameworkElement.TemplatedParent"/>. If that is <c>null</c>, this method assumes there is no
            parent and will return <c>null</c>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <returns>The parent or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.UIElementExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.GetFocusedControl(System.Windows.UIElement)">
            <summary>
            Gets the focused control.
            </summary>
            <param name="element">The element to check and all childs.</param>
            <returns>The focused <see cref="T:System.Windows.UIElement"/> or <c>null</c> if none if the children has the focus.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.IInputElement)">
            <summary>
            Focuses the first control on the ContentElement. Also focuses the parents first.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.IInputElement"/>.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.ContentElement)">
            <summary>
            Focuses the first control on the ContentElement. Also focuses the parents first.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.ContentElement"/>.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.UIElement)">
            <summary>
            Focuses the first control on the UI Element. Also focuses the parents first.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.UIElement"/>.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.IInputElement,System.Boolean)">
            <summary>
            Focuses the first control on the ContentElement.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.IInputElement"/>.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.ContentElement,System.Boolean)">
            <summary>
            Focuses the first control on the ContentElement.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.ContentElement"/>.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.UIElement,System.Boolean)">
            <summary>
            Focuses the first control on the UI Element.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.UIElement"/>.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Object,System.Boolean)">
            <summary>
            Focuses the first control on the UI Element.
            </summary>
            <param name="element">Reference to the current element.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusNextControl(System.Object,System.Boolean)">
            <summary>
            Focuses the next control on the UI Element.
            </summary>
            <param name="element">Element to focus the next control of.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.MoveFocus(System.Windows.IInputElement,System.Windows.Input.FocusNavigationDirection,System.Int32)">
            <summary>
            Moves the focus in a specific direction.
            </summary>
            <param name="element">The element.</param>
            <param name="direction">The direction.</param>
            <param name="hops">The hops.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.MoveFocus(System.Windows.UIElement,System.Windows.Input.FocusNavigationDirection,System.Int32)">
            <summary>
            Moves the focus in a specific direction.
            </summary>
            <param name="element">The element.</param>
            <param name="direction">The direction.</param>
            <param name="hops">The hops.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.MoveFocus(System.Windows.ContentElement,System.Windows.Input.FocusNavigationDirection,System.Int32)">
            <summary>
            Moves the focus in a specific direction.
            </summary>
            <param name="element">The element.</param>
            <param name="direction">The direction.</param>
            <param name="hops">The hops.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.MoveFocus(System.Object,System.Windows.Input.FocusNavigationDirection,System.Int32)">
            <summary>
            Moves the focus in a specific direction.
            </summary>
            <param name="element">The element.</param>
            <param name="direction">The direction.</param>
            <param name="hops">The hops.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.InvalidateRect(System.Windows.UIElement)">
            <summary>
            Invalidates the rect as it is possible in win32.
            </summary>
            <param name="element">The element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.VisualExtensions">
            <summary>
            Extensions for the <see cref="T:System.Windows.Media.Visual"/>
            </summary>
        </member>
        <member name="F:Catel.Windows.VisualExtensions.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.VisualExtensions.DisableHardwareAcceleration(System.Windows.Media.Visual)">
            <summary>
            Disables the hardware acceleration for the specified visual.
            </summary>
            <param name="visual">The visual.</param>
            <remarks>
            When the visual is not yet loaded, this method tries to subscribe to the <c>Control.Loaded</c> event so disabled the 
            hardware acceleration as soon as the control is loaded.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visual"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.VisualExtensions.OnVisualLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a visual has been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.Windows.WindowExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.GWL_EXSTYLE">
            <summary>
            Extended windows styles.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.GWL_STYLE">
            <summary>
            Window styles.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.WS_SYSMENU">
            <summary>
            Shows or hides a system menu.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window)">
            <summary>
            Sets the owner window to the main window of the current process.
            </summary>
            <param name="window">Reference to the current window.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window)">
            <summary>
            Sets the owner window to the main window of the current process, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window to the main window of the current process.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window to the main window of the current process, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Windows.Window)">
            <summary>
            Sets the owner window of a specific window via the Window class.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.Windows.Window)">
            <summary>
            Sets the owner window of a specific window via the Window class, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the Window class.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the Window class, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowByWindow(System.Windows.Window,System.Windows.Window,System.Boolean,System.Boolean)">
            <summary>
            Sets the owner window of a specific window.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
            <param name="focusFirstControl">If true, the first control will automatically be focused.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.IntPtr)">
            <summary>
            Sets the owner window of a specific window via the window handle.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.IntPtr)">
            <summary>
            Sets the owner window of a specific window via the window handle, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.IntPtr,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the window handle.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.IntPtr,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the window handle, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowByHandle(System.Windows.Window,System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the window handle.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
            <param name="focusFirstControl">If true, the first control will automatically be focused.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.BringWindowToTop(System.Windows.Window)">
            <summary>
            Brings to specified window to top.
            </summary>
            <param name="window">The window to bring to top.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="window"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Windows.Window,System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Sets the owner window of a specific window. It will first try to set the owner via
            the <paramref name="ownerWindow"/>. If the <paramref name="ownerWindow"/> is not available,
            this method will use the <paramref name="ownerHandle"/> to set the parent.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="ownerWindow">New owner window.</param>
            <param name="ownerHandle">The owner handle.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
            <param name="focusFirstControl">If true, the first control will automatically be focused.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.GetProcessMainWindowHandle">
            <summary>
            Returns the main window handle of the current process.
            </summary>
            <returns>Handle of the main window of the current process.</returns>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.HasOwner(System.Windows.Window)">
            <summary>
            Returns whether the window currently has an owner.
            </summary>
            <param name="window">Window to check.</param>
            <returns>
            True if the window has an owner, otherwise false.
            </returns>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.RemoveIcon(System.Windows.Window)">
            <summary>
            Removes the icon from the window.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="T:Catel.Windows.WindowExtensions.RECT">
            <summary>
            RECT struct for platform invokation.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.RECT.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.RECT.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.RECT.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.RECT.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:Catel.Windows.AutoDisposeAttribute">
            <summary>
            Auto diposes the properties that have this attribute when the property is declared.
            </summary>
            <remarks>
            The attribute itself only defines itself, but has no real implementation. The supported object that allows
            to use this object should implement the actual disposing.
            </remarks>
        </member>
        <member name="T:Catel.Windows.AutoDisposeHelper">
            <summary>
            Auto dispose helper class.
            </summary>
        </member>
        <member name="M:Catel.Windows.AutoDisposeHelper.EnableAutoDisposeProperties(System.Windows.FrameworkElement)">
            <summary>
            Registers the AutoDisposeProperties call to the Unloaded event of the given element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Catel.Windows.AutoDisposeHelper.UnloadedWrapper(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the AutoDisposeProperties call.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.AutoDisposeHelper.AutoDisposeProperties(System.Object)">
            <summary>
            Automatically disposes all properties of the object decorated with the <see cref="T:Catel.Windows.AutoDisposeAttribute"/>.
            </summary>
            <param name="obj">The object to dispose the properties of.</param>
        </member>
        <member name="M:Catel.Windows.AutoDisposeHelper.AutoDisposeObject(System.Object)">
            <summary>
            Automatically disposes an object. If the object is an enumerable, all childs are disposed.
            </summary>
            <param name="obj">The object to dispose.</param>
        </member>
        <member name="T:Catel.MVVM.UI.ViewToViewModelMappingHelper">
            <summary>
            Helper class to fix <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> for <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingHelper._viewModelContainers">
            <summary>
            Dictionary of <see cref="T:Catel.MVVM.IViewModelContainer"/> instances managed by this helper class.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingHelper._viewToViewModelMappingContainers">
            <summary>
            Dictionary of <see cref="T:Catel.MVVM.UI.ViewToViewModelMappingContainer"/> instances per type (which should be a <see cref="T:System.Windows.DependencyObject"/>).
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingHelper._ignoredViewModelChanges">
            <summary>
            List of properties in the view model that should be ignored.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingHelper._ignoredViewChanges">
            <summary>
            List of properties in the view that should be ignored.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.#ctor(Catel.MVVM.IViewModelContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ViewToViewModelMappingHelper"/> class.
            </summary>
            <param name="viewModelContainer">The view model container.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelContainer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelContainer"/> is not a <see cref="T:System.Windows.DependencyObject"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.InitializeViewToViewModelMappings(Catel.MVVM.IViewModelContainer)">
            <summary>
            Initializes the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> for the specified <see cref="T:Catel.MVVM.IViewModelContainer"/>.
            </summary>
            <param name="viewModelContainer">The view model container to initialize the mappings for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelContainer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelContainer"/> is not a <see cref="T:System.Windows.DependencyObject"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.UninitializeViewToViewModelMappings(Catel.MVVM.IViewModelContainer)">
            <summary>
            Uninitializes the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> for the specified <see cref="T:Catel.MVVM.IViewModelContainer"/>.
            </summary>
            <param name="viewModelContainer">The view model container the uninitialize the mappings for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelContainer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.UninitializeViewToViewModelMappings">
            <summary>
            Uninitializes the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> for the registered <see cref="T:Catel.MVVM.IViewModelContainer"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.InitializeViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Initializes the specified view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.UninitializeViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Uninitializes the specified view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.OnViewModelChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the view model on the view model container has changed.
            </summary>
            <param name="sender">The view model container.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.OnViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the view model has changed.
            </summary>
            <param name="sender">The view model.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.OnViewModelContainerPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the view model container has changed.
            </summary>
            <param name="sender">The view model container.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.TransferValueFromViewToViewModel(Catel.MVVM.IViewModel,System.String,System.String)">
            <summary>
            Transfers the value from a view property to the view model property.
            <para/>
            This method does nothing when <paramref name="viewModel"/> is <c>null</c>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="viewPropertyName">Name of the view property.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewPropertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelPropertyName"/> is <c>null</c> or whitespace.</exception>
            <remarks>
            This method does not check the type of the properties. If the types are incorrect, an exception will be thrown by
            the .NET Framework.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.TransferValueFromViewModelToView(Catel.MVVM.IViewModel,System.String,System.String)">
            <summary>
            Transfers the value from a view model property to the view property.
            <para/>
            This method does nothing when <paramref name="viewModel"/> is <c>null</c>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="viewPropertyName">Name of the view property.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewPropertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelPropertyName"/> is <c>null</c> or whitespace.</exception>
            <remarks>
            This method does not check the type of the properties. If the types are incorrect, an exception will be thrown by
            the .NET Framework.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.TransferValue(System.Object,System.String,System.Object,System.String)">
            <summary>
            Transfers a value from the source property to the target property.
            </summary>
            <param name="source">The source.</param>
            <param name="sourcePropertyName">Name of the source property.</param>
            <param name="target">The target.</param>
            <param name="targetPropertyName">Name of the target property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="sourcePropertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="targetPropertyName"/> is <c>null</c> or whitespace.</exception>
            <remarks>
            This method does not check the type of the properties. If the types are incorrect, an exception will be thrown by
            the .NET Framework.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMappingHelper.ViewModelContainer">
            <summary>
            Gets the view model container.
            </summary>
            <value>The view model container.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMappingHelper.ViewModelContainerType">
            <summary>
            Gets the type of the view model container.
            </summary>
            <value>The type of the view model container.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMappingHelper.PreviousViewModel">
            <summary>
            Gets or sets the previous view model.
            </summary>
            <value>The previous view model.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMappingHelper.CurrentViewModel">
            <summary>
            Gets the current view model.
            </summary>
            <value>The current view model.</value>
        </member>
        <member name="T:Catel.Windows.EffectsHelper">
            <summary>
            Helper class for special window or framework effects.
            </summary>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.Windows.EffectsHelper"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Dimm(System.Windows.FrameworkElement)">
            <summary>
            Dimms the specified framework element and sets the <see cref="P:System.Windows.UIElement.IsHitTestVisible"/> to <c>false</c>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Dimm(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Dimms the specified framework element and sets the <see cref="P:System.Windows.UIElement.IsHitTestVisible"/> to <c>false</c>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="completedDelegate">The completed delegate. If <c>null</c>, the callback will not be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Undimm(System.Windows.FrameworkElement)">
            <summary>
            Undimms the specified framework element and sets the <see cref="P:System.Windows.UIElement.IsHitTestVisible"/> to <c>true</c>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Undimm(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Undimms the specified framework element and sets the <see cref="P:System.Windows.UIElement.IsHitTestVisible"/> to <c>true</c>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="completedDelegate">The completed delegate. If <c>null</c>, the callback will not be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Blur(System.Windows.FrameworkElement)">
            <summary>
            Blurs the specified framework element.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Blur(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Blurs the specified framework element.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="completedDelegate">The completed delegate. If <c>null</c>, the callback will not be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Unblur(System.Windows.FrameworkElement)">
            <summary>
            Unblurs the specified framework element.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Unblur(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Unblurs the specified framework element.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="completedDelegate">The completed delegate. If <c>null</c>, the callback will not be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.RunStoryboardWithCallback(System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Action)">
            <summary>
            Runs the storyboard with the completed callback.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="storyboardToRun">The storyboard to run.</param>
            <param name="completedDelegate">The completed delegate. If <c>null</c>, the callback will not be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="storyboardToRun"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.PopupHelper">
            <summary>
            Popup helper class to retrieve all the popups inside a windows application, which are not available
            via the regular <see cref="P:System.Windows.Application.Windows"/> property.
            </summary>
        </member>
        <member name="M:Catel.Windows.PopupHelper.GetAllPopups">
            <summary>
            Gets all the popups of the current application.
            </summary>
            <returns>The popups.</returns>
        </member>
        <member name="M:Catel.Windows.PopupHelper.FindAllPopups">
            <summary>
            Finds all the popups of the current application.
            </summary>
        </member>
        <member name="P:Catel.Windows.PopupHelper.Popups">
            <summary>
            Gets all the popups of the current application.
            </summary>
            <value>The popups.</value>
        </member>
        <member name="T:Catel.Windows.Windows.ValidationHelper">
            <summary>
            Validation helper class.
            </summary>
            <remarks>
            This code is based on the code that can be found at:
            http://www.primordialcode.com/index.php/2009/08/19/wpf-force-validation-rules-attached-object-executed/.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Windows.ValidationHelper.GetDependencyProperties(System.Type)">
            <summary>
            Gets the dependency properties of a specific type.
            </summary>
            <param name="type">The type.</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/> containing all the found dependency properties.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Windows.ValidationHelper.UpdateBindingsValidation(System.Windows.DependencyObject)">
            <summary>
            Updates the bindings validation. Sometimes, WPF doesn't show the validation red border
            when validation occurs too soon. This method will force all bound properties to revalidate.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dependencyObject"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.Interactivity.AuthenticationAction">
            <summary>
            The available actions to perform when a user is not able to view a specific UI element.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.AuthenticationAction.Hide">
            <summary>
            Hides the associated control.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.AuthenticationAction.Collapse">
            <summary>
            Collapses the associated control.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.AuthenticationAction.Disable">
            <summary>
            Disables the associated control.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.Authentication">
            <summary>
            Authentication behavior to show/hide UI elements based on the some authentication parameters.
            </summary>
            <remarks>
            In Silverlight, the <c>IsEnabled</c> property is declared on <see cref="T:System.Windows.Controls.Control"/> instead of <see cref="T:System.Windows.FrameworkElement"/>. If the
            <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is not a <see cref="T:System.Windows.Controls.Control"/>, but the <see cref="P:Catel.Windows.Interactivity.Authentication.Action"/> is set to <see cref="F:Catel.Windows.Interactivity.AuthenticationAction.Disable"/>,
            a <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Interactivity.Authentication.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.Authentication.ActionProperty">
            <summary>
            Using a DependencyProperty as the backing store for Action.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.Authentication.AuthenticationTagProperty">
            <summary>
            Using a DependencyProperty as the backing store for AuthenticationTag.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Authentication.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> has been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.InvalidOperationException">No instance of <see cref="T:Catel.MVVM.IAuthenticationProvider"/> is registered in the <see cref="T:Catel.IoC.IServiceLocator"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Catel.Windows.Interactivity.Authentication.Action"/> is set to <see cref="F:Catel.Windows.Interactivity.AuthenticationAction.Disable"/> and the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is not a <see cref="T:System.Windows.Controls.Control"/>.</exception>
        </member>
        <member name="P:Catel.Windows.Interactivity.Authentication.Action">
            <summary>
            Gets or sets the action to execute when the user has no access to the specified UI element.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.Authentication.AuthenticationTag">
            <summary>
            Gets or sets the authentication tag which can be used to provide additional information to the <see cref="T:Catel.MVVM.IAuthenticationProvider"/>.
            </summary>
            <value>The authentication tag.</value>
        </member>
        <member name="T:Catel.Windows.Interactivity.DelayBindingUpdate">
            <summary>
            This behaviors sets the binding to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Explicit"/> and manually updates the
            binding from view to view model after the delay.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.DelayBindingUpdate.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.DelayBindingUpdate"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.ValidateRequiredProperties">
            <summary>
            Validates the required properties.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> has been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> has been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.OnDependencyPropertyChanged(System.Object,Catel.Windows.Data.DependencyPropertyValueChangedEventArgs)">
            <summary>
            Called when the associated dependency property has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.OnTimerTick(System.Object,System.EventArgs)">
            <summary>
            Called when timer ticks.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.UpdateBinding">
            <summary>
            Updates the binding value.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.GetDependencyProperty">
            <summary>
            Gets the dependency property based on the properties of this behavior.
            </summary>
            <returns>The <see cref="T:System.Windows.DependencyProperty"/> of <c>null</c> if the dependency property is not found.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.GetDependencyProperty(System.String)">
            <summary>
            Gets the dependency property with the specified property name.
            </summary>
            <param name="dependencyPropertyName">Name of the property.</param>
            <returns>The <see cref="T:System.Windows.DependencyProperty"/> or <c>null</c> if the dependency property is not found.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.CreateBindingCopy(System.Windows.Data.Binding)">
            <summary>
            Creates the binding copy.
            </summary>
            <param name="binding">The binding.</param>
            <returns>The duplicated binding.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binding"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Windows.Interactivity.DelayBindingUpdate.UpdateDelay">
            <summary>
              Gets or sets the update delay. 
              <para />
              This is the value that is used between updates in milliseconds. The binding will be updated
              after the delay. When a new value becomes available, the timer is reset and starts all over.
              <para />
              The default value is <c>100</c>. If the value is smaller than <c>50</c>, the value
              will be ignored and there will be no delay between the value change and binding update. If the
              value is higher than <c>5000</c>, it will be set to <c>5000</c>.
            </summary>
            <value>The update delay.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.DelayBindingUpdate.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
            <remarks>
            This property does not reflect to any changes, so this property must be set when the 
            <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.DelayBindingUpdate.DependencyPropertyName">
            <summary>
            Gets or sets the name of the dependency property. This property is used before the <see cref="P:Catel.Windows.Interactivity.DelayBindingUpdate.PropertyName"/>. By
            default, this behavior tries to retrieve the dependency property via "[PropertyName]Property" (which is the default
            naming convention of dependency properties). In the rare case that this naming convention is not followed, it is
            possible to use this property.
            </summary>
            <value>The name of the property.</value>
            <remarks>
            This property does not reflect to any changes, so this property must be set when the 
            <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            <para/>
            This property should only be used as backup if the <see cref="P:Catel.Windows.Interactivity.DelayBindingUpdate.PropertyName"/> property does not work.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.DelayBindingUpdate.UsedDependencyPropertyName">
            <summary>
            Gets the name of the used dependency property. This property is introduced because a <see cref="T:System.Windows.DependencyProperty"/> in Silverlight
            doesn't have a name.
            </summary>
            <value>The name of the used property or <c>null</c> if no property is used.</value>
        </member>
        <member name="T:Catel.Windows.Interactivity.DoubleClickToCommand">
            <summary>
            This behavior allows any element that supports a double click to command for every element
            that supports <c>MouseLeftButtonDown</c>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.DoubleClickToCommand.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DoubleClickToCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.DoubleClickToCommand"/> class.
            </summary>
            <param name="action">The action to execute on double click. This is very useful when the behavior is added
            via code and an action must be invoked instead of a command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Interactivity.DoubleClickToCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.DoubleClickToCommand"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.DoubleClickToCommand.CommandProperty">
            <summary>
            The property definition for the <see cref="P:Catel.Windows.Interactivity.DoubleClickToCommand.Command"/> dependency property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DoubleClickToCommand.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the associated object is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DoubleClickToCommand.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the associated object is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DoubleClickToCommand.OnMouseButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DoubleClickToCommand.OnTimerTick(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Threading.DispatcherTimer.Tick"/> occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Interactivity.DoubleClickToCommand.Command">
            <summary>
            Gets or sets the command the execute when the associated object is being double-clicked.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.DoubleClickToCommand.AutoFixListBoxItemTemplate">
            <summary>
            Gets or sets a value indicating whether to automatically fix the ItemTemplate in a ListBox.
            </summary>
            <value>
            	<c>true</c> if the ItemTemplate in a ListBox should automatically be fixed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Interactivity.EventToCommand">
            <summary>
            Class to convert a routed event to a command.
            </summary>
            <remarks>
            This class is based on the implementation of the <c>EventToCommand</c> class that can be found
            in the MVVM Light Toolkit (see http://mvvmlight.codeplex.com/).
            <para />
            Since Windows Phone 7 does not support binding to objects, the properties implemented are of type Binding
            and will be set in the variables holding the actual values. The WPF and Silverlight version will directly
            update the variables.
            <para />
            Because of the Windows Phone 7 code, this class might look very complex, but in the end it is not. For Windows
            Phone 7, a special BindingListener class is used to listen to binding changes. So, instead of directly using the
            values of this class, the binding is setto the BindingListener which will give this class an update (this in fact
            only an intermediate class (the BindingListener) is required for Windows Phone 7.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Interactivity.TriggerActionBase`1">
            <summary>
            TriggerAction base class that handles a safe unsubscribe and clean up because the default
            TriggerAction class does not always call <see cref="M:System.Windows.Interactivity.TriggerAction.OnDetaching"/>.
            <para/>
            This class also adds some specific features such as <see cref="M:Catel.Windows.Interactivity.TriggerActionBase`1.ValidateRequiredProperties"/>
            which is automatically called when the trigger action is attached.
            </summary>
            <typeparam name="T">The <see cref="T:System.Windows.UIElement"/> this trigger action should attach to.</typeparam>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnAttached">
            <summary>
            Called after the action is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnDetaching">
            <summary>
            Called when the action is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.ValidateRequiredProperties">
            <summary>
            Validates the required properties. This method is called when the object is attached, but before
            the <see cref="M:Catel.Windows.Interactivity.TriggerActionBase`1.Initialize"/> is invoked.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.Initialize">
            <summary>
            Initializes the trigger action. This method is called instead of the <see cref="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnAttached"/> which is sealed
            to protect the additional trigger action.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.Uninitialize">
            <summary>
            Uninitializes the behavior. This method is called when <see cref="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnDetaching"/> is called, or when the
            <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is unloaded.
            <para/>
            If dependency properties are used, it is very important to use <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)"/> 
            to clear the value
            of the dependency properties in this method.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnAssociatedObjectLoadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is loaded. This method is introduced to prevent
            double initialization when the <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is already loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnAssociatedObjectUnloadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is unloaded. This method is introduced to prevent
            double uninitialization when the <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is already unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.CleanUp">
            <summary>
            Actually cleans up the trigger action because <see cref="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnDetaching"/> is not always called.
            </summary>
            <remarks>
            This is based on the blog post: http://dotnetbyexample.blogspot.com/2011/04/safe-event-detachment-pattern-for.html.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.TriggerActionBase`1.IsAssociatedObjectLoaded">
            <summary>
            Gets a value indicating whether the <see cref="!:TriggerActionBase&lt;T&gt;.AssociatedObject"/> is loaded.
            </summary>
            <value>
            	<c>true</c> if the <see cref="!:TriggerActionBase&lt;T&gt;.AssociatedObject"/> is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.EventToCommand"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.EventToCommand.DisableAssociatedObjectOnCannotExecuteProperty">
            <summary>
            DependencyProperty definition as the backing store for DisableAssociatedObjectOnCannotExecute.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.EventToCommand.CommandProperty">
            <summary>
            DependencyProperty definition as the backing store for Command.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.EventToCommand.CommandParameterProperty">
            <summary>
            DependencyProperty definition as the backing store for CommandParameter.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.OnDisableAssociatedObjectOnCannotExecuteChanged(System.Boolean)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.EventToCommand.DisableAssociatedObjectOnCannotExecute"/> property has changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.OnCommandChanged(System.Windows.Input.ICommand)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.EventToCommand.Command"/> property has changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.OnCommandParameterChanged(System.Object)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.EventToCommand.CommandParameter"/> property has changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.OnCommandCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <c>CanExecute</c> state of a command has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.Invoke">
            <summary>
            Invokes the action without any parameter.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.IsAssociatedObjectDisabled">
            <summary>
            Checks whether the associated object is disabled or not.
            </summary>
            <returns><c>true</c> if the associated object is disabled; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.UpdateElementState">
            <summary>
            Updates the state of the associated element.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the associated object is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the associated object is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.SubscribeToCommand">
            <summary>
            Subscribes to the command.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.UnsubscribeFromCommand">
            <summary>
            Unsubscribes from the command.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.EventToCommand.PassEventArgsToCommand">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:System.EventArgs"/> passed to the event handler
            should be passed to the command as well.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.EventArgs"/> passed to the event handler should be passed to the command; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Interactivity.EventToCommand.DisableAssociatedObjectOnCannotExecute">
            <summary>
            Gets or sets a value indicating whether the associated object should be disabled when the command
            cannot be executed.
            </summary>
            <remarks>
            Wrapper for the DisableAssociatedObjectOnCannotExecute dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.EventToCommand.Command">
            <summary>
            Gets or sets the associated Command.
            </summary>
            <remarks>
            Wrapper for the Command dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.EventToCommand.CommandParameter">
            <summary>
            Gets or sets the command parameter.
            </summary>
            <remarks>
            Wrapper for the CommandParameter dependency property.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Interactivity.FocusMoment">
            <summary>
            Available moments on which the focus can be set.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.FocusMoment.Loaded">
            <summary>
            Focus when the control is loaded.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.FocusMoment.PropertyChanged">
            <summary>
            Focus when a property has changed.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.FocusMoment.Event">
            <summary>
            Focus when a specific event occurs.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.Focus">
            <summary>
            Behavior to set focus to a <see cref="T:System.Windows.FrameworkElement"/>. This behavior sets the focus
            only once on the first time the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <remarks>In Silverlight, focusing a control seems very, very hard. Just calling Focus() isn't enough, so a timer is used to set the timer 500 milliseconds after the
            user control has been loaded. This is customizable via the <see cref="P:Catel.Windows.Interactivity.Focus.FocusDelay"/> property.</remarks>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.Focus"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.FocusDelayProperty">
            <summary>
            Using a DependencyProperty as the backing store for FocusDelay.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.FocusMomentProperty">
            <summary>
            Using a DependencyProperty as the backing store for FocusMoment.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.SourceProperty">
            <summary>
            Using a DependencyProperty as the backing store for Source.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.PropertyNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for PropertyName.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnSourceEventOccurred(System.Object,System.EventArgs)">
            <summary>
            Called when the event on the <see cref="P:Catel.Windows.Interactivity.Focus.Source"/> has occurred.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnSourcePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.Windows.Interactivity.Focus.Source"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnSourceChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:SourceChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.StartFocus">
            <summary>
            Starts the focus.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnTimerTick(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="!:Tick"/> event occurs on the timer.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.SetFocus">
            <summary>
            Sets the focus to the assoicated object.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.FocusDelay">
            <summary>
            Gets or sets the focus delay. If smaller than 25, no delay will be used. If larger than 5000, it will be set to 5000.
            <para />
            The default value in WPF is <c>0</c>. The default value in Silverlight is <c>500</c>.
            </summary>
            <value>The focus delay.</value>
            <example>
            </example>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.FocusMoment">
            <summary>
            Gets or sets the focus moment.
            <para/>
            When this value is <see cref="!:FocusMoment.Loaded"/>, no other properties need to be set.
            <para/>
            When this value is <see cref="!:FocusMoment.PropertyChanged"/>, both the <see cref="P:Catel.Windows.Interactivity.Focus.Source"/> and 
            <see cref="P:Catel.Windows.Interactivity.Focus.PropertyName"/> must be set.
            <para/>
            When this value is <see cref="!:FocusMoment.Event"/>, both the <see cref="P:Catel.Windows.Interactivity.Focus.Source"/> and 
            <see cref="P:Catel.Windows.Interactivity.Focus.EventName"/> must be set.
            </summary>
            <value>The focus moment.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.Source">
            <summary>
            Gets or sets the source. This value is required when the <see cref="P:Catel.Windows.Interactivity.Focus.FocusMoment"/> property is either 
            <see cref="!:FocusMoment.PropertyChanged"/> or <see cref="!:FocusMoment.Event"/>.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.PropertyName">
            <summary>
            Gets or sets the name of the property. This value is required when the <see cref="P:Catel.Windows.Interactivity.Focus.FocusMoment"/> property is 
            <see cref="!:FocusMoment.PropertyChanged"/>.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.EventName">
            <summary>
            Gets or sets the name of the event. This value is required when the <see cref="P:Catel.Windows.Interactivity.Focus.FocusMoment"/> property is 
            <see cref="!:FocusMoment.Event"/>.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="T:Catel.Windows.Interactivity.KeyPressToCommand">
            <summary>
            Behavior that converts a key press on a specific UI element to a command.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.KeyPressToCommand.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.KeyPressToCommand.KeyProperty">
            <summary>
            Using a DependencyProperty as the backing store for Key.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.KeyPressToCommand.ModifiersProperty">
            <summary>
            Using a DependencyProperty as the backing store for Modifiers.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.KeyPressToCommand.CommandProperty">
            <summary>
            Using a DependencyProperty as the backing store for Command.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.KeyPressToCommand.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.KeyPressToCommand.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.KeyPressToCommand.OnKeyUp(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when the specified key is pressed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Interactivity.KeyPressToCommand.Key">
            <summary>
            Gets or sets the key to which the behavior should respond.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.KeyPressToCommand.Modifiers">
            <summary>
            Gets or sets the modifiers to check for.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.KeyPressToCommand.Command">
            <summary>
            Gets or sets the command to execute when the key is pressed.
            </summary>
            <value>The command.</value>
        </member>
        <member name="T:Catel.Windows.Interactivity.MouseInfo">
            <summary>
            Trigger that enables a property to bind the several mouse events for the associated object.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.MouseInfo.IsMouseOverProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsMouseOver.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.MouseInfo.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.MouseInfo.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.MouseInfo.OnMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Called when the mouse enters the associated object.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.MouseInfo.OnMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Called when the mouse leaves the associated object.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Interactivity.MouseInfo.IsMouseOver">
            <summary>
            Gets or sets a value indicating whether the mouse is currently over the associated object.
            </summary>
            <value>
            	<c>true</c> if the mouse is currently over the associated object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Interactivity.NumericTextBox">
            <summary>
            Behavior to only allow numeric input on a <see cref="T:System.Windows.Controls.TextBox"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.NumericTextBox.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.NumericTextBox.IsNegativeAllowedProperty">
            <summary>
            Are negative numbers allowed
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.NumericTextBox.IsDecimalAllowedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDecimalAllowed.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.NumericTextBox.OnAssociatedObjectKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.KeyDown"/> occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>        
        </member>
        <member name="M:Catel.Windows.Interactivity.NumericTextBox.OnAssociatedObjectTextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Called when the <see cref="!:TextBox.TextChanged"/> occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.TextChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.NumericTextBox.IsDigit(System.Windows.Input.Key)">
            <summary>
            Determines whether the specified key is a digit.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key is digit; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.NumericTextBox.GetKeyValue(System.Windows.Input.KeyEventArgs)">
            <summary>
            Gets the Key to a string value.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="P:Catel.Windows.Interactivity.NumericTextBox.IsNegativeAllowed">
            <summary>
            Gets or sets a value indicating whether negative values are allowed.
            </summary>
            <value>
              <c>true</c> if [allow negative]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Interactivity.NumericTextBox.IsDecimalAllowed">
            <summary>
            Gets or sets a value indicating whether decimal values are allowed.
            </summary>
            <value>
              <c>true</c> if [IS decimal allowed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Interactivity.SelectTextOnFocus">
            <summary>
            Selects all the text when the <see cref="T:System.Windows.Controls.TextBox"/> is focused.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnPreviewMouseLeftButtonDown(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnGotMouseCapture(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.GotMouseCapture"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnGotKeyboardFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.GotKeyboardFocus"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.SelectAllText">
            <summary>
            Selects all the text in the associated object.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.TriggerBase`1">
            <summary>
            Trigger base class that handles a safe unsubscribe and clean up because the default
            Trigger class does not always call <see cref="M:Catel.Windows.Interactivity.TriggerBase`1.OnDetaching"/>.
            <para/>
            This class also adds some specific features such as <see cref="M:Catel.Windows.Interactivity.TriggerBase`1.ValidateRequiredProperties"/>
            which is automatically called when the trigger is attached.
            </summary>
            <typeparam name="T">The <see cref="T:System.Windows.FrameworkElement"/> this trigger should attach to.</typeparam>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.OnAttached">
            <summary>
            Called after the action is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.OnDetaching">
            <summary>
            Called when the action is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.ValidateRequiredProperties">
            <summary>
            Validates the required properties. This method is called when the object is attached, but before
            the <see cref="M:Catel.Windows.Interactivity.TriggerBase`1.Initialize"/> is invoked.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.Initialize">
            <summary>
            Initializes the trigger action. This method is called instead of the <see cref="M:Catel.Windows.Interactivity.TriggerBase`1.OnAttached"/> which is sealed
            to protect the additional trigger action.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.Uninitialize">
            <summary>
            Uninitializes the behavior. This method is called when <see cref="M:Catel.Windows.Interactivity.TriggerBase`1.OnDetaching"/> is called, or when the
            <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is unloaded.
            <para/>
            If dependency properties are used, it is very important to use <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)"/> 
            to clear the value of the dependency properties in this method.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.OnAssociatedObjectLoadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is loaded. This method is introduced to prevent
            double initialization when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is already loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.OnAssociatedObjectUnloadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is unloaded. This 
            method is introduced to prevent double uninitialization when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is already unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.CleanUp">
            <summary>
            Actually cleans up the trigger action because <see cref="M:Catel.Windows.Interactivity.TriggerBase`1.OnDetaching"/> is not always called.
            </summary>
            <remarks>
            This is based on the blog post: http://dotnetbyexample.blogspot.com/2011/04/safe-event-detachment-pattern-for.html.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.TriggerBase`1.IsAssociatedObjectLoaded">
            <summary>
            Gets a value indicating whether the <see cref="!:TriggerBase&lt;T&gt;.AssociatedObject"/> is loaded.
            </summary>
            <value>
            	<c>true</c> if the <see cref="!:TriggerBase&lt;T&gt;.AssociatedObject"/> is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Interactivity.UpdateBindingOnTextChanged">
            <summary>
              This behavior automatically updates the binding of a <see cref="T:System.Windows.Controls.TextBox"/> when the
              <see cref="!:TextBox.TextChanged"/> event occurs.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.UpdateBindingOnTextChanged"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
              Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
              Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.OnAssociatedObjectTextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
              Called when the <see cref="!:TextBox.TextChanged"/> occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.TextChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.OnTimerTick(System.Object,System.EventArgs)">
            <summary>
              Called when timer ticks.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.UpdateBinding">
            <summary>
              Updates the binding value.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.UpdateDelay">
            <summary>
              Gets or sets the update delay. 
              <para />
              This is the value that is used between updates in milliseconds. The binding will be updated
              when no new text change event is detected within the delay.
              <para />
              The default value is <c>250</c>. If the value is smaller than <c>50</c>, the value
              will be ignored and there will be no delay between the key down and the binding update. If the
              value is higher than <c>5000</c>, it will be set to <c>5000</c>.
            </summary>
            <value>The update delay.</value>
        </member>
        <member name="T:Ricciolo.StylesExplorer.MarkupReflection.BamlFile">
            <summary>
            Rappresenta un singole file Baml all'interno di un assembly
            </summary>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.BamlFile.LoadContent">
            <summary>
            Carica il Baml attraverso il motore di WPF con Application.LoadComponent
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.BamlFile.Stream">
            <summary>
            Restituisce lo stream originale contenente il Baml
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.BamlFile.Uri">
            <summary>
            Restituisce l'indirizzo secondo lo schema pack://
            </summary>
        </member>
        <member name="T:Ricciolo.StylesExplorer.MarkupReflection.IType">
            <summary>
            Interface rappresenting a DotNet type
            </summary>
        </member>
        <member name="T:Catel.Windows.Markup.XamlTypeResolver">
            <summary>
            Custom <see cref="T:System.Windows.Markup.IXamlTypeResolver"/> because Microsoft "wisely" decided to make it internal.
            </summary>
            <remarks>
            This class was intended to be used by the <see cref="T:Catel.Windows.StyleHelper"/> class, but the issue was solved by
            using the <see cref="T:System.Windows.Markup.XamlTypeMapper"/> class. Therefore, this class is just party finished (but not yet thrown away).
            </remarks>
        </member>
        <member name="F:Catel.Windows.Markup.XamlTypeResolver.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Markup.XamlTypeResolver.Resolve(System.String)">
            <summary>
            When implemented in a derived class, resolves a XAML element to the corresponding type.
            </summary>
            <param name="qualifiedTypeName">The fully qualified type name to resolve.</param>
            <returns>
            The type that <paramref name="qualifiedTypeName"/> represents.
            </returns>
        </member>
        <member name="M:Catel.Windows.Markup.XamlTypeResolver.ResolveType(System.String)">
            <summary>
            Resolves the type.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:Catel.Windows.Markup.XamlTypeResolver.ResolveDotNetFrameworkType(System.String)">
            <summary>
            Resolves the type of the .NET Framework (thus a control located in the .NET Framework that can be used without
            namespace prefix in XAML).
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>
            	<see cref="T:System.Type"/> or <c>null</c> if the name is not a .NET Framework type.
            </returns>
        </member>
        <member name="M:Catel.Windows.Markup.XamlTypeResolver.CleanUpTypeName(System.String)">
            <summary>
            Cleans up the name of the type by stripping "{x:Type" and "}" from the type name.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.GetAttribute(System.String)">
            <summary>
            When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"></see>.
            </summary>
            
            <returns>
            The value of the specified attribute. If the attribute is not found, null is returned.
            </returns>
            
            <param name="name">The qualified name of the attribute. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.GetAttribute(System.String,System.String)">
            <summary>
            When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see>.
            </summary>
            
            <returns>
            The value of the specified attribute. If the attribute is not found, null is returned. This method does not move the reader.
            </returns>
            
            <param name="namespaceURI">The namespace URI of the attribute. </param>
            <param name="name">The local name of the attribute. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.GetAttribute(System.Int32)">
            <summary>
            When overridden in a derived class, gets the value of the attribute with the specified index.
            </summary>
            
            <returns>
            The value of the specified attribute. This method does not move the reader.
            </returns>
            
            <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToAttribute(System.String)">
            <summary>
            When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"></see>.
            </summary>
            
            <returns>
            true if the attribute is found; otherwise, false. If false, the reader's position does not change.
            </returns>
            
            <param name="name">The qualified name of the attribute. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see>.
            </summary>
            
            <returns>
            true if the attribute is found; otherwise, false. If false, the reader's position does not change.
            </returns>
            
            <param name="name">The local name of the attribute. </param>
            <param name="ns">The namespace URI of the attribute. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToFirstAttribute">
            <summary>
            When overridden in a derived class, moves to the first attribute.
            </summary>
            
            <returns>
            true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).
            </returns>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToNextAttribute">
            <summary>
            When overridden in a derived class, moves to the next attribute.
            </summary>
            
            <returns>
            true if there is a next attribute; false if there are no more attributes.
            </returns>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToElement">
            <summary>
            When overridden in a derived class, moves to the element that contains the current attribute node.
            </summary>
            
            <returns>
            true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).
            </returns>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ReadAttributeValue">
            <summary>
            When overridden in a derived class, parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.
            </summary>
            
            <returns>
            true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.
            </returns>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Read">
            <summary>
            When overridden in a derived class, reads the next node from the stream.
            </summary>
            
            <returns>
            true if the next node was read successfully; false if there are no more nodes to read.
            </returns>
            
            <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Close">
            <summary>
            When overridden in a derived class, changes the <see cref="P:System.Xml.XmlReader.ReadState"></see> to Closed.
            </summary>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.LookupNamespace(System.String)">
            <summary>
            When overridden in a derived class, resolves a namespace prefix in the current element's scope.
            </summary>
            
            <returns>
            The namespace URI to which the prefix maps or null if no matching prefix is found.
            </returns>
            
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ResolveEntity">
            <summary>
            When overridden in a derived class, resolves the entity reference for EntityReference nodes.
            </summary>
            
            <exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node; this implementation of the reader cannot resolve entities (<see cref="P:System.Xml.XmlReader.CanResolveEntity"></see> returns false). </exception>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
            <summary>
            Gets a collection of defined prefix-namespace Mappings that are currently in scope.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IDictionary"></see> that contains the current in-scope namespaces.
            </returns>
            
            <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope"></see> value that specifies the type of namespace nodes to return.</param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
            <summary>
            Gets the namespace URI mapped to the specified prefix.
            </summary>
            
            <returns>
            The namespace URI that is mapped to the prefix; null if the prefix is not mapped to a namespace URI.
            </returns>
            
            <param name="prefix">The prefix whose namespace URI you wish to find.</param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
            <summary>
            Gets the prefix that is mapped to the specified namespace URI.
            </summary>
            
            <returns>
            The prefix that is mapped to the namespace URI; null if the namespace URI is not mapped to a prefix.
            </returns>
            
            <param name="namespaceName">The namespace URI whose prefix you wish to find.</param>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.NodeType">
            <summary>
            When overridden in a derived class, gets the type of the current node.
            </summary>
            
            <returns>
            One of the <see cref="T:System.Xml.XmlNodeType"></see> values representing the type of the current node.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.LocalName">
            <summary>
            When overridden in a derived class, gets the local name of the current node.
            </summary>
            
            <returns>
            The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.NamespaceURI">
            <summary>
            When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
            </summary>
            
            <returns>
            The namespace URI of the current node; otherwise an empty string.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Prefix">
            <summary>
            When overridden in a derived class, gets the namespace prefix associated with the current node.
            </summary>
            
            <returns>
            The namespace prefix associated with the current node.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.HasValue">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlReader.Value"></see>.
            </summary>
            
            <returns>
            true if the node on which the reader is currently positioned can have a Value; otherwise, false. If false, the node has a value of String.Empty.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Resolver">
            <summary>
            Returns object used to resolve types
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Value">
            <summary>
            When overridden in a derived class, gets the text value of the current node.
            </summary>
            
            <returns>
            The value returned depends on the <see cref="P:System.Xml.XmlReader.NodeType"></see> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. 
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.RootNamespaces">
            <summary>
            Return root namespaces
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Depth">
            <summary>
            When overridden in a derived class, gets the depth of the current node in the XML document.
            </summary>
            
            <returns>
            The depth of the current node in the XML document.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.BaseURI">
            <summary>
            When overridden in a derived class, gets the base URI of the current node.
            </summary>
            
            <returns>
            The base URI of the current node.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.IsEmptyElement">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).
            </summary>
            
            <returns>
            true if the current node is an element (<see cref="P:System.Xml.XmlReader.NodeType"></see> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.AttributeCount">
            <summary>
            When overridden in a derived class, gets the number of attributes on the current node.
            </summary>
            
            <returns>
            The number of attributes on the current node.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.EOF">
            <summary>
            When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
            
            <returns>
            true if the reader is positioned at the end of the stream; otherwise, false.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ReadState">
            <summary>
            When overridden in a derived class, gets the state of the reader.
            </summary>
            
            <returns>
            One of the <see cref="T:System.Xml.ReadState"></see> values.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.NameTable">
            <summary>
            When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable"></see> associated with this implementation.
            </summary>
            
            <returns>
            The XmlNameTable enabling you to get the atomized version of a string within the node.
            </returns>
            
        </member>
        <member name="T:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping">
            <summary>
            Rappresenta la mappatura tra namespace XML e namespace CLR con relativo assembly
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping.XmlNamespace">
            <summary>
            Restituisce o imposta il namespace XML
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping.AssemblyId">
            <summary>
            Restituisce l'id dell'assembly
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping.ClrNamespace">
            <summary>
            Restituisce il namespace clr
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping.Presentation">
            <summary>
            Restituisce il mapping di default di WPF
            </summary>
        </member>
        <member name="T:Catel.Windows.Media.Effects.EmptyEffect">
            <summary>
            Empty effect that simply copies the pixel color (so it doesn't make ANY changes to pixels).
            </summary>
            <remarks>
            Implemented to be able to disable pixel shaders in Catel.
            <para />
            During the build of Catel, this pixel shader effect will not be recompiled to prevent all users to install the
            DirectX SDK. If you want to make changes, take a look at the readme of Catel.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Media.Effects.ShaderEffectBase">
            <summary>
            Base class for shader effects in Catel.
            </summary>
        </member>
        <member name="F:Catel.Windows.Media.Effects.ShaderEffectBase.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.Windows.Media.Effects.ShaderEffectBase"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.ShaderEffect"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Media.Effects.ShaderEffectBase.InputProperty">
            <summary>
            Property definition for <see cref="P:Catel.Windows.Media.Effects.ShaderEffectBase.Input"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.InitializePixelShader">
            <summary>
            Initializes the pixel shader.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.CreatePixelShader">
            <summary>
            Creates the pixel shader.
            </summary>
            <returns><see cref="T:System.Windows.Media.Effects.PixelShader"/>.</returns>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.OnPixelShaderInvalidPixelShaderEncountered(System.Object,System.EventArgs)">
            <summary>
            Handles the InvalidPixelShaderEncountered event of the PixelShader control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            This is added to prevent a real crash on the app because of an invalid pixel shader.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Media.Effects.ShaderEffectBase.IsEnabled">
            <summary>
            Gets a value indicating whether this shader effect is enabled.
            </summary>
            <value>
            	<c>true</c> if this shader effect is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Media.Effects.ShaderEffectBase.Input">
            <summary>
            Gets or sets the input brush.
            </summary>
            <value>The input.</value>
        </member>
        <member name="M:Catel.Windows.Media.Effects.EmptyEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Media.Effects.EmptyEffect"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.EmptyEffect.CreatePixelShader">
            <summary>
            Creates the pixel shader.
            </summary>
            <returns><see cref="T:System.Windows.Media.Effects.PixelShader"/>.</returns>
        </member>
        <member name="T:Catel.Windows.DataWindowButton">
            <summary>
            Information for a button that should be generated.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindowButton.#ctor(System.String,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindowButton"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="execute">The execute delegate.</param>
        </member>
        <member name="M:Catel.Windows.DataWindowButton.#ctor(System.String,System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindowButton"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="execute">The execute delegate.</param>
            <param name="canExecute">The can execute delegate.</param>
        </member>
        <member name="M:Catel.Windows.DataWindowButton.#ctor(System.String,System.Windows.Input.ICommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindowButton"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.DataWindowButton.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindowButton"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="bindingPath">The binding path expression of the command to bind to.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="bindingPath"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.Text">
            <summary>
            Gets the text as it is displayed on the button.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.Command">
            <summary>
            Gets the command associated with this button.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.CommandBindingPath">
            <summary>
            Gets the command binding path.
            </summary>
            <value>The command binding path.</value>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.IsDefault">
            <summary>
            Gets or sets a value indicating whether this button is the default button.
            </summary>
            <value>
            	<c>true</c> if this button is the default button; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.IsCancel">
            <summary>
            Gets or sets a value indicating whether this button is the cancel button.
            </summary>
            <value>
            	<c>true</c> if this button is the cancel button; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.ModalWindowHelper">
            <summary>
            Modal window helper class
            </summary>
        </member>
        <member name="M:Catel.Windows.ModalWindowHelper.#ctor(System.IntPtr,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.ModalWindowHelper"/> class.
            </summary>
            <param name="parentWindow">Handle of the window to set as parent.</param>
            <param name="className">Class name of the window to make modal.</param>
            <param name="windowTitle">Title of the window to make modal.</param>
        </member>
        <member name="M:Catel.Windows.ModalWindowHelper.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Catel.Windows.ModalWindowHelper"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.ModalWindowHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Catel.Windows.ModalWindowHelper.StartSearch">
            <summary>
            Starts the search for the window
            </summary>
        </member>
        <member name="M:Catel.Windows.ModalWindowHelper.FindWindowAndSetModal">
            <summary>
            Tries to find the window and set its state to modal.
            </summary>
        </member>
        <member name="P:Catel.Windows.ModalWindowHelper.IsSucceeded">
            <summary>
            Gets whether the window was found and its state is set to model.
            </summary>
        </member>
        <member name="T:Catel.Windows.ModalWindowHelper.RECT">
            <summary>
            Win32 RECT structure.
            </summary>
        </member>
        <member name="F:Catel.Windows.ModalWindowHelper.RECT.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:Catel.Windows.ModalWindowHelper.RECT.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:Catel.Windows.ModalWindowHelper.RECT.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:Catel.Windows.ModalWindowHelper.RECT.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:Catel.Windows.WrapOptions">
            <summary>
            Available wrap options that can be used in the <see cref="T:Catel.Windows.WrapControlHelper"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapOptions.GenerateInlineInfoBarMessageControl">
            <summary>
            Generates an inline <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> around the element to wrap.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapOptions.GenerateOverlayInfoBarMessageControl">
            <summary>
            Generates an overlay <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> around the element to wrap.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapOptions.GenerateWarningAndErrorValidatorForDataContext">
            <summary>
            Generates a <see cref="T:Catel.Windows.Controls.WarningAndErrorValidator"/> for the data context.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapOptions.All">
            <summary>
            All available options.
            </summary>
        </member>
        <member name="T:Catel.Windows.WrapControlHelper">
            <summary>
            An helper to wrap controls and windows with several controls, such as the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.InternalGridName">
            <summary>
            The name of the internal grid. Retrieve the grid with this name to add custom controls to the inner grid.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.ButtonsWrapPanelName">
            <summary>
            The name of the wrap panel that contains the buttons.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.MainContentHolderName">
            <summary>
            The name of the main content holder, used to prevent that an element is wrapped multiple times.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.InfoBarMessageControlName">
            <summary>
            The name of the info bar message control.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.WarningAndErrorValidatorName">
            <summary>
            The name of the warning and error validator control.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.DefaultOkButtonName">
            <summary>
            The name of the default ok button.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.DefaultCancelButtonName">
            <summary>
            The name of the default cancel button.
            </summary>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)">
            <summary>
            Determines whether the specified <see cref="T:System.Windows.FrameworkElement"/> can be safely wrapped.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Windows.FrameworkElement"/> can be safely wrapped; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions)">
            <summary>
            Wraps the specified framework element without any buttons.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <returns>
            	<see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.
            </returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions,System.Windows.Controls.UserControl)">
            <summary>
            Wraps the specified framework element without any buttons.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <param name="parentContentControl">The parent content control.</param>
            <returns>
            	<see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.
            </returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            <para/>
            This method will automatically handle the disconnecting of the framework element from the parent is the <paramref name="parentContentControl"/>
            is passed.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions,System.Windows.Controls.ContentControl)">
            <summary>
            Wraps the specified framework element without any buttons.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <param name="parentContentControl">The parent content control.</param>
            <returns>
            	<see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.
            </returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            <para/>
            This method will automatically handle the disconnecting of the framework element from the parent is the <paramref name="parentContentControl"/>
            is passed.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions,Catel.Windows.DataWindowButton[])">
            <summary>
            Wraps the specified framework element without any buttons.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <param name="buttons">The buttons.</param>
            <returns>
            	<see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.
            </returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions,Catel.Windows.DataWindowButton[],System.Windows.Controls.UserControl)">
            <summary>
            Wraps the specified framework element.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <param name="buttons">The buttons to add.</param>
            <param name="parentContentControl">The parent content control.</param>
            <returns><see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.</returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            This method will automatically handle the disconnecting of the framework element from the parent is the <paramref name="parentContentControl"/>
            is passed.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions,Catel.Windows.DataWindowButton[],System.Windows.Controls.ContentControl)">
            <summary>
            Wraps the specified framework element.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <param name="buttons">The buttons to add.</param>
            <param name="parentContentControl">The parent content control.</param>
            <returns><see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.</returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            This method will automatically handle the disconnecting of the framework element from the parent is the <paramref name="parentContentControl"/>
            is passed.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions,Catel.Windows.DataWindowButton[],System.Object)">
            <summary>
            Wraps the specified framework element.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <param name="buttons">The buttons to add.</param>
            <param name="parentContentControl">The parent content control.</param>
            <returns><see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.</returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            This method will automatically handle the disconnecting of the framework element from the parent is the <paramref name="parentContentControl"/>
            is passed.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.GetWrappedElement``1(System.Windows.Controls.Grid,Catel.Windows.WrapOptions)">
            <summary>
            Gets a wrapped element mapped by the <paramref name="wrapOption"/>.
            </summary>
            <typeparam name="T">Type of the control to return.</typeparam>
            <param name="wrappedGrid">The wrapped grid.</param>
            <param name="wrapOption">The wrap option that is used, which will be mapped to the control. The value <see cref="F:Catel.Windows.WrapOptions.All"/> is not allowed and will throw an exception.</param>
            <returns>
            	<see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if the element is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="wrappedGrid"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="wrapOption"/> is <see cref="F:Catel.Windows.WrapOptions.All"/>.</exception>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.GetWrappedElement(System.Windows.Controls.Grid,Catel.Windows.WrapOptions)">
            <summary>
            Gets a wrapped element mapped by the <paramref name="wrapOption"/>.
            </summary>
            <param name="wrappedGrid">The wrapped grid.</param>
            <param name="wrapOption">The wrap option that is used, which will be mapped to the control. The value <see cref="F:Catel.Windows.WrapOptions.All"/> is not allowed and will throw an exception.</param>
            <returns>
            	<see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if the element is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="wrappedGrid"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="wrapOption"/> is <see cref="F:Catel.Windows.WrapOptions.All"/>.</exception>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.GetWrappedElement``1(System.Windows.Controls.Grid,System.String)">
            <summary>
            Gets a wrapped element by name.
            </summary>
            <typeparam name="T">Type of the control to return.</typeparam>
            <param name="wrappedGrid">The wrapped grid.</param>
            <param name="controlName">Name of the control.</param>
            <returns>
            	<see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if the element is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="wrappedGrid"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="controlName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="controlName"/> is not a valid control name.</exception>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.GetWrappedElement(System.Windows.Controls.Grid,System.String)">
            <summary>
            Gets a wrapped element by name.
            </summary>
            <param name="wrappedGrid">The wrapped grid.</param>
            <param name="controlName">Name of the control.</param>
            <returns>
            	<see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if the element is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="wrappedGrid"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="controlName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="controlName"/> is not a valid control name.</exception>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.SetControlContent(System.Object,System.Windows.FrameworkElement)">
            <summary>
            Sets the content of the control via reflection so all "special implementation differences"
            between WPF and Silverlight are now removed.
            </summary>
            <param name="contentControl">The content control.</param>
            <param name="element">The element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="contentControl"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.PixelShaderMode">
            <summary>
            Sets the available pixel shader modes of Catel.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Off">
            <summary>
            Disable all pixel shaders.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Auto">
            <summary>
            Automatically determine the best option.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Hardware">
            <summary>
            Use hardware for the pixel shaders.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Software">
            <summary>
            Use software for the pixel shaders.
            </summary>
        </member>
        <member name="T:Catel.Windows.StyleHelper">
            <summary>
            Helper class for WPF styles and themes.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.DefaultKeyPrefix">
            <summary>
            Prefix of a default style key.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.DefaultKeyPostfix">
            <summary>
            Postfix of a default style key.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper._resourceDictionaryCache">
            <summary>
            Cached decompiled XAML resource dictionaries.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper._styleToFrameworkElementTypeCache">
            <summary>
            Cached types of <see cref="T:System.Windows.FrameworkElement"/> belonging to the string representation of the type.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.PixelShaderMode">
            <summary>
            This property allows you to disable all pixel shaders in Catel.
            <para />
            By default, all pixel shaders are enabled.
            </summary>
        </member>
        <member name="M:Catel.Windows.StyleHelper.EnsureApplicationResourcesAndCreateStyleForwarders(System.Uri)">
            <summary>
            Ensures that an application instance exists and the styles are applied to the application. This method is extremely useful
            to apply when WPF is hosted (for example, when loaded as plugin of a non-WPF application).
            </summary>
            <param name="applicationResourceDictionary">The application resource dictionary.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="applicationResourceDictionary"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.EnsureApplicationResourcesAndCreateStyleForwarders(System.Uri,System.String)">
            <summary>
            Ensures that an application instance exists and the styles are applied to the application. This method is extremely useful
            to apply when WPF is hosted (for example, when loaded as plugin of a non-WPF application).
            </summary>
            <param name="applicationResourceDictionary">The application resource dictionary.</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="applicationResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the current application (<see cref="P:System.Windows.Application.Current"/> to retrieve
            the resources. The forwarders will be written to the same dictionary.
            </summary>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.String)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the current application (<see cref="P:System.Windows.Application.Current"/> to retrieve
            the resources. The forwarders will be written to the same dictionary.
            </summary>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the passed resources, but the forwarders will be written to the same dictionary as
            the source dictionary.
            </summary>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.String)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the passed resources, but the forwarders will be written to the same dictionary as
            the source dictionary.
            </summary>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are 
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            <para/>
            This method will use the passed resources.
            </summary>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="targetResources">Resource dictionary where the forwarders will be written to.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetResources"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.String)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            <para/>
            This method will use the passed resources.
            </summary>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="targetResources">Resource dictionary where the forwarders will be written to.</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.Boolean)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the passed resources.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="targetResources">Resource dictionary where the forwarders will be written to.</param>
            <param name="forceForwarders">if set to <c>true</c>, styles will not be completed but only forwarders are created.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetResources"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.Boolean,System.String)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the passed resources.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="targetResources">Resource dictionary where the forwarders will be written to.</param>
            <param name="forceForwarders">if set to <c>true</c>, styles will not be completed but only forwarders are created.</param>
            <param name="defaultPrefix">The default prefix, uses to determine the styles as base for other styles.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.FindResourceDictionaryDeclaringType(System.Windows.ResourceDictionary,System.Type)">
            <summary>
            Finds the <see cref="T:System.Windows.ResourceDictionary"/> declaring the real style for the target type.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="targetType">Type of the target.</param>
            <returns><see cref="T:System.Windows.ResourceDictionary"/> in which the style is defined, or <c>null</c> if not found.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.FindDefaultStyles(System.Windows.ResourceDictionary,System.String)">
            <summary>
            Finds all the the default styles definitions
            </summary>
            <param name="sourceResources">The source resources.</param>
            <param name="defaultPrefix">The default prefix.</param>
            <returns>An enumerable of default styles.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CompleteStyleWithAdditionalInfo(System.Windows.Style,System.Windows.Style)">
            <summary>
            Completes a style with additional info.
            </summary>
            <param name="style">The style.</param>
            <param name="styleWithAdditionalInfo">The style with additional info.</param>
            <returns>New completed style.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="style"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="styleWithAdditionalInfo"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.RecreateDefaultStylesBasedOnTheme(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.String)">
            <summary>
            Recreates the default styles based on theme.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="resources">The resources to fix.</param>
            <param name="defaultPrefix">The default prefix.</param>
            <remarks>
            This method is introduced due to the lack of the ability to use DynamicResource for the BasedOn property when
            defining styles inside a derived theme.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="resources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="defaultPrefix"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CloneStyleIfBasedOnControl(System.Windows.ResourceDictionary,System.Windows.Style,System.Type)">
            <summary>
            Clones a style when the style is based on a control.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="style">The style.</param>
            <param name="basedOnType">Type which the style is based on.</param>
            <returns><see cref="T:System.Windows.Style"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="style"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="basedOnType"/> is <c>null</c>.</exception>
            <remarks>
            This method is introduced due to the lack of the ability to use DynamicResource for the BasedOn property when
            defining styles inside a derived theme.
            <para/>
            Should be used in combination with the <c>RecreateDefaultStylesBasedOnTheme</c> method.
            </remarks>
        </member>
        <member name="M:Catel.Windows.StyleHelper.FindFrameworkElementStyleIsBasedOn(System.Uri,System.String)">
            <summary>
            Finds the <see cref="T:System.Windows.FrameworkElement"/> a specific style is based on.
            </summary>
            <param name="resourceDictionaryUri">The resource dictionary URI.</param>
            <param name="styleKey">The style key.</param>
            <returns>
            	<see cref="T:System.Type"/> or <c>null</c> if the style is not based on a <see cref="T:System.Windows.FrameworkElement"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="resourceDictionaryUri"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="styleKey"/> is <c>null</c>.</exception>
            <remarks>
            This method is introduced due to the lack of the ability to use DynamicResource for the BasedOn property when
            defining styles inside a derived theme.
            Should be used in combination with the <see cref="M:Catel.Windows.StyleHelper.RecreateDefaultStylesBasedOnTheme(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.String)"/> method.
            </remarks>
        </member>
        <member name="P:Catel.Windows.StyleHelper.IsStyleForwardingEnabled">
            <summary>
            Gets or sets a value indicating whether style forwarding is enabled. Style forwarding can be
            enabled by calling one of the <see cref="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles"/> overloads.
            </summary>
            <value>
            	<c>true</c> if this instance is style forwarding enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.VisualTargetPresentationSource">
            <summary>
            Support for multi-threaded host visuals.
            </summary>
            <remarks>
            The original code can be found here: http://blogs.msdn.com/b/dwayneneed/archive/2007/04/26/multithreaded-ui-hostvisual.aspx.
            </remarks>
        </member>
        <member name="M:Catel.Windows.VisualTargetPresentationSource.#ctor(System.Windows.Media.HostVisual)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.VisualTargetPresentationSource"/> class.
            </summary>
            <param name="hostVisual">The host visual.</param>
        </member>
        <member name="M:Catel.Windows.VisualTargetPresentationSource.GetCompositionTargetCore">
            <summary>
            When overridden in a derived class, returns a visual target for the given source.
            </summary>
            <returns>
            Returns a <see cref="T:System.Windows.Media.CompositionTarget"/> that is target for rendering the visual.
            </returns>
        </member>
        <member name="P:Catel.Windows.VisualTargetPresentationSource.RootVisual">
            <summary>
            When overridden in a derived class, gets or sets the root visual being presented in the source.
            </summary>
            <value></value>
            <returns>
            The root visual.
            </returns>
        </member>
        <member name="P:Catel.Windows.VisualTargetPresentationSource.IsDisposed">
            <summary>
            When overridden in a derived class, gets a value that declares whether the object is disposed.
            </summary>
            <value></value>
            <returns>true if the object is disposed; otherwise, false.
            </returns>
        </member>
        <member name="T:Catel.Windows.Media.Effects.GrayscaleEffect">
            <summary>
            Grayscale effect to convert objects to a grayscale mode.
            </summary>
            <remarks>
            This code is originally taken from http://bursjootech.blogspot.com/2008/06/grayscale-effect-pixel-shader-effect-in.html.
            <para />
            During the build of Catel, this pixel shader effect will not be recompiled to prevent all users to install the
            DirectX SDK. If you want to make changes, take a look at the readme of Catel.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Media.Effects.GrayscaleEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Media.Effects.GrayscaleEffect"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Media.Effects.GrayscaleEffect.DesaturationFactorProperty">
            <summary>
            Property definition for <see cref="P:Catel.Windows.Media.Effects.GrayscaleEffect.DesaturationFactor"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.GrayscaleEffect.CreatePixelShader">
            <summary>
            Creates the pixel shader.
            </summary>
            <returns><see cref="T:System.Windows.Media.Effects.PixelShader"/>.</returns>
        </member>
        <member name="M:Catel.Windows.Media.Effects.GrayscaleEffect.CoerceDesaturationFactor(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the desaturation factor.
            </summary>
            <param name="d">The dependency object.</param>
            <param name="value">The value.</param>
            <returns>New factor.</returns>
        </member>
        <member name="P:Catel.Windows.Media.Effects.GrayscaleEffect.DesaturationFactor">
            <summary>
            Gets or sets the desaturation factor.
            </summary>
            <value>The desaturation factor.</value>
        </member>
        <member name="T:Catel.Windows.Media.ImageSourceExtensions">
            <summary>
            Extensions for the <see cref="T:System.Windows.Media.ImageSource"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.ImageSourceExtensions.ConvertByteArrayToImageSource(System.Byte[])">
            <summary>
            Converts an array of bytes to a <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="bytes">Bytes to convert.</param>
            <returns><see cref="T:System.Windows.Media.ImageSource"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="bytes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Media.ImageSourceExtensions.ConvertImageSourceToByteArray(System.Windows.Media.ImageSource)">
            <summary>
            Converts an <see cref="T:System.Windows.Media.ImageSource"/> to an array of bytes.
            </summary>
            <param name="image"><see creConvertImageSourceToByteArrayf="ImageSource"/> to convert.</param>
            <returns>Array of bytes.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="image"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.Media.VisualExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.Media.Visual"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.VisualExtensions.GetParentWindow(System.Windows.Media.Visual)">
            <summary>
            Get the parent window for this visual object or null when not exists.
            </summary>
            <param name="visualObject">Reference to visual object.</param>
            <returns>Reference to partent window or null when not exists.</returns>
        </member>
        <member name="T:Catel.Windows.Media.Imaging.ImagingExtensions">
            <summary>
            Extension methods for <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Imaging.ImagingExtensions.ConvertBitmapToBitmapSource(System.Drawing.Bitmap)">
            <summary>
            Converts a <see cref="T:System.Drawing.Bitmap"/> to a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> object.
            </summary>
            <param name="bitmap"><see cref="T:System.Drawing.Bitmap"/> to convert.</param>
            <returns><see cref="T:System.Windows.Media.Imaging.BitmapSource"/> or null if an error occurs.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="bitmap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Media.Imaging.ImagingExtensions.Resize(System.Windows.Media.Imaging.BitmapImage,System.Int32,System.Int32)">
            <summary>
            Resizes the specified bitmap. It resizes the bitmap, but keeps the scale.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="maxWidth">Width of the max.</param>
            <param name="maxHeight">Height of the max.</param>
            <returns>
            	<see cref="T:System.Windows.Media.Imaging.BitmapImage"/> with the right size.
            </returns>
            <remarks>If the original image is 1000x100 px and you specify a new dimension of 100x100 px the resized image is 100x10px</remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="bitmap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Media.Imaging.ImagingExtensions.ConvertToImage(System.Windows.Media.Imaging.BitmapImage)">
            <summary>
            Converts to image.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="bitmap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Media.Imaging.ImagingExtensions.ConvertToBitmapImage(System.Drawing.Image)">
            <summary>
            Converts to bitmap image.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="image"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.DataWindowMode">
            <summary>
            Mode of the <see cref="T:Catel.Windows.DataWindow"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowMode.OkCancel">
            <summary>
            Window contains OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowMode.OkCancelApply">
            <summary>
            Window contains OK, Cancel and Apply buttons.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowMode.Close">
            <summary>
            Window contains Close button.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowMode.Custom">
            <summary>
            Window contains custom buttons.
            </summary>
        </member>
        <member name="T:Catel.Windows.DataWindowDefaultButton">
            <summary>
            Available default buttons on the data window mode.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowDefaultButton.OK">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowDefaultButton.Apply">
            <summary>
            Apply button.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowDefaultButton.Close">
            <summary>
            Close button.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowDefaultButton.None">
            <summary>
            No button.
            </summary>
        </member>
        <member name="T:Catel.Windows.InfoBarMessageControlGenerationMode">
            <summary>
            Defines the way the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> is included in the <see cref="T:Catel.Windows.DataWindow"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.InfoBarMessageControlGenerationMode.None">
            <summary>
            No <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> is generated.
            </summary>
        </member>
        <member name="F:Catel.Windows.InfoBarMessageControlGenerationMode.Inline">
            <summary>
            Generate the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> as inline.
            </summary>
        </member>
        <member name="F:Catel.Windows.InfoBarMessageControlGenerationMode.Overlay">
            <summary>
            Generate the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> as overlay.
            </summary>
        </member>
        <member name="T:Catel.Windows.DataWindow">
            <summary>
            <see cref="T:System.Windows.Window"/> class that implements the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> and
            the default buttons, according to the <see cref="T:Catel.Windows.DataWindowMode"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindow.Offset">
            <summary>
            Offset of the window to the sides of the primary monitor.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindow.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> with the <see cref="F:Catel.Windows.DataWindowMode.OkCancel"/> mode.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButton">The default button.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean)">
            <summary>
            Initializes a new instance of this class with custom commands.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of this class with custom commands.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="buttons">The buttons.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},System.Boolean)">
            <summary>
            Initializes a new instance of this class with custom commands.
            </summary>
            <param name="buttons">The buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteOk">
            <summary>
            Executes the OK command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnOkCanExecute">
            <summary>
            Determines whether the user can execute the OK command.
            </summary>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnOkExecute">
            <summary>
            Handled when the user invokes the OK command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteCancel">
            <summary>
            Executes the Cancel command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnCancelCanExecute">
            <summary>
            Determines whether the user can execute the Cancel command.
            </summary>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnCancelExecute">
            <summary>
            Handled when the user invokes the Cancel command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteApply">
            <summary>
            Executes the Apply command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnApplyCanExecute">
            <summary>
            Determines whether the user can execute the Apply command.
            </summary>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnApplyExcute">
            <summary>
            Handled when the user invokes the Apply command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteClose">
            <summary>
            Executes the Close command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnCloseCanExecute">
            <summary>
            Determines whether the user can execute the Close command.
            </summary>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnCloseExecute">
            <summary>
            Handled when the user invokes the Close command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnButtonReceivedFocus(System.Object,System.EventArgs)">
            <summary>
            Called when a button has received the focus.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.HandleDefaultButton">
            <summary>
            Handles the default button, which can be done via a key event (enter).
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.AddCustomButton(Catel.Windows.DataWindowButton)">
            <summary>
            Adds a custom button to the list of buttons.
            </summary>
            <param name="dataWindowButton">The data window button.</param>
            <exception cref="T:System.InvalidOperationException">The <paramref name="dataWindowButton"/> is added when the window is already loaded.</exception>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnContentChanged(System.Object,System.Object)">
            <summary>
            Invoked when the content of this control has been changed. This method will add the dynamic controls automatically.
            </summary>
            <param name="oldContent">Old content.</param>
            <param name="newContent">New content.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnInternalGridChanged">
            <summary>
            Called when the internal grid has changed.
            </summary>
            <remarks>
            This method is only invoked when the grid is set, not when the grid is cleared (which is something that should never happen).
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="T:Catel.Windows.DataWindow"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="T:Catel.Windows.DataWindow"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.EnableWindowOffset(System.EventArgs)">
            <summary>
            Enables the window offset as it was used before Catel 1.3. To support the maximized state,
            the default is removed.
            <para />
            If you want to have an offset for non-maximized windows, either call this method or set the
            <c>MaxWidth</c> and <c>MaxHeight</c> properties.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnDataWindowClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the Closing event of the DataWindow control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.Initialize">
            <summary>
            Initializes the window.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.ApplyChanges">
            <summary>
            Applies all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.DiscardChanges">
            <summary>
            Discards all changes made by this window.
            </summary>
        </member>
        <member name="P:Catel.Windows.DataWindow.Mode">
            <summary>
            Gets the <see cref="T:Catel.Windows.DataWindowMode"/> that this window uses.
            </summary>
        </member>
        <member name="P:Catel.Windows.DataWindow.CanClose">
            <summary>
            Gets or sets a value indicating whether this instance can close.
            </summary>
            <value><c>true</c> if this instance can close; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow.Commands">
            <summary>
            Gets the commands that are currently available on the data window.
            </summary>
            <value>The commands.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow.DefaultButton">
            <summary>
            Gets the default button.
            </summary>
            <value>The default button.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow.IsOKButtonAvailable">
            <summary>
            Gets a value indicating whether this instance is OK button available.
            </summary>
            <value>
            	<c>true</c> if this instance is OK button available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindow.IsCancelButtonAvailable">
            <summary>
            Gets a value indicating whether this instance is cancel button available.
            </summary>
            <value>
            	<c>true</c> if this instance is cancel button available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindow.IsApplyButtonAvailable">
            <summary>
            Gets a value indicating whether this instance is apply button available.
            </summary>
            <value>
            	<c>true</c> if this instance is apply button available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindow.IsCloseButtonAvailable">
            <summary>
            Gets a value indicating whether this instance is close button available.
            </summary>
            <value>
            	<c>true</c> if this instance is close button available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindow.ClosedByButton">
            <summary>
            Gets or sets a value indicating whether the window was closed by a 'user'-button.
            </summary>
            <value><c>true</c> if closed by button; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow.InternalGrid">
            <summary>
            Gets the internal grid. This control gives internal classes a change to add additional controls to
            the dynamically created grid.
            </summary>
            <value>The internal grid.</value>
        </member>
        <member name="T:Catel.Windows.DataWindow`1">
            <summary>
            <see cref="T:System.Windows.Window"/> class that implements the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> and
            the default buttons, according to the <see cref="T:Catel.Windows.DataWindowMode"/>. Also supports MVVM out
            of the box by using the <see cref="T:Catel.MVVM.ViewModelBase"/>.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
        </member>
        <member name="T:Catel.Windows.IDataWindow">
            <summary>
            Interface defining functionality for the <see cref="T:Catel.Windows.DataWindow`1"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor">
            <summary>
            Initializes a new instance of this class with the <see cref="F:Catel.Windows.DataWindowMode.OkCancel"/> mode.
            </summary>
            <remarks>
            This constructor is public to support design mode.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButton">The default button.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButtons">The default buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButtons">The default buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of this class with the <see cref="F:Catel.Windows.DataWindowMode.OkCancel"/> mode.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButton">The default button.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButton">The default button.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButtons">The default buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButtons">The default buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.OnViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the current view model has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.OnViewModelPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the current <see cref="P:Catel.Windows.DataWindow`1.ViewModel"/> has changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.OnViewModelClosed(System.Object,Catel.MVVM.ViewModelClosedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.DataWindow`1.ViewModel"/> has been closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.DiscardChanges">
            <summary>
            Discards all changes made by this window.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.ApplyChanges">
            <summary>
            Applies all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.OnViewModelChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.DataWindow`1.ViewModel"/> has changed.
            </summary>
            <remarks>
            This method does not implement any logic and saves a developer from subscribing/unsubscribing
            to the <see cref="E:Catel.Windows.DataWindow`1.ViewModelChanged"/> event inside the same user control.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="P:Catel.Windows.DataWindow`1.Catel#MVVM#IViewModelContainer#ViewModel">
            <summary>
            Gets the view model that is contained by the container.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow`1.ViewModel">
            <summary>
            Gets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="E:Catel.Windows.DataWindow`1.PropertyChanged">
            <summary>
            Occurs when a property on the container has changed.
            </summary>
            <remarks>
            This event makes it possible to externally subscribe to property changes of a <see cref="T:System.Windows.DependencyObject"/>
            (mostly the container of a view model) because the .NET Framework does not allows us to.
            </remarks>
        </member>
        <member name="E:Catel.Windows.DataWindow`1.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.DataWindow`1.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.DataWindow`1.ViewModelPropertyChanged">
            <summary>
            Occurs when a property on the <see cref="P:Catel.Windows.DataWindow`1.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="T:Catel.Windows.LoaderAnimation">
            <summary>
            Contains a loader animation for the WaitWindow
            </summary>
            <summary>
            LoaderAnimation
            </summary>
        </member>
        <member name="M:Catel.Windows.LoaderAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.LoaderAnimation"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.LoaderAnimation.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Catel.Windows.PleaseWaitMode">
            <summary>
            The action that the <see cref="T:Catel.Windows.PleaseWaitWindow"/> should take when it becomes visible.
            </summary>
        </member>
        <member name="F:Catel.Windows.PleaseWaitMode.Dimm">
            <summary>
            Dimm the parent window.
            </summary>
        </member>
        <member name="F:Catel.Windows.PleaseWaitMode.Blur">
            <summary>
            Blur the parent window.
            </summary>
        </member>
        <member name="F:Catel.Windows.PleaseWaitMode.Nothing">
            <summary>
            Don't do anything.
            </summary>
        </member>
        <member name="T:Catel.Windows.PleaseWaitWindow">
            <summary>
            Please wait window to show a please wait window with the option to customize the text.
            </summary>
            <remarks>
            Parts of this code comes from this blog: http://blogs.msdn.com/b/dwayneneed/archive/2007/04/26/multithreaded-ui-hostvisual.aspx.
            </remarks>
            <summary>
            PleaseWaitWindow
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.Windows.PleaseWaitWindow"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.PleaseWaitWindow"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.#ctor(System.String)">
            <summary>
            Initializes a please wait window with default text.
            </summary>
            <param name="text">Text to display in the window.</param>
        </member>
        <member name="F:Catel.Windows.PleaseWaitWindow.TextProperty">
            <summary>
            DependencyProperty definition as the backing store for Text.
            </summary>
        </member>
        <member name="F:Catel.Windows.PleaseWaitWindow.PercentageProperty">
            <summary>
            Using a DependencyProperty as the backing store for Percentage.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Catel.Windows.PleaseWaitWindow.IsIndeterminateProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsIndeterminate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.ChangeMode(System.Boolean)">
            <summary>
            Changes the mode of all windows of the application.
            </summary>
            <param name="dimm">if set to <c>true</c>, all windows should be dimmed.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.ChangeMode(System.Collections.Generic.IEnumerable{System.Windows.FrameworkElement},System.Boolean)">
            <summary>
            Changes the dimming.
            </summary>
            <param name="elements">The framework elements.</param>
            <param name="dimm">if set to <c>true</c>, all windows should be dimmed.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the window is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.OnLayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when the layout of the window is updated.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.CreateMediaElementsOnWorkerThread">
            <summary>
            Creates the media element on worker thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.OnlyDimmOwnerWindow">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Catel.Windows.PleaseWaitWindow"/> should only dimm the owner window.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if if only the owner window should be dimmed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.DoNotDimmPopups">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Catel.Windows.PleaseWaitWindow"/> should not dimm popups. This
            value is only used when <see cref="P:Catel.Windows.PleaseWaitWindow.OnlyDimmOwnerWindow"/> is <c>false</c>.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if if only the owner window should be dimmed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.Mode">
            <summary>
            Gets or sets the mode.
            <para/>
            The default value is <see cref="F:Catel.Windows.PleaseWaitMode.Blur"/>.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.Text">
            <summary>
            Gets or sets Text.
            </summary>
            <remarks>
            Wrapper for the Text dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.Percentage">
            <summary>
            Gets or sets the percentage.
            </summary>
            <value>The percentage.</value>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.IsIndeterminate">
            <summary>
            Gets or sets a value indicating whether this instance is indeterminate.
            </summary>
            <value>
            	<c>true</c> if this instance is indeterminate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.IsOwnerDimmed">
            <summary>
            Gets or sets a value indicating whether this instance is dimmed.
            </summary>
            <value><c>true</c> if this instance is dimmed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.Windows.PleaseWaitHelper">
            <summary>
            PleaseWait window Helper class.
            </summary>
        </member>
        <member name="F:Catel.Windows.PleaseWaitHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.PleaseWaitHelper"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show">
            <summary>
            Shows the please wait window with the default status text.
            </summary>
            <remarks>
            When this method is used, the <see cref="M:Catel.Windows.PleaseWaitHelper.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status.</param>
            <remarks>
            When this method is used, the <see cref="M:Catel.Windows.PleaseWaitHelper.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(System.String,System.Int32,System.Int32)">
            <summary>
            Shows the specified status.
            </summary>
            <param name="statusFormat">The status format.</param>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.ComponentModel.RunWorkerCompletedEventHandler)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed. This method will also subscribe to the
            <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> event.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="runWorkerCompletedDelegate">The run worker completed delegate.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work 
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.String,System.Double)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work 
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status.</param>
            <param name="windowWidth">Width of the window.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.ComponentModel.RunWorkerCompletedEventHandler,System.String,System.Double)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed. This method will also subscribe to the
            <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> event.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="runWorkerCompletedDelegate">The run worker completed delegate.</param>
            <param name="status">The status.</param>
            <param name="windowWidth">Width of the window.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.UpdateStatus(System.String)">
            <summary>
            Updates the status.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.UpdateStatus(System.String,System.Double)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.UpdateStatus(System.String,System.Int32,System.Int32)">
            <summary>
            Updates the status text.
            </summary>
            <param name="statusFormat">The status format.</param>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Hide">
            <summary>
            Hides the Please Wait window.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.UpdateStatusText(System.String,System.Double)">
            <summary>
            Updates the status text.
            </summary>
            <param name="text">The text.</param>
            <param name="windowWidth">Width of the window.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.ShowWindow(System.Int32)">
            <summary>
            Shows the window delayed by using the <see cref="P:Catel.Windows.PleaseWaitHelper.MinimumDurationBeforeShow"/>.
            </summary>
            <param name="percentage">The percentage. If <c>-1</c>, the window is assumed to be indeterminate.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.HideWindow">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="P:Catel.Windows.PleaseWaitHelper.Instance">
            <summary>
            Gets the instance of this singleton class.
            </summary>
        </member>
        <member name="P:Catel.Windows.PleaseWaitHelper.PleaseWaitWindow">
            <summary>
            Gets or sets the <see cref="P:Catel.Windows.PleaseWaitHelper.PleaseWaitWindow"/> instance.
            </summary>
        </member>
        <member name="P:Catel.Windows.PleaseWaitHelper.MinimumDurationBeforeShow">
            <summary>
            Gets or sets the minimum duration in milliseconds that an operation must take before the window is actually shown.
            </summary>
            <value>The minimum duration in milliseconds that an operation must take before the window is actually shown.</value>
        </member>
        <member name="P:Catel.Windows.PleaseWaitHelper.MinimumShowTime">
            <summary>
            Gets or sets the minimum show time in milliseconds.
            </summary>
            <value>The minimum show time in milliseconds.</value>
        </member>
        <member name="T:Catel.Windows.PleaseWaitHelper.HideWindowDelegate">
            <summary>
            Delegate that allows this class to re-invoke the HideWindow method.
            </summary>
        </member>
        <member name="T:Catel.Windows.PleaseWaitHelper.UpdateStatusTextDelegate">
            <summary>
            Delegate to update the status text of the <see cref="P:Catel.Windows.PleaseWaitHelper.PleaseWaitWindow"/>.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.VisualWrapper">
            <summary>
            This visual wrapper is used by VisualTargetPresentationSource
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.VisualWrapper.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.VisualWrapper.Child">
            <summary>
            Gets or sets the child.
            </summary>
            <value>The child.</value>
        </member>
        <member name="P:Catel.Windows.Controls.VisualWrapper.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>
            The number of visual child elements for this element.
            </returns>
        </member>
    </members>
</doc>
